
veniceBienale-prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000402c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  20000000  0000402c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dac  20000130  0000415c  00020130  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
  5 .debug_info   0005e69f  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006c25  00000000  00000000  0007e850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00007a3f  00000000  00000000  00085475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000928  00000000  00000000  0008ceb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001210  00000000  00000000  0008d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001d4f2  00000000  00000000  0008e9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f1e9  00000000  00000000  000abede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000815b3  00000000  00000000  000bb0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000019bc  00000000  00000000  0013c67c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 dd 08 00 00 c5 08 00 00 c5 08 00 00     ... ............
	...
      2c:	c5 08 00 00 00 00 00 00 00 00 00 00 c5 08 00 00     ................
      3c:	31 09 00 00 c5 08 00 00 c5 08 00 00 c5 08 00 00     1...............
      4c:	c5 08 00 00 c5 08 00 00 c5 08 00 00 c5 08 00 00     ................
      5c:	c9 08 00 00 c5 08 00 00 dd 20 00 00 c5 08 00 00     ......... ......
      6c:	c5 08 00 00 c5 08 00 00 c5 08 00 00 ed 20 00 00     ............. ..
      7c:	c5 08 00 00 c5 08 00 00 c5 08 00 00 c5 08 00 00     ................
      8c:	c5 08 00 00 00 00 00 00 c5 08 00 00 c5 08 00 00     ................
      9c:	c5 08 00 00 c5 08 00 00 c5 08 00 00 c5 08 00 00     ................
      ac:	c5 08 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000130 	.word	0x20000130
      d4:	00000000 	.word	0x00000000
      d8:	00004028 	.word	0x00004028

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000134 	.word	0x20000134
     108:	00004028 	.word	0x00004028
     10c:	20000128 	.word	0x20000128
     110:	00000000 	.word	0x00000000

00000114 <_ZN10FanChannelC1Ei>:
*/
#include <Arduino.h>
#include "FanChannel.h"

// default constructor
FanChannel::FanChannel(int _ctrlPin){
     114:	b510      	push	{r4, lr}
     116:	2300      	movs	r3, #0
     118:	0004      	movs	r4, r0
     11a:	0008      	movs	r0, r1
	controlPin = _ctrlPin;
     11c:	6021      	str	r1, [r4, #0]
FanChannel::FanChannel(int _ctrlPin){
     11e:	60a3      	str	r3, [r4, #8]
     120:	60e3      	str	r3, [r4, #12]
	pinMode(controlPin, OUTPUT);
     122:	2101      	movs	r1, #1
     124:	f001 ff04 	bl	1f30 <pinMode>
} //FanChannel
     128:	0020      	movs	r0, r4
     12a:	bd10      	pop	{r4, pc}

0000012c <_ZN10FanChannel14inflateAndHoldEiiii>:


// turns fan on with '_inflateValue' for '_period' time, then turns the fan on '_holdValue' permanently
// _delay is a delay on start up time, should not influence _period
bool FanChannel::inflateAndHold(int _period, int _inflateValue, int _holdValue, int _delay)
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     12e:	001f      	movs	r7, r3
	if (inflateAndHoldState == 0){
     130:	6883      	ldr	r3, [r0, #8]
{
     132:	0004      	movs	r4, r0
     134:	000e      	movs	r6, r1
     136:	0015      	movs	r5, r2
	if (inflateAndHoldState == 0){
     138:	2b00      	cmp	r3, #0
     13a:	d104      	bne.n	146 <_ZN10FanChannel14inflateAndHoldEiiii+0x1a>
		inflateStartedMillis = millis();
     13c:	f000 fc06 	bl	94c <millis>
		inflateAndHoldState = 1;
     140:	2301      	movs	r3, #1
		inflateStartedMillis = millis();
     142:	6060      	str	r0, [r4, #4]
		inflateAndHoldState = 1;
     144:	60a3      	str	r3, [r4, #8]
	}
	
	if(inflateAndHoldState == 1 && millis() - inflateStartedMillis >= _delay)
     146:	68a3      	ldr	r3, [r4, #8]
     148:	2b01      	cmp	r3, #1
     14a:	d106      	bne.n	15a <_ZN10FanChannel14inflateAndHoldEiiii+0x2e>
     14c:	f000 fbfe 	bl	94c <millis>
     150:	6863      	ldr	r3, [r4, #4]
     152:	1ac0      	subs	r0, r0, r3
     154:	9b06      	ldr	r3, [sp, #24]
     156:	4298      	cmp	r0, r3
     158:	d218      	bcs.n	18c <_ZN10FanChannel14inflateAndHoldEiiii+0x60>
	{
		analogWrite(controlPin, _inflateValue);
		inflateAndHoldState = 2;
	}
	
	if(inflateAndHoldState == 2 && millis() - inflateStartedMillis > _period - _delay){
     15a:	68a3      	ldr	r3, [r4, #8]
     15c:	2b02      	cmp	r3, #2
     15e:	d107      	bne.n	170 <_ZN10FanChannel14inflateAndHoldEiiii+0x44>
     160:	f000 fbf4 	bl	94c <millis>
     164:	6863      	ldr	r3, [r4, #4]
     166:	1ac0      	subs	r0, r0, r3
     168:	9b06      	ldr	r3, [sp, #24]
     16a:	1af5      	subs	r5, r6, r3
     16c:	42a8      	cmp	r0, r5
     16e:	d814      	bhi.n	19a <_ZN10FanChannel14inflateAndHoldEiiii+0x6e>
		analogWrite(controlPin, _holdValue);
		inflateAndHoldState = 3;
	}
	if(inflateAndHoldState == 3 && millis() - inflateStartedMillis > _period){
     170:	68a3      	ldr	r3, [r4, #8]
     172:	2b03      	cmp	r3, #3
     174:	d001      	beq.n	17a <_ZN10FanChannel14inflateAndHoldEiiii+0x4e>
		inflateAndHoldState = 0;
		return false; // done inflating, now holding
	}
	return true;
     176:	2001      	movs	r0, #1
}
     178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(inflateAndHoldState == 3 && millis() - inflateStartedMillis > _period){
     17a:	f000 fbe7 	bl	94c <millis>
     17e:	6863      	ldr	r3, [r4, #4]
     180:	1ac0      	subs	r0, r0, r3
     182:	42b0      	cmp	r0, r6
     184:	d9f7      	bls.n	176 <_ZN10FanChannel14inflateAndHoldEiiii+0x4a>
		inflateAndHoldState = 0;
     186:	2000      	movs	r0, #0
     188:	60a0      	str	r0, [r4, #8]
		return false; // done inflating, now holding
     18a:	e7f5      	b.n	178 <_ZN10FanChannel14inflateAndHoldEiiii+0x4c>
		analogWrite(controlPin, _inflateValue);
     18c:	0029      	movs	r1, r5
     18e:	6820      	ldr	r0, [r4, #0]
     190:	f001 fde2 	bl	1d58 <analogWrite>
		inflateAndHoldState = 2;
     194:	2302      	movs	r3, #2
     196:	60a3      	str	r3, [r4, #8]
     198:	e7df      	b.n	15a <_ZN10FanChannel14inflateAndHoldEiiii+0x2e>
		analogWrite(controlPin, _holdValue);
     19a:	0039      	movs	r1, r7
     19c:	6820      	ldr	r0, [r4, #0]
     19e:	f001 fddb 	bl	1d58 <analogWrite>
		inflateAndHoldState = 3;
     1a2:	2303      	movs	r3, #3
     1a4:	60a3      	str	r3, [r4, #8]
     1a6:	e7e3      	b.n	170 <_ZN10FanChannel14inflateAndHoldEiiii+0x44>

000001a8 <_ZN10FanChannel7breatheEiiiiifffi>:
int _periodo,
int _inflateVal, int _holdVal, int _deflateVal, int _restartVal,
float _inflateTime, float _holdTime, float _deflateTime,
int _delay)

{
     1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1aa:	001e      	movs	r6, r3
	if(breathingState == 0){
     1ac:	68c3      	ldr	r3, [r0, #12]
{
     1ae:	0004      	movs	r4, r0
     1b0:	000d      	movs	r5, r1
     1b2:	0017      	movs	r7, r2
	if(breathingState == 0){
     1b4:	2b00      	cmp	r3, #0
     1b6:	d104      	bne.n	1c2 <_ZN10FanChannel7breatheEiiiiifffi+0x1a>
		breathingState++;
     1b8:	3301      	adds	r3, #1
     1ba:	60c3      	str	r3, [r0, #12]
		breathStart = millis();
     1bc:	f000 fbc6 	bl	94c <millis>
     1c0:	6120      	str	r0, [r4, #16]
	}
	
	if(breathingState == 1 && millis() - breathStart >= _delay)
     1c2:	68e3      	ldr	r3, [r4, #12]
     1c4:	2b01      	cmp	r3, #1
     1c6:	d107      	bne.n	1d8 <_ZN10FanChannel7breatheEiiiiifffi+0x30>
     1c8:	f000 fbc0 	bl	94c <millis>
     1cc:	6923      	ldr	r3, [r4, #16]
     1ce:	1ac0      	subs	r0, r0, r3
     1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     1d2:	4298      	cmp	r0, r3
     1d4:	d300      	bcc.n	1d8 <_ZN10FanChannel7breatheEiiiiifffi+0x30>
     1d6:	e06d      	b.n	2b4 <_ZN10FanChannel7breatheEiiiiifffi+0x10c>
	{
		analogWrite(controlPin, _inflateVal);
		breathingState++;
	}
	
	if(breathingState == 2 && millis() - breathStart > static_cast< float >(_periodo)*_inflateTime)
     1d8:	68e3      	ldr	r3, [r4, #12]
     1da:	2b02      	cmp	r3, #2
     1dc:	d112      	bne.n	204 <_ZN10FanChannel7breatheEiiiiifffi+0x5c>
     1de:	f000 fbb5 	bl	94c <millis>
     1e2:	6923      	ldr	r3, [r4, #16]
     1e4:	1ac0      	subs	r0, r0, r3
     1e6:	f003 fae1 	bl	37ac <__aeabi_ui2f>
     1ea:	1c07      	adds	r7, r0, #0
     1ec:	0028      	movs	r0, r5
     1ee:	f003 fa8d 	bl	370c <__aeabi_i2f>
     1f2:	990a      	ldr	r1, [sp, #40]	; 0x28
     1f4:	f002 ffce 	bl	3194 <__aeabi_fmul>
     1f8:	1c01      	adds	r1, r0, #0
     1fa:	1c38      	adds	r0, r7, #0
     1fc:	f002 fd7c 	bl	2cf8 <__aeabi_fcmpgt>
     200:	2800      	cmp	r0, #0
     202:	d15f      	bne.n	2c4 <_ZN10FanChannel7breatheEiiiiifffi+0x11c>
	{
		analogWrite(controlPin, _holdVal);
		breathingState++;
	}
	
	if(breathingState == 3 &&  millis() - breathStart > static_cast< float >(_periodo)*(_inflateTime + _holdTime) - _delay)
     204:	68e3      	ldr	r3, [r4, #12]
     206:	2b03      	cmp	r3, #3
     208:	d120      	bne.n	24c <_ZN10FanChannel7breatheEiiiiifffi+0xa4>
     20a:	f000 fb9f 	bl	94c <millis>
     20e:	6923      	ldr	r3, [r4, #16]
     210:	1ac0      	subs	r0, r0, r3
     212:	f003 facb 	bl	37ac <__aeabi_ui2f>
     216:	1c06      	adds	r6, r0, #0
     218:	0028      	movs	r0, r5
     21a:	f003 fa77 	bl	370c <__aeabi_i2f>
     21e:	990b      	ldr	r1, [sp, #44]	; 0x2c
     220:	1c07      	adds	r7, r0, #0
     222:	980a      	ldr	r0, [sp, #40]	; 0x28
     224:	f002 fd7c 	bl	2d20 <__aeabi_fadd>
     228:	1c01      	adds	r1, r0, #0
     22a:	1c38      	adds	r0, r7, #0
     22c:	f002 ffb2 	bl	3194 <__aeabi_fmul>
     230:	1c07      	adds	r7, r0, #0
     232:	980d      	ldr	r0, [sp, #52]	; 0x34
     234:	f003 fa6a 	bl	370c <__aeabi_i2f>
     238:	1c01      	adds	r1, r0, #0
     23a:	1c38      	adds	r0, r7, #0
     23c:	f003 f8ca 	bl	33d4 <__aeabi_fsub>
     240:	1c01      	adds	r1, r0, #0
     242:	1c30      	adds	r0, r6, #0
     244:	f002 fd58 	bl	2cf8 <__aeabi_fcmpgt>
     248:	2800      	cmp	r0, #0
     24a:	d143      	bne.n	2d4 <_ZN10FanChannel7breatheEiiiiifffi+0x12c>
	{
		analogWrite(controlPin,_deflateVal);
		breathingState++;
	}
	
	if(breathingState == 4 && millis() - breathStart > _delay + static_cast< float >(_periodo)*(_inflateTime + _holdTime + _deflateTime) + _delay)
     24c:	68e3      	ldr	r3, [r4, #12]
     24e:	2b04      	cmp	r3, #4
     250:	d126      	bne.n	2a0 <_ZN10FanChannel7breatheEiiiiifffi+0xf8>
     252:	f000 fb7b 	bl	94c <millis>
     256:	0007      	movs	r7, r0
     258:	980d      	ldr	r0, [sp, #52]	; 0x34
     25a:	f003 fa57 	bl	370c <__aeabi_i2f>
     25e:	6923      	ldr	r3, [r4, #16]
     260:	1c06      	adds	r6, r0, #0
     262:	1af8      	subs	r0, r7, r3
     264:	f003 faa2 	bl	37ac <__aeabi_ui2f>
     268:	990b      	ldr	r1, [sp, #44]	; 0x2c
     26a:	9001      	str	r0, [sp, #4]
     26c:	980a      	ldr	r0, [sp, #40]	; 0x28
     26e:	f002 fd57 	bl	2d20 <__aeabi_fadd>
     272:	990c      	ldr	r1, [sp, #48]	; 0x30
     274:	f002 fd54 	bl	2d20 <__aeabi_fadd>
     278:	1c07      	adds	r7, r0, #0
     27a:	0028      	movs	r0, r5
     27c:	f003 fa46 	bl	370c <__aeabi_i2f>
     280:	1c01      	adds	r1, r0, #0
     282:	1c38      	adds	r0, r7, #0
     284:	f002 ff86 	bl	3194 <__aeabi_fmul>
     288:	1c31      	adds	r1, r6, #0
     28a:	f002 fd49 	bl	2d20 <__aeabi_fadd>
     28e:	1c31      	adds	r1, r6, #0
     290:	f002 fd46 	bl	2d20 <__aeabi_fadd>
     294:	1c01      	adds	r1, r0, #0
     296:	9801      	ldr	r0, [sp, #4]
     298:	f002 fd2e 	bl	2cf8 <__aeabi_fcmpgt>
     29c:	2800      	cmp	r0, #0
     29e:	d121      	bne.n	2e4 <_ZN10FanChannel7breatheEiiiiifffi+0x13c>
	{
		analogWrite(controlPin,_restartVal);
		breathingState++;
	}
	
	if(breathingState == 5 && millis() - breathStart > _periodo)
     2a0:	68e3      	ldr	r3, [r4, #12]
     2a2:	2b05      	cmp	r3, #5
     2a4:	d105      	bne.n	2b2 <_ZN10FanChannel7breatheEiiiiifffi+0x10a>
     2a6:	f000 fb51 	bl	94c <millis>
     2aa:	6923      	ldr	r3, [r4, #16]
     2ac:	1ac0      	subs	r0, r0, r3
     2ae:	42a8      	cmp	r0, r5
     2b0:	d820      	bhi.n	2f4 <_ZN10FanChannel7breatheEiiiiifffi+0x14c>
	{
		breathingState= 0;
	}
	
}
     2b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		analogWrite(controlPin, _inflateVal);
     2b4:	0039      	movs	r1, r7
     2b6:	6820      	ldr	r0, [r4, #0]
     2b8:	f001 fd4e 	bl	1d58 <analogWrite>
		breathingState++;
     2bc:	68e3      	ldr	r3, [r4, #12]
     2be:	3301      	adds	r3, #1
     2c0:	60e3      	str	r3, [r4, #12]
     2c2:	e789      	b.n	1d8 <_ZN10FanChannel7breatheEiiiiifffi+0x30>
		analogWrite(controlPin, _holdVal);
     2c4:	0031      	movs	r1, r6
     2c6:	6820      	ldr	r0, [r4, #0]
     2c8:	f001 fd46 	bl	1d58 <analogWrite>
		breathingState++;
     2cc:	68e3      	ldr	r3, [r4, #12]
     2ce:	3301      	adds	r3, #1
     2d0:	60e3      	str	r3, [r4, #12]
     2d2:	e797      	b.n	204 <_ZN10FanChannel7breatheEiiiiifffi+0x5c>
		analogWrite(controlPin,_deflateVal);
     2d4:	9908      	ldr	r1, [sp, #32]
     2d6:	6820      	ldr	r0, [r4, #0]
     2d8:	f001 fd3e 	bl	1d58 <analogWrite>
		breathingState++;
     2dc:	68e3      	ldr	r3, [r4, #12]
     2de:	3301      	adds	r3, #1
     2e0:	60e3      	str	r3, [r4, #12]
     2e2:	e7b3      	b.n	24c <_ZN10FanChannel7breatheEiiiiifffi+0xa4>
		analogWrite(controlPin,_restartVal);
     2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
     2e6:	6820      	ldr	r0, [r4, #0]
     2e8:	f001 fd36 	bl	1d58 <analogWrite>
		breathingState++;
     2ec:	68e3      	ldr	r3, [r4, #12]
     2ee:	3301      	adds	r3, #1
     2f0:	60e3      	str	r3, [r4, #12]
     2f2:	e7d5      	b.n	2a0 <_ZN10FanChannel7breatheEiiiiifffi+0xf8>
		breathingState= 0;
     2f4:	2300      	movs	r3, #0
     2f6:	60e3      	str	r3, [r4, #12]
     2f8:	e7db      	b.n	2b2 <_ZN10FanChannel7breatheEiiiiifffi+0x10a>

000002fa <_ZN4IRIn9fillArrayEi>:
	this->fillArray(_delay);
}


void IRIn::fillArray(int _delay)
{
     2fa:	b570      	push	{r4, r5, r6, lr}
     2fc:	0005      	movs	r5, r0
     2fe:	000e      	movs	r6, r1
	for (int i = 0; i < sampleCount; i++)
     300:	2400      	movs	r4, #0
     302:	686b      	ldr	r3, [r5, #4]
     304:	429c      	cmp	r4, r3
     306:	da0a      	bge.n	31e <_ZN4IRIn9fillArrayEi+0x24>
	{
		readings[i] = analogRead(inputPin);
     308:	6828      	ldr	r0, [r5, #0]
     30a:	f001 fcbf 	bl	1c8c <analogRead>
     30e:	00a3      	lsls	r3, r4, #2
     310:	18eb      	adds	r3, r5, r3
     312:	60d8      	str	r0, [r3, #12]
		if(delay!=0) delay(_delay);
     314:	0030      	movs	r0, r6
     316:	f000 fb1f 	bl	958 <delay>
	for (int i = 0; i < sampleCount; i++)
     31a:	3401      	adds	r4, #1
     31c:	e7f1      	b.n	302 <_ZN4IRIn9fillArrayEi+0x8>
	}
}
     31e:	bd70      	pop	{r4, r5, r6, pc}

00000320 <_ZN4IRInC1Eii>:
IRIn::IRIn(int _inputPin, int _delay)
     320:	b570      	push	{r4, r5, r6, lr}
     322:	26d4      	movs	r6, #212	; 0xd4
     324:	0004      	movs	r4, r0
     326:	2364      	movs	r3, #100	; 0x64
     328:	0008      	movs	r0, r1
     32a:	0015      	movs	r5, r2
     32c:	2100      	movs	r1, #0
     32e:	2201      	movs	r2, #1
     330:	0076      	lsls	r6, r6, #1
     332:	6063      	str	r3, [r4, #4]
     334:	60a1      	str	r1, [r4, #8]
     336:	55a2      	strb	r2, [r4, r6]
     338:	26aa      	movs	r6, #170	; 0xaa
     33a:	36ff      	adds	r6, #255	; 0xff
     33c:	55a2      	strb	r2, [r4, r6]
     33e:	32b0      	adds	r2, #176	; 0xb0
     340:	32ff      	adds	r2, #255	; 0xff
     342:	50a3      	str	r3, [r4, r2]
	inputPin = _inputPin;
     344:	6020      	str	r0, [r4, #0]
	pinMode(inputPin, INPUT);
     346:	f001 fdf3 	bl	1f30 <pinMode>
	this->fillArray(_delay);
     34a:	0029      	movs	r1, r5
     34c:	0020      	movs	r0, r4
     34e:	f7ff ffd4 	bl	2fa <_ZN4IRIn9fillArrayEi>
}
     352:	0020      	movs	r0, r4
     354:	bd70      	pop	{r4, r5, r6, pc}

00000356 <_ZN4IRIn10addReadingEv>:

void IRIn::addReading()
{
     356:	b570      	push	{r4, r5, r6, lr}
     358:	0004      	movs	r4, r0
	readings[sampleBeingUpdated] = analogRead(inputPin);
     35a:	6885      	ldr	r5, [r0, #8]
     35c:	6800      	ldr	r0, [r0, #0]
     35e:	f001 fc95 	bl	1c8c <analogRead>
     362:	3502      	adds	r5, #2
	sampleBeingUpdated++;
     364:	68a3      	ldr	r3, [r4, #8]
	readings[sampleBeingUpdated] = analogRead(inputPin);
     366:	00ad      	lsls	r5, r5, #2
	if(sampleBeingUpdated >= sampleCount) sampleBeingUpdated = 0;
     368:	6862      	ldr	r2, [r4, #4]
	readings[sampleBeingUpdated] = analogRead(inputPin);
     36a:	1965      	adds	r5, r4, r5
	sampleBeingUpdated++;
     36c:	3301      	adds	r3, #1
	readings[sampleBeingUpdated] = analogRead(inputPin);
     36e:	6068      	str	r0, [r5, #4]
	sampleBeingUpdated++;
     370:	60a3      	str	r3, [r4, #8]
	if(sampleBeingUpdated >= sampleCount) sampleBeingUpdated = 0;
     372:	4293      	cmp	r3, r2
     374:	db01      	blt.n	37a <_ZN4IRIn10addReadingEv+0x24>
     376:	2300      	movs	r3, #0
     378:	60a3      	str	r3, [r4, #8]
}
     37a:	bd70      	pop	{r4, r5, r6, pc}

0000037c <_ZN4IRIn10getAverageEv>:

int IRIn::getAverage()
{
	readingsSum = 0;
     37c:	22ce      	movs	r2, #206	; 0xce
     37e:	2300      	movs	r3, #0
{
     380:	b570      	push	{r4, r5, r6, lr}
     382:	0004      	movs	r4, r0
	readingsSum = 0;
     384:	0052      	lsls	r2, r2, #1
	for (int i = 0; i < sampleCount; i++)
     386:	6841      	ldr	r1, [r0, #4]
	readingsSum = 0;
     388:	5083      	str	r3, [r0, r2]
	for (int i = 0; i < sampleCount; i++)
     38a:	428b      	cmp	r3, r1
     38c:	da07      	bge.n	39e <_ZN4IRIn10getAverageEv+0x22>
	{
		readingsSum += readings[i];
     38e:	0098      	lsls	r0, r3, #2
     390:	1820      	adds	r0, r4, r0
     392:	68c0      	ldr	r0, [r0, #12]
     394:	58a5      	ldr	r5, [r4, r2]
	for (int i = 0; i < sampleCount; i++)
     396:	3301      	adds	r3, #1
		readingsSum += readings[i];
     398:	1940      	adds	r0, r0, r5
     39a:	50a0      	str	r0, [r4, r2]
	for (int i = 0; i < sampleCount; i++)
     39c:	e7f5      	b.n	38a <_ZN4IRIn10getAverageEv+0xe>
	}
	readingsAvg = readingsSum/sampleCount;
     39e:	58a0      	ldr	r0, [r4, r2]
     3a0:	f002 fb98 	bl	2ad4 <__divsi3>
     3a4:	23d0      	movs	r3, #208	; 0xd0
     3a6:	005b      	lsls	r3, r3, #1
     3a8:	50e0      	str	r0, [r4, r3]
	
	return readingsAvg;
}
     3aa:	bd70      	pop	{r4, r5, r6, pc}

000003ac <_ZN7PCB_LEDC1Ei>:

#include <Arduino.h>
#include "PCB_LED.h"

// default constructor
PCB_LED::PCB_LED(int _ctrlPin)
     3ac:	b570      	push	{r4, r5, r6, lr}
     3ae:	2300      	movs	r3, #0
     3b0:	2601      	movs	r6, #1
     3b2:	2280      	movs	r2, #128	; 0x80
     3b4:	000d      	movs	r5, r1
     3b6:	0004      	movs	r4, r0
     3b8:	7406      	strb	r6, [r0, #16]
     3ba:	6143      	str	r3, [r0, #20]
     3bc:	6183      	str	r3, [r0, #24]
     3be:	61c3      	str	r3, [r0, #28]
     3c0:	0052      	lsls	r2, r2, #1
     3c2:	4905      	ldr	r1, [pc, #20]	; (3d8 <_ZN7PCB_LEDC1Ei+0x2c>)
     3c4:	3020      	adds	r0, #32
     3c6:	f003 fa83 	bl	38d0 <memcpy>
{
	controlPin = _ctrlPin;
	pinMode(controlPin, OUTPUT);
     3ca:	0028      	movs	r0, r5
	controlPin = _ctrlPin;
     3cc:	6025      	str	r5, [r4, #0]
	pinMode(controlPin, OUTPUT);
     3ce:	0031      	movs	r1, r6
     3d0:	f001 fdae 	bl	1f30 <pinMode>
} //PCB_LED
     3d4:	0020      	movs	r0, r4
     3d6:	bd70      	pop	{r4, r5, r6, pc}
     3d8:	00003a1c 	.word	0x00003a1c

000003dc <_ZN7PCB_LED16heartBeatDigitalEif>:


void PCB_LED::heartBeatDigital(int _period, float _dutyCycle)
//:int lowPeriod = static_cast< int >(static_cast< float >((_period)*_dutyCycle)),
//int highPeriod = static_cast< int >(static_cast< float >((_period)*(1.0f-_dutyCycle)),
{
     3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(heartBeatDigitalState == 0){
     3de:	6883      	ldr	r3, [r0, #8]
{
     3e0:	0004      	movs	r4, r0
     3e2:	000d      	movs	r5, r1
     3e4:	1c16      	adds	r6, r2, #0
	if(heartBeatDigitalState == 0){
     3e6:	2b00      	cmp	r3, #0
     3e8:	d108      	bne.n	3fc <_ZN7PCB_LED16heartBeatDigitalEif+0x20>
		heartBeatDigitalState++;
     3ea:	2701      	movs	r7, #1
     3ec:	6087      	str	r7, [r0, #8]
		heartBeatDigitalStart = millis();
     3ee:	f000 faad 	bl	94c <millis>
		//digitalWrite(controlPin, HIGH);
		digitalWrite(controlPin,HIGH);
     3f2:	0039      	movs	r1, r7
		heartBeatDigitalStart = millis();
     3f4:	60e0      	str	r0, [r4, #12]
		digitalWrite(controlPin,HIGH);
     3f6:	6820      	ldr	r0, [r4, #0]
     3f8:	f001 fde6 	bl	1fc8 <digitalWrite>
	}

	if(heartBeatDigitalState == 1 &&  millis() - heartBeatDigitalStart > static_cast< float >((_period)*_dutyCycle))
     3fc:	68a3      	ldr	r3, [r4, #8]
     3fe:	2b01      	cmp	r3, #1
     400:	d112      	bne.n	428 <_ZN7PCB_LED16heartBeatDigitalEif+0x4c>
     402:	f000 faa3 	bl	94c <millis>
     406:	68e3      	ldr	r3, [r4, #12]
     408:	1ac0      	subs	r0, r0, r3
     40a:	f003 f9cf 	bl	37ac <__aeabi_ui2f>
     40e:	1c07      	adds	r7, r0, #0
     410:	0028      	movs	r0, r5
     412:	f003 f97b 	bl	370c <__aeabi_i2f>
     416:	1c31      	adds	r1, r6, #0
     418:	f002 febc 	bl	3194 <__aeabi_fmul>
     41c:	1c01      	adds	r1, r0, #0
     41e:	1c38      	adds	r0, r7, #0
     420:	f002 fc6a 	bl	2cf8 <__aeabi_fcmpgt>
     424:	2800      	cmp	r0, #0
     426:	d11d      	bne.n	464 <_ZN7PCB_LED16heartBeatDigitalEif+0x88>
		heartBeatDigitalStart = millis();
		heartBeatDigitalState++;
		//digitalWrite(controlPin, LOW);
		digitalWrite(controlPin,LOW);
	}
	if(heartBeatDigitalState == 2 && millis() - heartBeatDigitalStart > static_cast< float >((_period)*(1.0f-_dutyCycle)))
     428:	68a3      	ldr	r3, [r4, #8]
     42a:	2b02      	cmp	r3, #2
     42c:	d119      	bne.n	462 <_ZN7PCB_LED16heartBeatDigitalEif+0x86>
     42e:	f000 fa8d 	bl	94c <millis>
     432:	68e3      	ldr	r3, [r4, #12]
     434:	1ac0      	subs	r0, r0, r3
     436:	f003 f9b9 	bl	37ac <__aeabi_ui2f>
     43a:	1c07      	adds	r7, r0, #0
     43c:	0028      	movs	r0, r5
     43e:	f003 f965 	bl	370c <__aeabi_i2f>
     442:	1c05      	adds	r5, r0, #0
     444:	20fe      	movs	r0, #254	; 0xfe
     446:	1c31      	adds	r1, r6, #0
     448:	0580      	lsls	r0, r0, #22
     44a:	f002 ffc3 	bl	33d4 <__aeabi_fsub>
     44e:	1c01      	adds	r1, r0, #0
     450:	1c28      	adds	r0, r5, #0
     452:	f002 fe9f 	bl	3194 <__aeabi_fmul>
     456:	1c01      	adds	r1, r0, #0
     458:	1c38      	adds	r0, r7, #0
     45a:	f002 fc4d 	bl	2cf8 <__aeabi_fcmpgt>
     45e:	2800      	cmp	r0, #0
     460:	d10b      	bne.n	47a <_ZN7PCB_LED16heartBeatDigitalEif+0x9e>
	{
		heartBeatDigitalState = 0;
	}
	
}
     462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		heartBeatDigitalStart = millis();
     464:	f000 fa72 	bl	94c <millis>
		heartBeatDigitalState++;
     468:	68a3      	ldr	r3, [r4, #8]
		heartBeatDigitalStart = millis();
     46a:	60e0      	str	r0, [r4, #12]
		heartBeatDigitalState++;
     46c:	3301      	adds	r3, #1
     46e:	60a3      	str	r3, [r4, #8]
		digitalWrite(controlPin,LOW);
     470:	2100      	movs	r1, #0
     472:	6820      	ldr	r0, [r4, #0]
     474:	f001 fda8 	bl	1fc8 <digitalWrite>
     478:	e7d6      	b.n	428 <_ZN7PCB_LED16heartBeatDigitalEif+0x4c>
		heartBeatDigitalState = 0;
     47a:	2300      	movs	r3, #0
     47c:	60a3      	str	r3, [r4, #8]
     47e:	e7f0      	b.n	462 <_ZN7PCB_LED16heartBeatDigitalEif+0x86>

00000480 <_ZN7PCB_LED15heartBeatAnalogEiiii>:



void PCB_LED::heartBeatAnalog(int _minVal, int _maxVal, int _frameTime, int _waitTime){
     480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     482:	001d      	movs	r5, r3
	int frameTime = _frameTime;
	int waitTime = _waitTime;
	
	
	// heartBeat started, goes up
	if(heartBeatAnalogState == 0){
     484:	6943      	ldr	r3, [r0, #20]
void PCB_LED::heartBeatAnalog(int _minVal, int _maxVal, int _frameTime, int _waitTime){
     486:	0004      	movs	r4, r0
     488:	000f      	movs	r7, r1
     48a:	0016      	movs	r6, r2
	if(heartBeatAnalogState == 0){
     48c:	2b00      	cmp	r3, #0
     48e:	d108      	bne.n	4a2 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x22>
		if(millis() - heartBeatAnalogStart > frameTime || heartBeatBegin){
     490:	f000 fa5c 	bl	94c <millis>
     494:	69a3      	ldr	r3, [r4, #24]
     496:	1ac0      	subs	r0, r0, r3
     498:	42a8      	cmp	r0, r5
     49a:	d832      	bhi.n	502 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x82>
     49c:	7c23      	ldrb	r3, [r4, #16]
     49e:	2b00      	cmp	r3, #0
     4a0:	d12f      	bne.n	502 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x82>
		}
	}
	
	
	// reached peak, stop, wait
	if(heartBeatAnalogState == 1 && millis() - heartBeatAnalogStart > waitTime)
     4a2:	6963      	ldr	r3, [r4, #20]
     4a4:	2b01      	cmp	r3, #1
     4a6:	d106      	bne.n	4b6 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x36>
     4a8:	f000 fa50 	bl	94c <millis>
     4ac:	69a3      	ldr	r3, [r4, #24]
     4ae:	1ac0      	subs	r0, r0, r3
     4b0:	9b06      	ldr	r3, [sp, #24]
     4b2:	4298      	cmp	r0, r3
     4b4:	d83a      	bhi.n	52c <_ZN7PCB_LED15heartBeatAnalogEiiii+0xac>
		heartBeatAnalogStart = millis();
		heartBeatAnalogState++;
	}
	
	// heartBeat goes down
	if(heartBeatAnalogState == 2)
     4b6:	6963      	ldr	r3, [r4, #20]
     4b8:	2b02      	cmp	r3, #2
     4ba:	d117      	bne.n	4ec <_ZN7PCB_LED15heartBeatAnalogEiiii+0x6c>
	{
		if(millis() - heartBeatAnalogStart > frameTime)
     4bc:	f000 fa46 	bl	94c <millis>
     4c0:	69a3      	ldr	r3, [r4, #24]
     4c2:	1ac0      	subs	r0, r0, r3
     4c4:	42a8      	cmp	r0, r5
     4c6:	d90b      	bls.n	4e0 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x60>
		{
			heartBeatAnalogStart = millis();
     4c8:	f000 fa40 	bl	94c <millis>
			heartBeatVal--;
     4cc:	69e3      	ldr	r3, [r4, #28]
			heartBeatAnalogStart = millis();
     4ce:	61a0      	str	r0, [r4, #24]
			heartBeatVal--;
     4d0:	3b01      	subs	r3, #1
     4d2:	61e3      	str	r3, [r4, #28]
			analogWrite(controlPin, gamma8[heartBeatVal]);
     4d4:	18e3      	adds	r3, r4, r3
     4d6:	3301      	adds	r3, #1
     4d8:	7fd9      	ldrb	r1, [r3, #31]
     4da:	6820      	ldr	r0, [r4, #0]
     4dc:	f001 fc3c 	bl	1d58 <analogWrite>
		}
		if(heartBeatVal == minVal) heartBeatAnalogState++;
     4e0:	69e3      	ldr	r3, [r4, #28]
     4e2:	429f      	cmp	r7, r3
     4e4:	d102      	bne.n	4ec <_ZN7PCB_LED15heartBeatAnalogEiiii+0x6c>
     4e6:	6963      	ldr	r3, [r4, #20]
     4e8:	3301      	adds	r3, #1
     4ea:	6163      	str	r3, [r4, #20]
	}
	
	//reached bottom, stop, wait
	if(heartBeatAnalogState == 3 && millis() - heartBeatAnalogStart > waitTime)
     4ec:	6963      	ldr	r3, [r4, #20]
     4ee:	2b03      	cmp	r3, #3
     4f0:	d106      	bne.n	500 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x80>
     4f2:	f000 fa2b 	bl	94c <millis>
     4f6:	69a3      	ldr	r3, [r4, #24]
     4f8:	1ac0      	subs	r0, r0, r3
     4fa:	9b06      	ldr	r3, [sp, #24]
     4fc:	4298      	cmp	r0, r3
     4fe:	d81c      	bhi.n	53a <_ZN7PCB_LED15heartBeatAnalogEiiii+0xba>
	{
		heartBeatBegin = true;
		heartBeatAnalogState = 0;
	}
}
     500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			heartBeatBegin = false;
     502:	2300      	movs	r3, #0
     504:	7423      	strb	r3, [r4, #16]
			heartBeatAnalogStart = millis();
     506:	f000 fa21 	bl	94c <millis>
			heartBeatVal++;
     50a:	69e3      	ldr	r3, [r4, #28]
			heartBeatAnalogStart = millis();
     50c:	61a0      	str	r0, [r4, #24]
			heartBeatVal++;
     50e:	3301      	adds	r3, #1
     510:	61e3      	str	r3, [r4, #28]
			analogWrite(controlPin, gamma8[heartBeatVal]);
     512:	18e3      	adds	r3, r4, r3
     514:	3301      	adds	r3, #1
     516:	7fd9      	ldrb	r1, [r3, #31]
     518:	6820      	ldr	r0, [r4, #0]
     51a:	f001 fc1d 	bl	1d58 <analogWrite>
			if(heartBeatVal == maxVal)	heartBeatAnalogState++;
     51e:	69e3      	ldr	r3, [r4, #28]
     520:	429e      	cmp	r6, r3
     522:	d1be      	bne.n	4a2 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x22>
     524:	6963      	ldr	r3, [r4, #20]
     526:	3301      	adds	r3, #1
     528:	6163      	str	r3, [r4, #20]
     52a:	e7ba      	b.n	4a2 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x22>
		heartBeatAnalogStart = millis();
     52c:	f000 fa0e 	bl	94c <millis>
		heartBeatAnalogState++;
     530:	6963      	ldr	r3, [r4, #20]
		heartBeatAnalogStart = millis();
     532:	61a0      	str	r0, [r4, #24]
		heartBeatAnalogState++;
     534:	3301      	adds	r3, #1
     536:	6163      	str	r3, [r4, #20]
     538:	e7bd      	b.n	4b6 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x36>
		heartBeatBegin = true;
     53a:	2301      	movs	r3, #1
     53c:	7423      	strb	r3, [r4, #16]
		heartBeatAnalogState = 0;
     53e:	2300      	movs	r3, #0
     540:	6163      	str	r3, [r4, #20]
     542:	e7dd      	b.n	500 <_ZN7PCB_LED15heartBeatAnalogEiiii+0x80>

00000544 <_Z12detectStatesv>:
unsigned long state1Millis;

bool holdStarted = false;


void detectStates(){
     544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	volatile int dist2log = dist2.getAverage();
     546:	4d2f      	ldr	r5, [pc, #188]	; (604 <_Z12detectStatesv+0xc0>)
	volatile int dist1log = dist1.getAverage();
	//nothing detected
	if(dist1.getAverage() < DIST1_THRES && dist2.getAverage() < DIST2_THRES)
     548:	2490      	movs	r4, #144	; 0x90
	volatile int dist2log = dist2.getAverage();
     54a:	0028      	movs	r0, r5
     54c:	f7ff ff16 	bl	37c <_ZN4IRIn10getAverageEv>
	volatile int dist1log = dist1.getAverage();
     550:	4e2d      	ldr	r6, [pc, #180]	; (608 <_Z12detectStatesv+0xc4>)
	volatile int dist2log = dist2.getAverage();
     552:	9000      	str	r0, [sp, #0]
	volatile int dist1log = dist1.getAverage();
     554:	0030      	movs	r0, r6
     556:	f7ff ff11 	bl	37c <_ZN4IRIn10getAverageEv>
     55a:	9001      	str	r0, [sp, #4]
	if(dist1.getAverage() < DIST1_THRES && dist2.getAverage() < DIST2_THRES)
     55c:	0030      	movs	r0, r6
     55e:	f7ff ff0d 	bl	37c <_ZN4IRIn10getAverageEv>
     562:	34ff      	adds	r4, #255	; 0xff
     564:	42a0      	cmp	r0, r4
     566:	dc04      	bgt.n	572 <_Z12detectStatesv+0x2e>
     568:	0028      	movs	r0, r5
     56a:	f7ff ff07 	bl	37c <_ZN4IRIn10getAverageEv>
     56e:	42a0      	cmp	r0, r4
     570:	dd26      	ble.n	5c0 <_Z12detectStatesv+0x7c>
			}
		}
	}
	else
	{
		state0Waiting = false;
     572:	2300      	movs	r3, #0
     574:	4a25      	ldr	r2, [pc, #148]	; (60c <_Z12detectStatesv+0xc8>)
     576:	7013      	strb	r3, [r2, #0]
		holdStarted = false;
     578:	4a25      	ldr	r2, [pc, #148]	; (610 <_Z12detectStatesv+0xcc>)
     57a:	e02b      	b.n	5d4 <_Z12detectStatesv+0x90>
		else if(millis() - state0Millis > STATE0_DEBOUNCE_LENGTH){
     57c:	f000 f9e6 	bl	94c <millis>
     580:	683b      	ldr	r3, [r7, #0]
     582:	1ac0      	subs	r0, r0, r3
     584:	23fa      	movs	r3, #250	; 0xfa
     586:	00db      	lsls	r3, r3, #3
     588:	4298      	cmp	r0, r3
     58a:	d924      	bls.n	5d6 <_Z12detectStatesv+0x92>
			state = 0;
     58c:	2200      	movs	r2, #0
     58e:	4b21      	ldr	r3, [pc, #132]	; (614 <_Z12detectStatesv+0xd0>)
     590:	601a      	str	r2, [r3, #0]
			if(!holdStarted){
     592:	4b1f      	ldr	r3, [pc, #124]	; (610 <_Z12detectStatesv+0xcc>)
     594:	781b      	ldrb	r3, [r3, #0]
     596:	4293      	cmp	r3, r2
     598:	d11d      	bne.n	5d6 <_Z12detectStatesv+0x92>
				fan1inf = true;
     59a:	2301      	movs	r3, #1
     59c:	4a1e      	ldr	r2, [pc, #120]	; (618 <_Z12detectStatesv+0xd4>)
     59e:	7013      	strb	r3, [r2, #0]
				fan2inf = true;
     5a0:	4a1e      	ldr	r2, [pc, #120]	; (61c <_Z12detectStatesv+0xd8>)
     5a2:	7013      	strb	r3, [r2, #0]
				fan3inf = true;
     5a4:	4a1e      	ldr	r2, [pc, #120]	; (620 <_Z12detectStatesv+0xdc>)
     5a6:	e015      	b.n	5d4 <_Z12detectStatesv+0x90>
		if (!state1Waiting)
		{
			state1Millis = millis();
			state1Waiting = true;
		}
		else if(millis() - state1Millis > STATE1_DEBOUNCE_LENGTH) state = 1;
     5a8:	f000 f9d0 	bl	94c <millis>
     5ac:	6823      	ldr	r3, [r4, #0]
     5ae:	1ac0      	subs	r0, r0, r3
     5b0:	23fa      	movs	r3, #250	; 0xfa
     5b2:	00db      	lsls	r3, r3, #3
     5b4:	4298      	cmp	r0, r3
     5b6:	d902      	bls.n	5be <_Z12detectStatesv+0x7a>
     5b8:	2201      	movs	r2, #1
     5ba:	4b16      	ldr	r3, [pc, #88]	; (614 <_Z12detectStatesv+0xd0>)
     5bc:	601a      	str	r2, [r3, #0]
	else
	{
		state1Waiting = false;
	} // end of something detected
	
}
     5be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (!state0Waiting)
     5c0:	4b12      	ldr	r3, [pc, #72]	; (60c <_Z12detectStatesv+0xc8>)
     5c2:	4f18      	ldr	r7, [pc, #96]	; (624 <_Z12detectStatesv+0xe0>)
     5c4:	781b      	ldrb	r3, [r3, #0]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d1d8      	bne.n	57c <_Z12detectStatesv+0x38>
			state0Millis = millis();
     5ca:	f000 f9bf 	bl	94c <millis>
			state0Waiting = true;
     5ce:	2301      	movs	r3, #1
     5d0:	4a0e      	ldr	r2, [pc, #56]	; (60c <_Z12detectStatesv+0xc8>)
			state0Millis = millis();
     5d2:	6038      	str	r0, [r7, #0]
				fan3inf = true;
     5d4:	7013      	strb	r3, [r2, #0]
	if(dist1.getAverage() >= DIST1_THRES || dist2.getAverage() >= DIST2_THRES){
     5d6:	0030      	movs	r0, r6
     5d8:	f7ff fed0 	bl	37c <_ZN4IRIn10getAverageEv>
     5dc:	4e12      	ldr	r6, [pc, #72]	; (628 <_Z12detectStatesv+0xe4>)
     5de:	42a0      	cmp	r0, r4
     5e0:	dc06      	bgt.n	5f0 <_Z12detectStatesv+0xac>
     5e2:	0028      	movs	r0, r5
     5e4:	f7ff feca 	bl	37c <_ZN4IRIn10getAverageEv>
     5e8:	42a0      	cmp	r0, r4
     5ea:	dc01      	bgt.n	5f0 <_Z12detectStatesv+0xac>
		state1Waiting = false;
     5ec:	2300      	movs	r3, #0
     5ee:	e007      	b.n	600 <_Z12detectStatesv+0xbc>
		if (!state1Waiting)
     5f0:	7833      	ldrb	r3, [r6, #0]
     5f2:	4c0e      	ldr	r4, [pc, #56]	; (62c <_Z12detectStatesv+0xe8>)
     5f4:	2b00      	cmp	r3, #0
     5f6:	d1d7      	bne.n	5a8 <_Z12detectStatesv+0x64>
			state1Millis = millis();
     5f8:	f000 f9a8 	bl	94c <millis>
			state1Waiting = true;
     5fc:	2301      	movs	r3, #1
			state1Millis = millis();
     5fe:	6020      	str	r0, [r4, #0]
		state1Waiting = false;
     600:	7033      	strb	r3, [r6, #0]
     602:	e7dc      	b.n	5be <_Z12detectStatesv+0x7a>
     604:	20000300 	.word	0x20000300
     608:	2000014c 	.word	0x2000014c
     60c:	2000073c 	.word	0x2000073c
     610:	20000730 	.word	0x20000730
     614:	20000734 	.word	0x20000734
     618:	20000000 	.word	0x20000000
     61c:	20000001 	.word	0x20000001
     620:	20000002 	.word	0x20000002
     624:	20000738 	.word	0x20000738
     628:	20000744 	.word	0x20000744
     62c:	20000740 	.word	0x20000740

00000630 <_Z12switchStatesv>:


void switchStates(){
     630:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (state)
     632:	4b34      	ldr	r3, [pc, #208]	; (704 <_Z12switchStatesv+0xd4>)
void switchStates(){
     634:	b087      	sub	sp, #28
	switch (state)
     636:	681b      	ldr	r3, [r3, #0]
     638:	2b00      	cmp	r3, #0
     63a:	d003      	beq.n	644 <_Z12switchStatesv+0x14>
     63c:	2b01      	cmp	r3, #1
     63e:	d035      	beq.n	6ac <_Z12switchStatesv+0x7c>
		case 2:
		break;
		case 3:
		break;
	} // switch
}
     640:	b007      	add	sp, #28
     642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		holdStarted = true;
     644:	2101      	movs	r1, #1
     646:	4a30      	ldr	r2, [pc, #192]	; (708 <_Z12switchStatesv+0xd8>)
		if(fan1inf || fan3inf || fan2inf){
     648:	4e30      	ldr	r6, [pc, #192]	; (70c <_Z12switchStatesv+0xdc>)
		holdStarted = true;
     64a:	7011      	strb	r1, [r2, #0]
		if(fan1inf || fan3inf || fan2inf){
     64c:	7832      	ldrb	r2, [r6, #0]
     64e:	4c30      	ldr	r4, [pc, #192]	; (710 <_Z12switchStatesv+0xe0>)
     650:	4d30      	ldr	r5, [pc, #192]	; (714 <_Z12switchStatesv+0xe4>)
     652:	2a00      	cmp	r2, #0
     654:	d120      	bne.n	698 <_Z12switchStatesv+0x68>
     656:	7823      	ldrb	r3, [r4, #0]
     658:	2b00      	cmp	r3, #0
     65a:	d102      	bne.n	662 <_Z12switchStatesv+0x32>
     65c:	782b      	ldrb	r3, [r5, #0]
     65e:	2b00      	cmp	r3, #0
     660:	d0ee      	beq.n	640 <_Z12switchStatesv+0x10>
			if(fan2inf) fan2inf = fan2.inflateAndHold(FAN2_INFHOLD_PERIOD, FAN2_INFHOLD_INFLATEVAL,FAN2_INFHOLD_HOLDVAL, FAN2_INFHOLD_DELAY);
     662:	782b      	ldrb	r3, [r5, #0]
     664:	2b00      	cmp	r3, #0
     666:	d009      	beq.n	67c <_Z12switchStatesv+0x4c>
     668:	231e      	movs	r3, #30
     66a:	21fa      	movs	r1, #250	; 0xfa
     66c:	9300      	str	r3, [sp, #0]
     66e:	22ff      	movs	r2, #255	; 0xff
     670:	3b14      	subs	r3, #20
     672:	00c9      	lsls	r1, r1, #3
     674:	4828      	ldr	r0, [pc, #160]	; (718 <_Z12switchStatesv+0xe8>)
     676:	f7ff fd59 	bl	12c <_ZN10FanChannel14inflateAndHoldEiiii>
     67a:	7028      	strb	r0, [r5, #0]
			if(fan3inf) fan3inf = fan3.inflateAndHold(FAN3_INFHOLD_PERIOD, FAN3_INFHOLD_INFLATEVAL,FAN3_INFHOLD_HOLDVAL, FAN3_INFHOLD_DELAY);
     67c:	7823      	ldrb	r3, [r4, #0]
     67e:	2b00      	cmp	r3, #0
     680:	d0de      	beq.n	640 <_Z12switchStatesv+0x10>
     682:	233c      	movs	r3, #60	; 0x3c
     684:	21fa      	movs	r1, #250	; 0xfa
     686:	9300      	str	r3, [sp, #0]
     688:	22ff      	movs	r2, #255	; 0xff
     68a:	3b32      	subs	r3, #50	; 0x32
     68c:	00c9      	lsls	r1, r1, #3
     68e:	4823      	ldr	r0, [pc, #140]	; (71c <_Z12switchStatesv+0xec>)
     690:	f7ff fd4c 	bl	12c <_ZN10FanChannel14inflateAndHoldEiiii>
     694:	7020      	strb	r0, [r4, #0]
     696:	e7d3      	b.n	640 <_Z12switchStatesv+0x10>
			if(fan1inf) fan1inf = fan1.inflateAndHold(FAN1_INFHOLD_PERIOD, FAN1_INFHOLD_INFLATEVAL,FAN1_INFHOLD_HOLDVAL, FAN1_INFHOLD_DELAY);
     698:	21fa      	movs	r1, #250	; 0xfa
     69a:	9300      	str	r3, [sp, #0]
     69c:	22ff      	movs	r2, #255	; 0xff
     69e:	230a      	movs	r3, #10
     6a0:	00c9      	lsls	r1, r1, #3
     6a2:	481f      	ldr	r0, [pc, #124]	; (720 <_Z12switchStatesv+0xf0>)
     6a4:	f7ff fd42 	bl	12c <_ZN10FanChannel14inflateAndHoldEiiii>
     6a8:	7030      	strb	r0, [r6, #0]
     6aa:	e7da      	b.n	662 <_Z12switchStatesv+0x32>
		FAN1_BREATHE_DELAY);
     6ac:	2500      	movs	r5, #0
     6ae:	2664      	movs	r6, #100	; 0x64
     6b0:	4c1c      	ldr	r4, [pc, #112]	; (724 <_Z12switchStatesv+0xf4>)
     6b2:	4f1d      	ldr	r7, [pc, #116]	; (728 <_Z12switchStatesv+0xf8>)
     6b4:	9505      	str	r5, [sp, #20]
     6b6:	9404      	str	r4, [sp, #16]
     6b8:	9403      	str	r4, [sp, #12]
     6ba:	9702      	str	r7, [sp, #8]
     6bc:	9601      	str	r6, [sp, #4]
     6be:	9500      	str	r5, [sp, #0]
     6c0:	23c8      	movs	r3, #200	; 0xc8
     6c2:	22ff      	movs	r2, #255	; 0xff
     6c4:	4919      	ldr	r1, [pc, #100]	; (72c <_Z12switchStatesv+0xfc>)
     6c6:	4816      	ldr	r0, [pc, #88]	; (720 <_Z12switchStatesv+0xf0>)
     6c8:	f7ff fd6e 	bl	1a8 <_ZN10FanChannel7breatheEiiiiifffi>
		FAN2_BREATHE_DELAY);
     6cc:	231e      	movs	r3, #30
     6ce:	9404      	str	r4, [sp, #16]
     6d0:	9305      	str	r3, [sp, #20]
     6d2:	9403      	str	r4, [sp, #12]
     6d4:	9702      	str	r7, [sp, #8]
     6d6:	9601      	str	r6, [sp, #4]
     6d8:	9500      	str	r5, [sp, #0]
     6da:	33aa      	adds	r3, #170	; 0xaa
     6dc:	22ff      	movs	r2, #255	; 0xff
     6de:	4913      	ldr	r1, [pc, #76]	; (72c <_Z12switchStatesv+0xfc>)
     6e0:	480d      	ldr	r0, [pc, #52]	; (718 <_Z12switchStatesv+0xe8>)
     6e2:	f7ff fd61 	bl	1a8 <_ZN10FanChannel7breatheEiiiiifffi>
		FAN3_BREATHE_DELAY);
     6e6:	233c      	movs	r3, #60	; 0x3c
     6e8:	9404      	str	r4, [sp, #16]
     6ea:	9305      	str	r3, [sp, #20]
     6ec:	9403      	str	r4, [sp, #12]
     6ee:	9702      	str	r7, [sp, #8]
     6f0:	9601      	str	r6, [sp, #4]
     6f2:	9500      	str	r5, [sp, #0]
     6f4:	338c      	adds	r3, #140	; 0x8c
     6f6:	22ff      	movs	r2, #255	; 0xff
     6f8:	490c      	ldr	r1, [pc, #48]	; (72c <_Z12switchStatesv+0xfc>)
     6fa:	4808      	ldr	r0, [pc, #32]	; (71c <_Z12switchStatesv+0xec>)
     6fc:	f7ff fd54 	bl	1a8 <_ZN10FanChannel7breatheEiiiiifffi>
}
     700:	e79e      	b.n	640 <_Z12switchStatesv+0x10>
     702:	46c0      	nop			; (mov r8, r8)
     704:	20000734 	.word	0x20000734
     708:	20000730 	.word	0x20000730
     70c:	20000000 	.word	0x20000000
     710:	20000002 	.word	0x20000002
     714:	20000001 	.word	0x20000001
     718:	200004c8 	.word	0x200004c8
     71c:	200004dc 	.word	0x200004dc
     720:	200004b4 	.word	0x200004b4
     724:	3e99999a 	.word	0x3e99999a
     728:	3e4ccccd 	.word	0x3e4ccccd
     72c:	00001388 	.word	0x00001388

00000730 <setup>:



void setup()
{
     730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	//pinMode(LED1, OUTPUT); pin is initialized in PCB_LED fbLED1
	pinMode(PIN_LED_RXL,OUTPUT);
     732:	2101      	movs	r1, #1
     734:	2019      	movs	r0, #25
     736:	f001 fbfb 	bl	1f30 <pinMode>
	digitalWrite(PIN_LED_RXL,LOW);
     73a:	2100      	movs	r1, #0
     73c:	2019      	movs	r0, #25
     73e:	f001 fc43 	bl	1fc8 <digitalWrite>
	
	pinMode(PIN_LED_TXL,OUTPUT);
     742:	2101      	movs	r1, #1
     744:	201a      	movs	r0, #26
     746:	f001 fbf3 	bl	1f30 <pinMode>
	digitalWrite(PIN_LED_TXL,LOW);
     74a:	2100      	movs	r1, #0
     74c:	201a      	movs	r0, #26
     74e:	f001 fc3b 	bl	1fc8 <digitalWrite>
	
	
	// set MUX to point to connectors instead of SMD pads
	pinMode(MUX_CONTROL,OUTPUT);
     752:	2101      	movs	r1, #1
     754:	2002      	movs	r0, #2
     756:	f001 fbeb 	bl	1f30 <pinMode>
	digitalWrite(MUX_CONTROL,MUX_CONTROL_DEFAULT);
     75a:	2100      	movs	r1, #0
     75c:	2002      	movs	r0, #2
     75e:	f001 fc33 	bl	1fc8 <digitalWrite>
     762:	2405      	movs	r4, #5


	// some blinking to signal boot
	for(int i = 0; i < 5; i ++){
		analogWrite(LED1, 255);
     764:	2608      	movs	r6, #8
		delay(100);
     766:	2564      	movs	r5, #100	; 0x64
		analogWrite(LED1, 255);
     768:	21ff      	movs	r1, #255	; 0xff
     76a:	0030      	movs	r0, r6
     76c:	f001 faf4 	bl	1d58 <analogWrite>
		delay(100);
     770:	0028      	movs	r0, r5
     772:	f000 f8f1 	bl	958 <delay>
		analogWrite(LED1, 0);
     776:	2100      	movs	r1, #0
     778:	0030      	movs	r0, r6
     77a:	f001 faed 	bl	1d58 <analogWrite>
     77e:	3c01      	subs	r4, #1
		delay(100);
     780:	0028      	movs	r0, r5
     782:	f000 f8e9 	bl	958 <delay>
	for(int i = 0; i < 5; i ++){
     786:	2c00      	cmp	r4, #0
     788:	d1ee      	bne.n	768 <setup+0x38>
	}
	
		if(fan1inf || fan3inf || fan2inf){
     78a:	4f18      	ldr	r7, [pc, #96]	; (7ec <setup+0xbc>)
     78c:	4d18      	ldr	r5, [pc, #96]	; (7f0 <setup+0xc0>)
     78e:	783b      	ldrb	r3, [r7, #0]
     790:	4e18      	ldr	r6, [pc, #96]	; (7f4 <setup+0xc4>)
     792:	2b00      	cmp	r3, #0
     794:	d106      	bne.n	7a4 <setup+0x74>
     796:	782b      	ldrb	r3, [r5, #0]
     798:	2b00      	cmp	r3, #0
     79a:	d10c      	bne.n	7b6 <setup+0x86>
     79c:	7833      	ldrb	r3, [r6, #0]
     79e:	2b00      	cmp	r3, #0
     7a0:	d109      	bne.n	7b6 <setup+0x86>
			if(fan1inf) fan1inf = fan1.inflateAndHold(FAN1_INFHOLD_PERIOD, FAN1_INFHOLD_INFLATEVAL,FAN1_INFHOLD_HOLDVAL, FAN1_INFHOLD_DELAY);
			if(fan2inf) fan2inf = fan2.inflateAndHold(FAN2_INFHOLD_PERIOD, FAN2_INFHOLD_INFLATEVAL,FAN2_INFHOLD_HOLDVAL, FAN2_INFHOLD_DELAY);
			if(fan3inf) fan3inf = fan3.inflateAndHold(FAN3_INFHOLD_PERIOD, FAN3_INFHOLD_INFLATEVAL,FAN3_INFHOLD_HOLDVAL, FAN3_INFHOLD_DELAY);
		}

}
     7a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			if(fan1inf) fan1inf = fan1.inflateAndHold(FAN1_INFHOLD_PERIOD, FAN1_INFHOLD_INFLATEVAL,FAN1_INFHOLD_HOLDVAL, FAN1_INFHOLD_DELAY);
     7a4:	21fa      	movs	r1, #250	; 0xfa
     7a6:	9400      	str	r4, [sp, #0]
     7a8:	230a      	movs	r3, #10
     7aa:	22ff      	movs	r2, #255	; 0xff
     7ac:	00c9      	lsls	r1, r1, #3
     7ae:	4812      	ldr	r0, [pc, #72]	; (7f8 <setup+0xc8>)
     7b0:	f7ff fcbc 	bl	12c <_ZN10FanChannel14inflateAndHoldEiiii>
     7b4:	7038      	strb	r0, [r7, #0]
			if(fan2inf) fan2inf = fan2.inflateAndHold(FAN2_INFHOLD_PERIOD, FAN2_INFHOLD_INFLATEVAL,FAN2_INFHOLD_HOLDVAL, FAN2_INFHOLD_DELAY);
     7b6:	7833      	ldrb	r3, [r6, #0]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d009      	beq.n	7d0 <setup+0xa0>
     7bc:	231e      	movs	r3, #30
     7be:	21fa      	movs	r1, #250	; 0xfa
     7c0:	9300      	str	r3, [sp, #0]
     7c2:	22ff      	movs	r2, #255	; 0xff
     7c4:	3b14      	subs	r3, #20
     7c6:	00c9      	lsls	r1, r1, #3
     7c8:	480c      	ldr	r0, [pc, #48]	; (7fc <setup+0xcc>)
     7ca:	f7ff fcaf 	bl	12c <_ZN10FanChannel14inflateAndHoldEiiii>
     7ce:	7030      	strb	r0, [r6, #0]
			if(fan3inf) fan3inf = fan3.inflateAndHold(FAN3_INFHOLD_PERIOD, FAN3_INFHOLD_INFLATEVAL,FAN3_INFHOLD_HOLDVAL, FAN3_INFHOLD_DELAY);
     7d0:	782b      	ldrb	r3, [r5, #0]
     7d2:	2b00      	cmp	r3, #0
     7d4:	d0e5      	beq.n	7a2 <setup+0x72>
     7d6:	233c      	movs	r3, #60	; 0x3c
     7d8:	21fa      	movs	r1, #250	; 0xfa
     7da:	9300      	str	r3, [sp, #0]
     7dc:	22ff      	movs	r2, #255	; 0xff
     7de:	3b32      	subs	r3, #50	; 0x32
     7e0:	00c9      	lsls	r1, r1, #3
     7e2:	4807      	ldr	r0, [pc, #28]	; (800 <setup+0xd0>)
     7e4:	f7ff fca2 	bl	12c <_ZN10FanChannel14inflateAndHoldEiiii>
     7e8:	7028      	strb	r0, [r5, #0]
}
     7ea:	e7da      	b.n	7a2 <setup+0x72>
     7ec:	20000000 	.word	0x20000000
     7f0:	20000002 	.word	0x20000002
     7f4:	20000001 	.word	0x20000001
     7f8:	200004b4 	.word	0x200004b4
     7fc:	200004c8 	.word	0x200004c8
     800:	200004dc 	.word	0x200004dc

00000804 <loop>:


void loop()
{
     804:	b573      	push	{r0, r1, r4, r5, r6, lr}
		detectStates();

		// does what was decided in detectStates()
		switchStates();
		
		if(state == 0) fbLED2.heartBeatDigital(500,0.5);
     806:	24fa      	movs	r4, #250	; 0xfa
     808:	0064      	lsls	r4, r4, #1
		fbLED1.heartBeatAnalog(30,255,1,100);
     80a:	2664      	movs	r6, #100	; 0x64
     80c:	2301      	movs	r3, #1
     80e:	22ff      	movs	r2, #255	; 0xff
     810:	211e      	movs	r1, #30
     812:	4810      	ldr	r0, [pc, #64]	; (854 <loop+0x50>)
     814:	9600      	str	r6, [sp, #0]
     816:	f7ff fe33 	bl	480 <_ZN7PCB_LED15heartBeatAnalogEiiii>
		dist1.addReading();
     81a:	480f      	ldr	r0, [pc, #60]	; (858 <loop+0x54>)
     81c:	f7ff fd9b 	bl	356 <_ZN4IRIn10addReadingEv>
		dist2.addReading();
     820:	480e      	ldr	r0, [pc, #56]	; (85c <loop+0x58>)
     822:	f7ff fd98 	bl	356 <_ZN4IRIn10addReadingEv>
		detectStates();
     826:	f7ff fe8d 	bl	544 <_Z12detectStatesv>
		switchStates();
     82a:	f7ff ff01 	bl	630 <_Z12switchStatesv>
		if(state == 0) fbLED2.heartBeatDigital(500,0.5);
     82e:	4d0c      	ldr	r5, [pc, #48]	; (860 <loop+0x5c>)
     830:	682b      	ldr	r3, [r5, #0]
     832:	2b00      	cmp	r3, #0
     834:	d105      	bne.n	842 <loop+0x3e>
     836:	22fc      	movs	r2, #252	; 0xfc
     838:	0021      	movs	r1, r4
     83a:	0592      	lsls	r2, r2, #22
     83c:	4809      	ldr	r0, [pc, #36]	; (864 <loop+0x60>)
     83e:	f7ff fdcd 	bl	3dc <_ZN7PCB_LED16heartBeatDigitalEif>
		if(state == 1) fbLED2.heartBeatDigital(500,0);
     842:	682b      	ldr	r3, [r5, #0]
     844:	2b01      	cmp	r3, #1
     846:	d1e1      	bne.n	80c <loop+0x8>
     848:	2200      	movs	r2, #0
     84a:	0021      	movs	r1, r4
     84c:	4805      	ldr	r0, [pc, #20]	; (864 <loop+0x60>)
     84e:	f7ff fdc5 	bl	3dc <_ZN7PCB_LED16heartBeatDigitalEif>
     852:	e7da      	b.n	80a <loop+0x6>
     854:	200004f0 	.word	0x200004f0
     858:	2000014c 	.word	0x2000014c
     85c:	20000300 	.word	0x20000300
     860:	20000734 	.word	0x20000734
     864:	20000610 	.word	0x20000610

00000868 <_GLOBAL__sub_I_fbLED1>:
	}	//  for(;;)
}	// loop()
     868:	b510      	push	{r4, lr}
PCB_LED fbLED1(LED1);
     86a:	2108      	movs	r1, #8
     86c:	480e      	ldr	r0, [pc, #56]	; (8a8 <_GLOBAL__sub_I_fbLED1+0x40>)
     86e:	f7ff fd9d 	bl	3ac <_ZN7PCB_LEDC1Ei>
PCB_LED fbLED2(PIN_LED_RXL);
     872:	2119      	movs	r1, #25
     874:	480d      	ldr	r0, [pc, #52]	; (8ac <_GLOBAL__sub_I_fbLED1+0x44>)
     876:	f7ff fd99 	bl	3ac <_ZN7PCB_LEDC1Ei>
IRIn dist1(IR_PIN1,10);
     87a:	220a      	movs	r2, #10
     87c:	2113      	movs	r1, #19
     87e:	480c      	ldr	r0, [pc, #48]	; (8b0 <_GLOBAL__sub_I_fbLED1+0x48>)
     880:	f7ff fd4e 	bl	320 <_ZN4IRInC1Eii>
IRIn dist2(IR_PIN2,10);
     884:	220a      	movs	r2, #10
     886:	210f      	movs	r1, #15
     888:	480a      	ldr	r0, [pc, #40]	; (8b4 <_GLOBAL__sub_I_fbLED1+0x4c>)
     88a:	f7ff fd49 	bl	320 <_ZN4IRInC1Eii>
FanChannel fan1(FAN_PIN1);
     88e:	2105      	movs	r1, #5
     890:	4809      	ldr	r0, [pc, #36]	; (8b8 <_GLOBAL__sub_I_fbLED1+0x50>)
     892:	f7ff fc3f 	bl	114 <_ZN10FanChannelC1Ei>
FanChannel fan2(FAN_PIN2);
     896:	210a      	movs	r1, #10
     898:	4808      	ldr	r0, [pc, #32]	; (8bc <_GLOBAL__sub_I_fbLED1+0x54>)
     89a:	f7ff fc3b 	bl	114 <_ZN10FanChannelC1Ei>
FanChannel fan3(FAN_PIN3);
     89e:	2106      	movs	r1, #6
     8a0:	4807      	ldr	r0, [pc, #28]	; (8c0 <_GLOBAL__sub_I_fbLED1+0x58>)
     8a2:	f7ff fc37 	bl	114 <_ZN10FanChannelC1Ei>
}	// loop()
     8a6:	bd10      	pop	{r4, pc}
     8a8:	200004f0 	.word	0x200004f0
     8ac:	20000610 	.word	0x20000610
     8b0:	2000014c 	.word	0x2000014c
     8b4:	20000300 	.word	0x20000300
     8b8:	200004b4 	.word	0x200004b4
     8bc:	200004c8 	.word	0x200004c8
     8c0:	200004dc 	.word	0x200004dc

000008c4 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     8c4:	be03      	bkpt	0x0003
     8c6:	e7fe      	b.n	8c6 <Dummy_Handler+0x2>

000008c8 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     8c8:	4b03      	ldr	r3, [pc, #12]	; (8d8 <USB_Handler+0x10>)
{
     8ca:	b510      	push	{r4, lr}
  if (usb_isr)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	d000      	beq.n	8d4 <USB_Handler+0xc>
    usb_isr();
     8d2:	4798      	blx	r3
}
     8d4:	bd10      	pop	{r4, pc}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	20000748 	.word	0x20000748

000008dc <Reset_Handler>:
{
     8dc:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8de:	490f      	ldr	r1, [pc, #60]	; (91c <Reset_Handler+0x40>)
     8e0:	4c0f      	ldr	r4, [pc, #60]	; (920 <Reset_Handler+0x44>)
     8e2:	42a1      	cmp	r1, r4
     8e4:	d104      	bne.n	8f0 <Reset_Handler+0x14>
  SystemInit();
     8e6:	f000 f8bd 	bl	a64 <SystemInit>
  main();
     8ea:	f000 f851 	bl	990 <main>
     8ee:	e7fe      	b.n	8ee <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8f0:	4d0c      	ldr	r5, [pc, #48]	; (924 <Reset_Handler+0x48>)
     8f2:	2300      	movs	r3, #0
     8f4:	428d      	cmp	r5, r1
     8f6:	d0f6      	beq.n	8e6 <Reset_Handler+0xa>
     8f8:	18ca      	adds	r2, r1, r3
     8fa:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     8fc:	42a2      	cmp	r2, r4
     8fe:	d305      	bcc.n	90c <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     900:	4290      	cmp	r0, r2
     902:	d0f0      	beq.n	8e6 <Reset_Handler+0xa>
     904:	4b08      	ldr	r3, [pc, #32]	; (928 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     906:	4909      	ldr	r1, [pc, #36]	; (92c <Reset_Handler+0x50>)
      *pDest = 0;
     908:	2200      	movs	r2, #0
     90a:	e004      	b.n	916 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     90c:	6800      	ldr	r0, [r0, #0]
     90e:	3304      	adds	r3, #4
     910:	6010      	str	r0, [r2, #0]
     912:	e7f1      	b.n	8f8 <Reset_Handler+0x1c>
      *pDest = 0;
     914:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     916:	428b      	cmp	r3, r1
     918:	d3fc      	bcc.n	914 <Reset_Handler+0x38>
     91a:	e7e4      	b.n	8e6 <Reset_Handler+0xa>
     91c:	20000000 	.word	0x20000000
     920:	20000130 	.word	0x20000130
     924:	0000402c 	.word	0x0000402c
     928:	20000130 	.word	0x20000130
     92c:	20000edc 	.word	0x20000edc

00000930 <SysTick_Handler>:
{
     930:	b510      	push	{r4, lr}
  if (sysTickHook())
     932:	f000 f82a 	bl	98a <sysTickHook>
     936:	2800      	cmp	r0, #0
     938:	d101      	bne.n	93e <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     93a:	f000 f81b 	bl	974 <SysTick_DefaultHandler>
}
     93e:	bd10      	pop	{r4, pc}

00000940 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     940:	4b01      	ldr	r3, [pc, #4]	; (948 <USB_SetHandler+0x8>)
     942:	6018      	str	r0, [r3, #0]
}
     944:	4770      	bx	lr
     946:	46c0      	nop			; (mov r8, r8)
     948:	20000748 	.word	0x20000748

0000094c <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     94c:	4b01      	ldr	r3, [pc, #4]	; (954 <millis+0x8>)
     94e:	6818      	ldr	r0, [r3, #0]
}
     950:	4770      	bx	lr
     952:	46c0      	nop			; (mov r8, r8)
     954:	2000074c 	.word	0x2000074c

00000958 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     958:	b570      	push	{r4, r5, r6, lr}
     95a:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     95c:	d007      	beq.n	96e <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     95e:	4d04      	ldr	r5, [pc, #16]	; (970 <delay+0x18>)
     960:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     962:	f000 f811 	bl	988 <yield>
  } while ( _ulTickCount - start < ms ) ;
     966:	682b      	ldr	r3, [r5, #0]
     968:	1b9b      	subs	r3, r3, r6
     96a:	429c      	cmp	r4, r3
     96c:	d8f9      	bhi.n	962 <delay+0xa>
}
     96e:	bd70      	pop	{r4, r5, r6, pc}
     970:	2000074c 	.word	0x2000074c

00000974 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     974:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     976:	4a03      	ldr	r2, [pc, #12]	; (984 <SysTick_DefaultHandler+0x10>)
     978:	6813      	ldr	r3, [r2, #0]
     97a:	3301      	adds	r3, #1
     97c:	6013      	str	r3, [r2, #0]
  tickReset();
     97e:	f000 f835 	bl	9ec <tickReset>
}
     982:	bd10      	pop	{r4, pc}
     984:	2000074c 	.word	0x2000074c

00000988 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     988:	4770      	bx	lr

0000098a <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     98a:	2000      	movs	r0, #0
     98c:	4770      	bx	lr

0000098e <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     98e:	4770      	bx	lr

00000990 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     990:	b510      	push	{r4, lr}
  init();
     992:	f001 f8c7 	bl	1b24 <init>

  __libc_init_array();
     996:	f002 ff6d 	bl	3874 <__libc_init_array>

  initVariant();
     99a:	f7ff fff8 	bl	98e <_Z11initVariantv>

  delay(1);
     99e:	2001      	movs	r0, #1
     9a0:	f7ff ffda 	bl	958 <delay>
#if defined(USBCON)
  USBDevice.init();
     9a4:	4c08      	ldr	r4, [pc, #32]	; (9c8 <main+0x38>)
     9a6:	0020      	movs	r0, r4
     9a8:	f000 fb4c 	bl	1044 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     9ac:	0020      	movs	r0, r4
     9ae:	f000 fbc1 	bl	1134 <_ZN14USBDeviceClass6attachEv>
#endif

  //setup();
     9b2:	f7ff febd 	bl	730 <setup>

  for (;;)
  {
    loop();
     9b6:	f7ff ff25 	bl	804 <loop>
    if (serialEventRun) serialEventRun();
     9ba:	4b04      	ldr	r3, [pc, #16]	; (9cc <main+0x3c>)
     9bc:	2b00      	cmp	r3, #0
     9be:	d0fa      	beq.n	9b6 <main+0x26>
     9c0:	e000      	b.n	9c4 <main+0x34>
     9c2:	bf00      	nop
     9c4:	e7f7      	b.n	9b6 <main+0x26>
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	20000750 	.word	0x20000750
     9cc:	00000000 	.word	0x00000000

000009d0 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     9d0:	4b01      	ldr	r3, [pc, #4]	; (9d8 <initiateReset+0x8>)
     9d2:	6018      	str	r0, [r3, #0]
}
     9d4:	4770      	bx	lr
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	20000004 	.word	0x20000004

000009dc <cancelReset>:

void cancelReset() {
	ticks = -1;
     9dc:	2201      	movs	r2, #1
     9de:	4b02      	ldr	r3, [pc, #8]	; (9e8 <cancelReset+0xc>)
     9e0:	4252      	negs	r2, r2
     9e2:	601a      	str	r2, [r3, #0]
}
     9e4:	4770      	bx	lr
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	20000004 	.word	0x20000004

000009ec <tickReset>:

void tickReset() {
	if (ticks == -1)
     9ec:	4a16      	ldr	r2, [pc, #88]	; (a48 <tickReset+0x5c>)
void tickReset() {
     9ee:	b510      	push	{r4, lr}
	if (ticks == -1)
     9f0:	6813      	ldr	r3, [r2, #0]
     9f2:	1c59      	adds	r1, r3, #1
     9f4:	d027      	beq.n	a46 <tickReset+0x5a>
		return;
	ticks--;
     9f6:	3b01      	subs	r3, #1
     9f8:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     9fa:	2b00      	cmp	r3, #0
     9fc:	d123      	bne.n	a46 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     9fe:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     a00:	4b12      	ldr	r3, [pc, #72]	; (a4c <tickReset+0x60>)
     a02:	4a13      	ldr	r2, [pc, #76]	; (a50 <tickReset+0x64>)
     a04:	3304      	adds	r3, #4
     a06:	4293      	cmp	r3, r2
     a08:	d808      	bhi.n	a1c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a0a:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     a0e:	4a11      	ldr	r2, [pc, #68]	; (a54 <tickReset+0x68>)
     a10:	4b11      	ldr	r3, [pc, #68]	; (a58 <tickReset+0x6c>)
     a12:	60da      	str	r2, [r3, #12]
     a14:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     a18:	46c0      	nop			; (mov r8, r8)
     a1a:	e7fd      	b.n	a18 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     a1c:	4a0f      	ldr	r2, [pc, #60]	; (a5c <tickReset+0x70>)
	while (!nvmReady())
     a1e:	2101      	movs	r1, #1
     a20:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     a22:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     a24:	420c      	tst	r4, r1
     a26:	d0fc      	beq.n	a22 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     a28:	2120      	movs	r1, #32
     a2a:	8b14      	ldrh	r4, [r2, #24]
     a2c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     a2e:	089b      	lsrs	r3, r3, #2
     a30:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     a32:	4321      	orrs	r1, r4
     a34:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     a36:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     a38:	4b09      	ldr	r3, [pc, #36]	; (a60 <tickReset+0x74>)
     a3a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     a3c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     a3e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     a40:	421a      	tst	r2, r3
     a42:	d0fc      	beq.n	a3e <tickReset+0x52>
     a44:	e7e1      	b.n	a0a <tickReset+0x1e>
		banzai();
}
     a46:	bd10      	pop	{r4, pc}
     a48:	20000004 	.word	0x20000004
     a4c:	00000000 	.word	0x00000000
     a50:	00000203 	.word	0x00000203
     a54:	05fa0004 	.word	0x05fa0004
     a58:	e000ed00 	.word	0xe000ed00
     a5c:	41004000 	.word	0x41004000
     a60:	ffffa502 	.word	0xffffa502

00000a64 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a64:	221e      	movs	r2, #30
{
     a66:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a68:	4846      	ldr	r0, [pc, #280]	; (b84 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a6a:	4947      	ldr	r1, [pc, #284]	; (b88 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a6c:	6843      	ldr	r3, [r0, #4]
     a6e:	4393      	bics	r3, r2
     a70:	3a1c      	subs	r2, #28
     a72:	4313      	orrs	r3, r2
     a74:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a76:	2308      	movs	r3, #8
     a78:	698c      	ldr	r4, [r1, #24]
     a7a:	4323      	orrs	r3, r4
     a7c:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     a7e:	4c43      	ldr	r4, [pc, #268]	; (b8c <SystemInit+0x128>)
     a80:	4b43      	ldr	r3, [pc, #268]	; (b90 <SystemInit+0x12c>)
     a82:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     a84:	8a9c      	ldrh	r4, [r3, #20]
     a86:	4314      	orrs	r4, r2
     a88:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     a8a:	68dc      	ldr	r4, [r3, #12]
     a8c:	4214      	tst	r4, r2
     a8e:	d0fc      	beq.n	a8a <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     a90:	2401      	movs	r4, #1
     a92:	4a40      	ldr	r2, [pc, #256]	; (b94 <SystemInit+0x130>)
     a94:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     a96:	7815      	ldrb	r5, [r2, #0]
     a98:	4225      	tst	r5, r4
     a9a:	d003      	beq.n	aa4 <SystemInit+0x40>
     a9c:	7855      	ldrb	r5, [r2, #1]
     a9e:	b26d      	sxtb	r5, r5
     aa0:	2d00      	cmp	r5, #0
     aa2:	dbf8      	blt.n	a96 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     aa4:	2401      	movs	r4, #1
     aa6:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     aa8:	7854      	ldrb	r4, [r2, #1]
     aaa:	b264      	sxtb	r4, r4
     aac:	2c00      	cmp	r4, #0
     aae:	dbfb      	blt.n	aa8 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     ab0:	4c39      	ldr	r4, [pc, #228]	; (b98 <SystemInit+0x134>)
     ab2:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     ab4:	7854      	ldrb	r4, [r2, #1]
     ab6:	b264      	sxtb	r4, r4
     ab8:	2c00      	cmp	r4, #0
     aba:	dbfb      	blt.n	ab4 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     abc:	2482      	movs	r4, #130	; 0x82
     abe:	01e4      	lsls	r4, r4, #7
     ac0:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     ac2:	7854      	ldrb	r4, [r2, #1]
     ac4:	b264      	sxtb	r4, r4
     ac6:	2c00      	cmp	r4, #0
     ac8:	dbfb      	blt.n	ac2 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     aca:	2402      	movs	r4, #2
     acc:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     ace:	340e      	adds	r4, #14
     ad0:	68dd      	ldr	r5, [r3, #12]
     ad2:	4225      	tst	r5, r4
     ad4:	d0fc      	beq.n	ad0 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     ad6:	4c31      	ldr	r4, [pc, #196]	; (b9c <SystemInit+0x138>)
     ad8:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     ada:	2410      	movs	r4, #16
     adc:	68dd      	ldr	r5, [r3, #12]
     ade:	4225      	tst	r5, r4
     ae0:	d0fc      	beq.n	adc <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     ae2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     ae4:	4c2e      	ldr	r4, [pc, #184]	; (ba0 <SystemInit+0x13c>)
     ae6:	432c      	orrs	r4, r5
     ae8:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     aea:	2410      	movs	r4, #16
     aec:	68dd      	ldr	r5, [r3, #12]
     aee:	4225      	tst	r5, r4
     af0:	d0fc      	beq.n	aec <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     af2:	2402      	movs	r4, #2
     af4:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     af6:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     af8:	432c      	orrs	r4, r5
     afa:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     afc:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     afe:	68dd      	ldr	r5, [r3, #12]
     b00:	4235      	tst	r5, r6
     b02:	d0fc      	beq.n	afe <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     b04:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b06:	4225      	tst	r5, r4
     b08:	d0f9      	beq.n	afe <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b0a:	2410      	movs	r4, #16
     b0c:	68dd      	ldr	r5, [r3, #12]
     b0e:	4225      	tst	r5, r4
     b10:	d0fc      	beq.n	b0c <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     b12:	2400      	movs	r4, #0
     b14:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b16:	7854      	ldrb	r4, [r2, #1]
     b18:	b264      	sxtb	r4, r4
     b1a:	2c00      	cmp	r4, #0
     b1c:	dbfb      	blt.n	b16 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     b1e:	4c21      	ldr	r4, [pc, #132]	; (ba4 <SystemInit+0x140>)
     b20:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b22:	7854      	ldrb	r4, [r2, #1]
     b24:	b264      	sxtb	r4, r4
     b26:	2c00      	cmp	r4, #0
     b28:	dbfb      	blt.n	b22 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     b2a:	6a1c      	ldr	r4, [r3, #32]
     b2c:	4d1e      	ldr	r5, [pc, #120]	; (ba8 <SystemInit+0x144>)
     b2e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     b30:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     b32:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     b34:	6a1c      	ldr	r4, [r3, #32]
     b36:	43ac      	bics	r4, r5
     b38:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     b3a:	2303      	movs	r3, #3
     b3c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     b3e:	4b1b      	ldr	r3, [pc, #108]	; (bac <SystemInit+0x148>)
     b40:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b42:	7853      	ldrb	r3, [r2, #1]
     b44:	b25b      	sxtb	r3, r3
     b46:	2b00      	cmp	r3, #0
     b48:	dbfb      	blt.n	b42 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     b4a:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     b4c:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     b4e:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     b50:	4a17      	ldr	r2, [pc, #92]	; (bb0 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     b52:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     b54:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     b56:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     b58:	4b16      	ldr	r3, [pc, #88]	; (bb4 <SystemInit+0x150>)
     b5a:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     b5c:	4b16      	ldr	r3, [pc, #88]	; (bb8 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     b5e:	4a17      	ldr	r2, [pc, #92]	; (bbc <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     b60:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     b62:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     b64:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     b66:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     b68:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     b6a:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     b6c:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     b6e:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     b70:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     b72:	4313      	orrs	r3, r2
     b74:	4a12      	ldr	r2, [pc, #72]	; (bc0 <SystemInit+0x15c>)
     b76:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     b78:	2380      	movs	r3, #128	; 0x80
     b7a:	6842      	ldr	r2, [r0, #4]
     b7c:	4313      	orrs	r3, r2
     b7e:	6043      	str	r3, [r0, #4]
}
     b80:	bd70      	pop	{r4, r5, r6, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	41004000 	.word	0x41004000
     b88:	40000400 	.word	0x40000400
     b8c:	0000060c 	.word	0x0000060c
     b90:	40000800 	.word	0x40000800
     b94:	40000c00 	.word	0x40000c00
     b98:	00010501 	.word	0x00010501
     b9c:	7dff05b9 	.word	0x7dff05b9
     ba0:	00000a04 	.word	0x00000a04
     ba4:	00030700 	.word	0x00030700
     ba8:	fffffcff 	.word	0xfffffcff
     bac:	00010603 	.word	0x00010603
     bb0:	02dc6c00 	.word	0x02dc6c00
     bb4:	20000030 	.word	0x20000030
     bb8:	00806024 	.word	0x00806024
     bbc:	00806020 	.word	0x00806020
     bc0:	42004000 	.word	0x42004000

00000bc4 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
     bc4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     bc6:	250f      	movs	r5, #15
     bc8:	1dcb      	adds	r3, r1, #7
     bca:	3901      	subs	r1, #1
     bcc:	0002      	movs	r2, r0
     bce:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     bd0:	0014      	movs	r4, r2
		val = (val >> 4);
     bd2:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     bd4:	3430      	adds	r4, #48	; 0x30
     bd6:	2a09      	cmp	r2, #9
     bd8:	dd01      	ble.n	bde <_ZL5utox8mPc+0x1a>
     bda:	3237      	adds	r2, #55	; 0x37
     bdc:	0014      	movs	r4, r2
     bde:	701c      	strb	r4, [r3, #0]
     be0:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     be2:	428b      	cmp	r3, r1
     be4:	d1f2      	bne.n	bcc <_ZL5utox8mPc+0x8>
	}
}
     be6:	bd30      	pop	{r4, r5, pc}

00000be8 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     be8:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     bea:	2982      	cmp	r1, #130	; 0x82
     bec:	d11f      	bne.n	c2e <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     bee:	b2c3      	uxtb	r3, r0
     bf0:	4d2c      	ldr	r5, [pc, #176]	; (ca4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
     bf2:	015a      	lsls	r2, r3, #5
     bf4:	18aa      	adds	r2, r5, r2
     bf6:	6991      	ldr	r1, [r2, #24]
     bf8:	4c2b      	ldr	r4, [pc, #172]	; (ca8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     bfa:	0180      	lsls	r0, r0, #6
     bfc:	400c      	ands	r4, r1
     bfe:	21c0      	movs	r1, #192	; 0xc0
     c00:	0589      	lsls	r1, r1, #22
     c02:	4321      	orrs	r1, r4
     c04:	6191      	str	r1, [r2, #24]
     c06:	4929      	ldr	r1, [pc, #164]	; (cac <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     c08:	3308      	adds	r3, #8
     c0a:	1808      	adds	r0, r1, r0
     c0c:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     c0e:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     c10:	682a      	ldr	r2, [r5, #0]
     c12:	015b      	lsls	r3, r3, #5
     c14:	18d0      	adds	r0, r2, r3
     c16:	7904      	ldrb	r4, [r0, #4]
     c18:	4249      	negs	r1, r1
     c1a:	4321      	orrs	r1, r4
     c1c:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c1e:	2070      	movs	r0, #112	; 0x70
     c20:	5c99      	ldrb	r1, [r3, r2]
     c22:	4381      	bics	r1, r0
     c24:	0008      	movs	r0, r1
     c26:	2130      	movs	r1, #48	; 0x30
     c28:	4301      	orrs	r1, r0
     c2a:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     c2c:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     c2e:	2900      	cmp	r1, #0
     c30:	d1fc      	bne.n	c2c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c32:	24c0      	movs	r4, #192	; 0xc0
     c34:	b2c1      	uxtb	r1, r0
     c36:	4e1b      	ldr	r6, [pc, #108]	; (ca4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
     c38:	014b      	lsls	r3, r1, #5
     c3a:	18f3      	adds	r3, r6, r3
     c3c:	689a      	ldr	r2, [r3, #8]
     c3e:	4d1a      	ldr	r5, [pc, #104]	; (ca8 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
     c40:	05a4      	lsls	r4, r4, #22
     c42:	402a      	ands	r2, r5
     c44:	4322      	orrs	r2, r4
     c46:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     c48:	4a19      	ldr	r2, [pc, #100]	; (cb0 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
     c4a:	0180      	lsls	r0, r0, #6
     c4c:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c4e:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     c50:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     c52:	6830      	ldr	r0, [r6, #0]
     c54:	2607      	movs	r6, #7
     c56:	3208      	adds	r2, #8
     c58:	0152      	lsls	r2, r2, #5
     c5a:	5c11      	ldrb	r1, [r2, r0]
     c5c:	43b1      	bics	r1, r6
     c5e:	000e      	movs	r6, r1
     c60:	2101      	movs	r1, #1
     c62:	4331      	orrs	r1, r6
     c64:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c66:	6999      	ldr	r1, [r3, #24]
     c68:	400d      	ands	r5, r1
     c6a:	432c      	orrs	r4, r5
     c6c:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c6e:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     c70:	490e      	ldr	r1, [pc, #56]	; (cac <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
     c72:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c74:	5c11      	ldrb	r1, [r2, r0]
     c76:	43a1      	bics	r1, r4
     c78:	000c      	movs	r4, r1
     c7a:	2110      	movs	r1, #16
     c7c:	4321      	orrs	r1, r4
     c7e:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c80:	6899      	ldr	r1, [r3, #8]
     c82:	4c0c      	ldr	r4, [pc, #48]	; (cb4 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     c84:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c86:	400c      	ands	r4, r1
     c88:	2180      	movs	r1, #128	; 0x80
     c8a:	0349      	lsls	r1, r1, #13
     c8c:	4321      	orrs	r1, r4
     c8e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     c90:	6899      	ldr	r1, [r3, #8]
     c92:	0b89      	lsrs	r1, r1, #14
     c94:	0389      	lsls	r1, r1, #14
     c96:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     c98:	2340      	movs	r3, #64	; 0x40
     c9a:	7951      	ldrb	r1, [r2, #5]
     c9c:	430b      	orrs	r3, r1
     c9e:	7153      	strb	r3, [r2, #5]
     ca0:	e7c4      	b.n	c2c <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	20000c08 	.word	0x20000c08
     ca8:	8fffffff 	.word	0x8fffffff
     cac:	2000077c 	.word	0x2000077c
     cb0:	2000093c 	.word	0x2000093c
     cb4:	f0003fff 	.word	0xf0003fff

00000cb8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     cb8:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     cba:	0004      	movs	r4, r0
     cbc:	2301      	movs	r3, #1
     cbe:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
     cc0:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
     cc2:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
     cc4:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
     cc6:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     cc8:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     cca:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
     ccc:	0052      	lsls	r2, r2, #1
     cce:	f002 fe08 	bl	38e2 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     cd2:	78ab      	ldrb	r3, [r5, #2]
     cd4:	07db      	lsls	r3, r3, #31
     cd6:	d4fc      	bmi.n	cd2 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
     cd8:	626c      	str	r4, [r5, #36]	; 0x24
}
     cda:	bd70      	pop	{r4, r5, r6, pc}

00000cdc <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     cdc:	221f      	movs	r2, #31
     cde:	4b14      	ldr	r3, [pc, #80]	; (d30 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
     ce0:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     ce6:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     ce8:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     cea:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     cec:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     cee:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
     cf0:	291f      	cmp	r1, #31
     cf2:	d100      	bne.n	cf6 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     cf4:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     cf6:	2a1f      	cmp	r2, #31
     cf8:	d100      	bne.n	cfc <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     cfa:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     cfc:	2b07      	cmp	r3, #7
     cfe:	d100      	bne.n	d02 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     d00:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     d02:	251f      	movs	r5, #31
     d04:	6800      	ldr	r0, [r0, #0]
     d06:	018e      	lsls	r6, r1, #6
     d08:	8d04      	ldrh	r4, [r0, #40]	; 0x28
     d0a:	490a      	ldr	r1, [pc, #40]	; (d34 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     d0c:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
     d0e:	4021      	ands	r1, r4
     d10:	4331      	orrs	r1, r6
     d12:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     d14:	8d01      	ldrh	r1, [r0, #40]	; 0x28
     d16:	0014      	movs	r4, r2
     d18:	000a      	movs	r2, r1
     d1a:	43aa      	bics	r2, r5
     d1c:	4322      	orrs	r2, r4
     d1e:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     d20:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     d22:	0319      	lsls	r1, r3, #12
     d24:	4b04      	ldr	r3, [pc, #16]	; (d38 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     d26:	4013      	ands	r3, r2
     d28:	430b      	orrs	r3, r1
     d2a:	8503      	strh	r3, [r0, #40]	; 0x28
}
     d2c:	bd70      	pop	{r4, r5, r6, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00806024 	.word	0x00806024
     d34:	fffff83f 	.word	0xfffff83f
     d38:	ffff8fff 	.word	0xffff8fff

00000d3c <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d3c:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     d40:	6003      	str	r3, [r0, #0]
     d42:	2301      	movs	r3, #1
     d44:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
		__disable_irq();
	}
     d48:	4770      	bx	lr

00000d4a <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     d4a:	6803      	ldr	r3, [r0, #0]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d102      	bne.n	d56 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     d50:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     d52:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     d56:	4770      	bx	lr

00000d58 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     d5a:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
     d5c:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
     d5e:	4668      	mov	r0, sp
		if (current == 0) {
     d60:	2d00      	cmp	r5, #0
     d62:	d114      	bne.n	d8e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
     d64:	f7ff ffea 	bl	d3c <_ZN7__GuardC1Ev>
     d68:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     d6a:	1d62      	adds	r2, r4, #5
			synchronized {
     d6c:	3b01      	subs	r3, #1
     d6e:	d302      	bcc.n	d76 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     d70:	7fd5      	ldrb	r5, [r2, #31]
     d72:	b2ed      	uxtb	r5, r5
     d74:	e7fa      	b.n	d6c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
     d76:	4668      	mov	r0, sp
     d78:	9301      	str	r3, [sp, #4]
     d7a:	f7ff ffe6 	bl	d4a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     d7e:	2d00      	cmp	r5, #0
     d80:	d101      	bne.n	d86 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     d82:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     d84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
     d86:	6a20      	ldr	r0, [r4, #32]
     d88:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
     d8a:	1ac0      	subs	r0, r0, r3
     d8c:	e7fa      	b.n	d84 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
     d8e:	f7ff ffd5 	bl	d3c <_ZN7__GuardC1Ev>
				ready = ready1;
     d92:	0022      	movs	r2, r4
			bool ready = false;
     d94:	2500      	movs	r5, #0
     d96:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     d98:	3234      	adds	r2, #52	; 0x34
			synchronized {
     d9a:	3b01      	subs	r3, #1
     d9c:	d302      	bcc.n	da4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
     d9e:	7815      	ldrb	r5, [r2, #0]
     da0:	b2ed      	uxtb	r5, r5
			synchronized {
     da2:	e7fa      	b.n	d9a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
     da4:	4668      	mov	r0, sp
     da6:	9301      	str	r3, [sp, #4]
     da8:	f7ff ffcf 	bl	d4a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     dac:	2d00      	cmp	r5, #0
     dae:	d0e8      	beq.n	d82 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     db0:	6b20      	ldr	r0, [r4, #48]	; 0x30
     db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     db4:	e7e9      	b.n	d8a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00000db8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
     db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     dba:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
     dbc:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     dbe:	7a03      	ldrb	r3, [r0, #8]
     dc0:	6831      	ldr	r1, [r6, #0]
     dc2:	015a      	lsls	r2, r3, #5
     dc4:	188c      	adds	r4, r1, r2
     dc6:	34ff      	adds	r4, #255	; 0xff
     dc8:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     dca:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     dcc:	433d      	orrs	r5, r7
     dce:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
     dd0:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     dd2:	4d09      	ldr	r5, [pc, #36]	; (df8 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
     dd4:	6890      	ldr	r0, [r2, #8]
     dd6:	04a4      	lsls	r4, r4, #18
     dd8:	4028      	ands	r0, r5
     dda:	0924      	lsrs	r4, r4, #4
     ddc:	4320      	orrs	r0, r4
     dde:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     de0:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     de2:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     de4:	0b80      	lsrs	r0, r0, #14
     de6:	0380      	lsls	r0, r0, #14
     de8:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     dea:	2240      	movs	r2, #64	; 0x40
     dec:	015b      	lsls	r3, r3, #5
     dee:	18cb      	adds	r3, r1, r3
     df0:	7919      	ldrb	r1, [r3, #4]
     df2:	430a      	orrs	r2, r1
     df4:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df8:	f0003fff 	.word	0xf0003fff

00000dfc <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
     dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     dfe:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
     e00:	0004      	movs	r4, r0
     e02:	000e      	movs	r6, r1
     e04:	0017      	movs	r7, r2
			synchronized {
     e06:	4668      	mov	r0, sp
		if (current == 0) {
     e08:	2b00      	cmp	r3, #0
     e0a:	d13d      	bne.n	e88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
     e0c:	f7ff ff96 	bl	d3c <_ZN7__GuardC1Ev>
     e10:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     e12:	1d61      	adds	r1, r4, #5
     e14:	3b01      	subs	r3, #1
			synchronized {
     e16:	1c5a      	adds	r2, r3, #1
     e18:	d00c      	beq.n	e34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
     e1a:	7fcd      	ldrb	r5, [r1, #31]
     e1c:	1e5a      	subs	r2, r3, #1
     e1e:	b2ed      	uxtb	r5, r5
     e20:	2d00      	cmp	r5, #0
     e22:	d105      	bne.n	e30 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
     e24:	4668      	mov	r0, sp
     e26:	9301      	str	r3, [sp, #4]
     e28:	f7ff ff8f 	bl	d4a <_ZN7__GuardD1Ev>
	}
     e2c:	0028      	movs	r0, r5
     e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     e30:	0013      	movs	r3, r2
     e32:	e7f0      	b.n	e16 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
     e34:	4668      	mov	r0, sp
     e36:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
     e38:	2500      	movs	r5, #0
			synchronized {
     e3a:	f7ff ff86 	bl	d4a <_ZN7__GuardD1Ev>
     e3e:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
     e40:	42af      	cmp	r7, r5
     e42:	d002      	beq.n	e4a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
     e44:	6a22      	ldr	r2, [r4, #32]
     e46:	4293      	cmp	r3, r2
     e48:	d357      	bcc.n	efa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
     e4a:	6a22      	ldr	r2, [r4, #32]
     e4c:	4293      	cmp	r3, r2
     e4e:	d1ed      	bne.n	e2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
     e50:	2300      	movs	r3, #0
     e52:	61e3      	str	r3, [r4, #28]
				current = 1;
     e54:	3301      	adds	r3, #1
     e56:	6123      	str	r3, [r4, #16]
				synchronized {
     e58:	4668      	mov	r0, sp
     e5a:	f7ff ff6f 	bl	d3c <_ZN7__GuardC1Ev>
					if (notify) {
     e5e:	0022      	movs	r2, r4
					ready0 = false;
     e60:	2100      	movs	r1, #0
     e62:	9b01      	ldr	r3, [sp, #4]
     e64:	1d67      	adds	r7, r4, #5
     e66:	3b01      	subs	r3, #1
					if (notify) {
     e68:	3235      	adds	r2, #53	; 0x35
				synchronized {
     e6a:	1c58      	adds	r0, r3, #1
     e6c:	d0da      	beq.n	e24 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
     e6e:	77f9      	strb	r1, [r7, #31]
					if (notify) {
     e70:	7810      	ldrb	r0, [r2, #0]
     e72:	1e5e      	subs	r6, r3, #1
     e74:	2800      	cmp	r0, #0
     e76:	d005      	beq.n	e84 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
     e78:	7011      	strb	r1, [r2, #0]
						release();
     e7a:	0020      	movs	r0, r4
     e7c:	9301      	str	r3, [sp, #4]
     e7e:	f7ff ff9b 	bl	db8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     e82:	e7ec      	b.n	e5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
     e84:	0033      	movs	r3, r6
     e86:	e7f0      	b.n	e6a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
     e88:	f7ff ff58 	bl	d3c <_ZN7__GuardC1Ev>
				if (!ready1) {
     e8c:	0021      	movs	r1, r4
     e8e:	9b01      	ldr	r3, [sp, #4]
     e90:	3134      	adds	r1, #52	; 0x34
     e92:	3b01      	subs	r3, #1
			synchronized {
     e94:	1c5a      	adds	r2, r3, #1
     e96:	d006      	beq.n	ea6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
     e98:	780d      	ldrb	r5, [r1, #0]
     e9a:	1e5a      	subs	r2, r3, #1
     e9c:	b2ed      	uxtb	r5, r5
     e9e:	2d00      	cmp	r5, #0
     ea0:	d0c0      	beq.n	e24 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
     ea2:	0013      	movs	r3, r2
     ea4:	e7f6      	b.n	e94 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
     ea6:	4668      	mov	r0, sp
     ea8:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
     eaa:	2500      	movs	r5, #0
			synchronized {
     eac:	f7ff ff4d 	bl	d4a <_ZN7__GuardD1Ev>
     eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
     eb2:	42bd      	cmp	r5, r7
     eb4:	d002      	beq.n	ebc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
     eb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
     eb8:	4293      	cmp	r3, r2
     eba:	d326      	bcc.n	f0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
     ebc:	6b22      	ldr	r2, [r4, #48]	; 0x30
     ebe:	4293      	cmp	r3, r2
     ec0:	d1b4      	bne.n	e2c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
     ec2:	2300      	movs	r3, #0
				synchronized {
     ec4:	4668      	mov	r0, sp
				first1 = 0;
     ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     ec8:	6123      	str	r3, [r4, #16]
				synchronized {
     eca:	f7ff ff37 	bl	d3c <_ZN7__GuardC1Ev>
					ready1 = false;
     ece:	0027      	movs	r7, r4
					if (notify) {
     ed0:	0022      	movs	r2, r4
					ready1 = false;
     ed2:	2100      	movs	r1, #0
     ed4:	9b01      	ldr	r3, [sp, #4]
     ed6:	3734      	adds	r7, #52	; 0x34
     ed8:	3b01      	subs	r3, #1
					if (notify) {
     eda:	3235      	adds	r2, #53	; 0x35
				synchronized {
     edc:	1c58      	adds	r0, r3, #1
     ede:	d0a1      	beq.n	e24 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
     ee0:	7039      	strb	r1, [r7, #0]
					if (notify) {
     ee2:	7810      	ldrb	r0, [r2, #0]
     ee4:	1e5e      	subs	r6, r3, #1
     ee6:	2800      	cmp	r0, #0
     ee8:	d005      	beq.n	ef6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
     eea:	7011      	strb	r1, [r2, #0]
						release();
     eec:	0020      	movs	r0, r4
     eee:	9301      	str	r3, [sp, #4]
     ef0:	f7ff ff62 	bl	db8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     ef4:	e7eb      	b.n	ece <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
     ef6:	0033      	movs	r3, r6
     ef8:	e7f0      	b.n	edc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
     efa:	1c5a      	adds	r2, r3, #1
     efc:	61e2      	str	r2, [r4, #28]
     efe:	69a2      	ldr	r2, [r4, #24]
     f00:	18d3      	adds	r3, r2, r3
     f02:	781b      	ldrb	r3, [r3, #0]
     f04:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
     f06:	3501      	adds	r5, #1
     f08:	e799      	b.n	e3e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
     f0a:	1c5a      	adds	r2, r3, #1
     f0c:	62e2      	str	r2, [r4, #44]	; 0x2c
     f0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     f10:	18d3      	adds	r3, r2, r3
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
     f16:	3501      	adds	r5, #1
     f18:	e7ca      	b.n	eb0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00000f1a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     f1c:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
     f1e:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     f20:	0011      	movs	r1, r2
	virtual void handleEndpoint()
     f22:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     f24:	3108      	adds	r1, #8
     f26:	6818      	ldr	r0, [r3, #0]
     f28:	0149      	lsls	r1, r1, #5
     f2a:	1841      	adds	r1, r0, r1
     f2c:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     f2e:	07c0      	lsls	r0, r0, #31
     f30:	d527      	bpl.n	f82 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     f32:	2501      	movs	r5, #1
     f34:	0152      	lsls	r2, r2, #5
     f36:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f38:	189b      	adds	r3, r3, r2
     f3a:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
     f3c:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f3e:	0492      	lsls	r2, r2, #18
     f40:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
     f42:	2900      	cmp	r1, #0
     f44:	d121      	bne.n	f8a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
     f46:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
     f48:	6a22      	ldr	r2, [r4, #32]
     f4a:	2a00      	cmp	r2, #0
     f4c:	d03e      	beq.n	fcc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
     f50:	6165      	str	r5, [r4, #20]
					synchronized {
     f52:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f54:	605a      	str	r2, [r3, #4]
					synchronized {
     f56:	f7ff fef1 	bl	d3c <_ZN7__GuardC1Ev>
						if (ready1) {
     f5a:	0027      	movs	r7, r4
     f5c:	0021      	movs	r1, r4
     f5e:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
     f60:	1d66      	adds	r6, r4, #5
     f62:	3b01      	subs	r3, #1
						if (ready1) {
     f64:	3734      	adds	r7, #52	; 0x34
     f66:	3135      	adds	r1, #53	; 0x35
					synchronized {
     f68:	1c5a      	adds	r2, r3, #1
     f6a:	d02b      	beq.n	fc4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
     f6c:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
     f6e:	783a      	ldrb	r2, [r7, #0]
     f70:	1e58      	subs	r0, r3, #1
     f72:	b2d2      	uxtb	r2, r2
     f74:	2a00      	cmp	r2, #0
     f76:	d005      	beq.n	f84 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
     f78:	9301      	str	r3, [sp, #4]
							return;
     f7a:	4668      	mov	r0, sp
							notify = true;
     f7c:	700d      	strb	r5, [r1, #0]
							return;
     f7e:	f7ff fee4 	bl	d4a <_ZN7__GuardD1Ev>
	}
     f82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
     f84:	700a      	strb	r2, [r1, #0]
					synchronized {
     f86:	0003      	movs	r3, r0
     f88:	e7ee      	b.n	f68 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
     f8a:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
     f8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
     f8e:	2a00      	cmp	r2, #0
     f90:	d01c      	beq.n	fcc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
     f92:	2200      	movs	r2, #0
     f94:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f96:	69a2      	ldr	r2, [r4, #24]
					synchronized {
     f98:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f9a:	605a      	str	r2, [r3, #4]
					synchronized {
     f9c:	f7ff fece 	bl	d3c <_ZN7__GuardC1Ev>
						ready1 = true;
     fa0:	0026      	movs	r6, r4
     fa2:	0021      	movs	r1, r4
     fa4:	9b01      	ldr	r3, [sp, #4]
     fa6:	3634      	adds	r6, #52	; 0x34
     fa8:	3b01      	subs	r3, #1
						if (ready0) {
     faa:	1d67      	adds	r7, r4, #5
     fac:	3135      	adds	r1, #53	; 0x35
					synchronized {
     fae:	1c5a      	adds	r2, r3, #1
     fb0:	d008      	beq.n	fc4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
     fb2:	7035      	strb	r5, [r6, #0]
						if (ready0) {
     fb4:	7ffa      	ldrb	r2, [r7, #31]
     fb6:	1e58      	subs	r0, r3, #1
     fb8:	b2d2      	uxtb	r2, r2
     fba:	2a00      	cmp	r2, #0
     fbc:	d1dc      	bne.n	f78 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
     fbe:	700a      	strb	r2, [r1, #0]
					synchronized {
     fc0:	0003      	movs	r3, r0
     fc2:	e7f4      	b.n	fae <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
     fc4:	4668      	mov	r0, sp
     fc6:	9301      	str	r3, [sp, #4]
     fc8:	f7ff febf 	bl	d4a <_ZN7__GuardD1Ev>
			release();
     fcc:	0020      	movs	r0, r4
     fce:	f7ff fef3 	bl	db8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     fd2:	e7d6      	b.n	f82 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00000fd4 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     fd6:	466b      	mov	r3, sp
     fd8:	1ddc      	adds	r4, r3, #7
     fda:	2300      	movs	r3, #0
{
     fdc:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
     fde:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
     fe0:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
     fe2:	f001 fc19 	bl	2818 <_Z16CDC_GetInterfacePh>
     fe6:	682b      	ldr	r3, [r5, #0]
     fe8:	1818      	adds	r0, r3, r0
     fea:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     fec:	f001 fcb8 	bl	2960 <_Z12PluggableUSBv>
     ff0:	0021      	movs	r1, r4
     ff2:	f001 fc71 	bl	28d8 <_ZN13PluggableUSB_12getInterfaceEPh>
     ff6:	682b      	ldr	r3, [r5, #0]
     ff8:	1818      	adds	r0, r3, r0
     ffa:	6028      	str	r0, [r5, #0]
	return interfaces;
     ffc:	7820      	ldrb	r0, [r4, #0]
}
     ffe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00001000 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    1000:	2903      	cmp	r1, #3
    1002:	d10e      	bne.n	1022 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1004:	2280      	movs	r2, #128	; 0x80
    1006:	4b0e      	ldr	r3, [pc, #56]	; (1040 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    1008:	3162      	adds	r1, #98	; 0x62
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	31ff      	adds	r1, #255	; 0xff
    100e:	5c58      	ldrb	r0, [r3, r1]
    1010:	4252      	negs	r2, r2
    1012:	4302      	orrs	r2, r0
    1014:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1016:	2268      	movs	r2, #104	; 0x68
    1018:	3963      	subs	r1, #99	; 0x63
    101a:	39ff      	subs	r1, #255	; 0xff
    101c:	32ff      	adds	r2, #255	; 0xff
    101e:	5499      	strb	r1, [r3, r2]
}
    1020:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    1022:	2901      	cmp	r1, #1
    1024:	d1fc      	bne.n	1020 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	4b05      	ldr	r3, [pc, #20]	; (1040 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    102a:	3124      	adds	r1, #36	; 0x24
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	31ff      	adds	r1, #255	; 0xff
    1030:	5c58      	ldrb	r0, [r3, r1]
    1032:	4252      	negs	r2, r2
    1034:	4302      	orrs	r2, r0
    1036:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1038:	3923      	subs	r1, #35	; 0x23
    103a:	39ff      	subs	r1, #255	; 0xff
    103c:	2228      	movs	r2, #40	; 0x28
    103e:	e7ed      	b.n	101c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    1040:	20000c08 	.word	0x20000c08

00001044 <_ZN14USBDeviceClass4initEv>:
{
    1044:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    1046:	2500      	movs	r5, #0
    1048:	4b2f      	ldr	r3, [pc, #188]	; (1108 <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
    104a:	2101      	movs	r1, #1
{
    104c:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    104e:	201a      	movs	r0, #26
	txLEDPulse = 0;
    1050:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    1052:	f000 ff6d 	bl	1f30 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    1056:	2101      	movs	r1, #1
    1058:	201a      	movs	r0, #26
    105a:	f000 ffb5 	bl	1fc8 <digitalWrite>
	rxLEDPulse = 0;
    105e:	4b2b      	ldr	r3, [pc, #172]	; (110c <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
    1060:	2101      	movs	r1, #1
    1062:	2019      	movs	r0, #25
	rxLEDPulse = 0;
    1064:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    1066:	f000 ff63 	bl	1f30 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    106a:	2101      	movs	r1, #1
    106c:	2019      	movs	r0, #25
    106e:	f000 ffab 	bl	1fc8 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    1072:	2320      	movs	r3, #32
    1074:	4a26      	ldr	r2, [pc, #152]	; (1110 <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1076:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    1078:	69d1      	ldr	r1, [r2, #28]
    107a:	430b      	orrs	r3, r1
    107c:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    107e:	2201      	movs	r2, #1
    1080:	4924      	ldr	r1, [pc, #144]	; (1114 <_ZN14USBDeviceClass4initEv+0xd0>)
    1082:	780b      	ldrb	r3, [r1, #0]
    1084:	4313      	orrs	r3, r2
    1086:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1088:	4b23      	ldr	r3, [pc, #140]	; (1118 <_ZN14USBDeviceClass4initEv+0xd4>)
    108a:	7819      	ldrb	r1, [r3, #0]
    108c:	4381      	bics	r1, r0
    108e:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    1090:	2106      	movs	r1, #6
    1092:	781d      	ldrb	r5, [r3, #0]
    1094:	4329      	orrs	r1, r5
    1096:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    1098:	4920      	ldr	r1, [pc, #128]	; (111c <_ZN14USBDeviceClass4initEv+0xd8>)
    109a:	780d      	ldrb	r5, [r1, #0]
    109c:	432a      	orrs	r2, r5
    109e:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    10a0:	781a      	ldrb	r2, [r3, #0]
    10a2:	4002      	ands	r2, r0
    10a4:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    10a6:	2260      	movs	r2, #96	; 0x60
    10a8:	7819      	ldrb	r1, [r3, #0]
    10aa:	430a      	orrs	r2, r1
    10ac:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    10ae:	4b1c      	ldr	r3, [pc, #112]	; (1120 <_ZN14USBDeviceClass4initEv+0xdc>)
    10b0:	4a1c      	ldr	r2, [pc, #112]	; (1124 <_ZN14USBDeviceClass4initEv+0xe0>)
    10b2:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    10b4:	785a      	ldrb	r2, [r3, #1]
    10b6:	09d2      	lsrs	r2, r2, #7
    10b8:	d1fc      	bne.n	10b4 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    10ba:	481b      	ldr	r0, [pc, #108]	; (1128 <_ZN14USBDeviceClass4initEv+0xe4>)
    10bc:	f7ff fc40 	bl	940 <USB_SetHandler>
	usbd.reset();
    10c0:	4d1a      	ldr	r5, [pc, #104]	; (112c <_ZN14USBDeviceClass4initEv+0xe8>)
    10c2:	0028      	movs	r0, r5
    10c4:	f7ff fdf8 	bl	cb8 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    10c8:	0028      	movs	r0, r5
    10ca:	f7ff fe07 	bl	cdc <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    10ce:	217f      	movs	r1, #127	; 0x7f
    10d0:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    10d2:	20c1      	movs	r0, #193	; 0xc1
    10d4:	781a      	ldrb	r2, [r3, #0]
    10d6:	0080      	lsls	r0, r0, #2
    10d8:	400a      	ands	r2, r1
    10da:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    10dc:	2204      	movs	r2, #4
    10de:	7819      	ldrb	r1, [r3, #0]
    10e0:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    10e2:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    10e4:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    10e6:	891a      	ldrh	r2, [r3, #8]
    10e8:	438a      	bics	r2, r1
    10ea:	4911      	ldr	r1, [pc, #68]	; (1130 <_ZN14USBDeviceClass4initEv+0xec>)
    10ec:	811a      	strh	r2, [r3, #8]
    10ee:	580a      	ldr	r2, [r1, r0]
    10f0:	0212      	lsls	r2, r2, #8
    10f2:	0a12      	lsrs	r2, r2, #8
    10f4:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    10f6:	2280      	movs	r2, #128	; 0x80
    10f8:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    10fa:	7819      	ldrb	r1, [r3, #0]
    10fc:	3a7e      	subs	r2, #126	; 0x7e
    10fe:	430a      	orrs	r2, r1
    1100:	701a      	strb	r2, [r3, #0]
	initialized = true;
    1102:	2301      	movs	r3, #1
    1104:	7023      	strb	r3, [r4, #0]
}
    1106:	bd70      	pop	{r4, r5, r6, pc}
    1108:	20000771 	.word	0x20000771
    110c:	20000770 	.word	0x20000770
    1110:	40000400 	.word	0x40000400
    1114:	41004458 	.word	0x41004458
    1118:	4100443c 	.word	0x4100443c
    111c:	41004459 	.word	0x41004459
    1120:	40000c00 	.word	0x40000c00
    1124:	00004006 	.word	0x00004006
    1128:	00001b05 	.word	0x00001b05
    112c:	20000c08 	.word	0x20000c08
    1130:	e000e100 	.word	0xe000e100

00001134 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    1134:	7800      	ldrb	r0, [r0, #0]
    1136:	2800      	cmp	r0, #0
    1138:	d010      	beq.n	115c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    113a:	2101      	movs	r1, #1
    113c:	4b08      	ldr	r3, [pc, #32]	; (1160 <_ZN14USBDeviceClass6attachEv+0x2c>)
    113e:	681b      	ldr	r3, [r3, #0]
    1140:	891a      	ldrh	r2, [r3, #8]
    1142:	438a      	bics	r2, r1
    1144:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    1146:	2208      	movs	r2, #8
    1148:	8b19      	ldrh	r1, [r3, #24]
    114a:	430a      	orrs	r2, r1
    114c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    114e:	2204      	movs	r2, #4
    1150:	8b19      	ldrh	r1, [r3, #24]
    1152:	430a      	orrs	r2, r1
    1154:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    1156:	2200      	movs	r2, #0
    1158:	4b02      	ldr	r3, [pc, #8]	; (1164 <_ZN14USBDeviceClass6attachEv+0x30>)
    115a:	601a      	str	r2, [r3, #0]
}
    115c:	4770      	bx	lr
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	20000c08 	.word	0x20000c08
    1164:	20000c00 	.word	0x20000c00

00001168 <_ZN14USBDeviceClass10setAddressEm>:
{
    1168:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    116a:	4a0f      	ldr	r2, [pc, #60]	; (11a8 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    116c:	6993      	ldr	r3, [r2, #24]
    116e:	0b9b      	lsrs	r3, r3, #14
    1170:	039b      	lsls	r3, r3, #14
    1172:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1174:	6813      	ldr	r3, [r2, #0]
    1176:	2202      	movs	r2, #2
    1178:	33ff      	adds	r3, #255	; 0xff
    117a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    117c:	7998      	ldrb	r0, [r3, #6]
    117e:	3a82      	subs	r2, #130	; 0x82
    1180:	4302      	orrs	r2, r0
    1182:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1184:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    1186:	0792      	lsls	r2, r2, #30
    1188:	d5fc      	bpl.n	1184 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    118a:	247f      	movs	r4, #127	; 0x7f
    118c:	4a07      	ldr	r2, [pc, #28]	; (11ac <_ZN14USBDeviceClass10setAddressEm+0x44>)
    118e:	4021      	ands	r1, r4
    1190:	7a93      	ldrb	r3, [r2, #10]
    1192:	0008      	movs	r0, r1
    1194:	43a3      	bics	r3, r4
    1196:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1198:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    119a:	4301      	orrs	r1, r0
    119c:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    119e:	7a91      	ldrb	r1, [r2, #10]
    11a0:	425b      	negs	r3, r3
    11a2:	430b      	orrs	r3, r1
    11a4:	7293      	strb	r3, [r2, #10]
}
    11a6:	bd10      	pop	{r4, pc}
    11a8:	20000c08 	.word	0x20000c08
    11ac:	41005000 	.word	0x41005000

000011b0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    11b0:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    11b2:	790b      	ldrb	r3, [r1, #4]
{
    11b4:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    11b6:	2b00      	cmp	r3, #0
    11b8:	d10c      	bne.n	11d4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    11ba:	0008      	movs	r0, r1
    11bc:	f001 fb3a 	bl	2834 <_Z9CDC_SetupR8USBSetup>
    11c0:	2800      	cmp	r0, #0
    11c2:	d001      	beq.n	11c8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    11c4:	2001      	movs	r0, #1
}
    11c6:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    11c8:	4a09      	ldr	r2, [pc, #36]	; (11f0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    11ca:	6993      	ldr	r3, [r2, #24]
    11cc:	0b9b      	lsrs	r3, r3, #14
    11ce:	039b      	lsls	r3, r3, #14
    11d0:	6193      	str	r3, [r2, #24]
    11d2:	e7f7      	b.n	11c4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    11d4:	f001 fbc4 	bl	2960 <_Z12PluggableUSBv>
    11d8:	0021      	movs	r1, r4
    11da:	f001 fbb0 	bl	293e <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    11de:	2800      	cmp	r0, #0
    11e0:	d1f0      	bne.n	11c4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    11e2:	4a03      	ldr	r2, [pc, #12]	; (11f0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    11e4:	6993      	ldr	r3, [r2, #24]
    11e6:	0b9b      	lsrs	r3, r3, #14
    11e8:	039b      	lsls	r3, r3, #14
    11ea:	6193      	str	r3, [r2, #24]
    11ec:	e7eb      	b.n	11c6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	20000c08 	.word	0x20000c08

000011f4 <_ZN14USBDeviceClass6initEPEmm>:
{
    11f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    11f6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    11f8:	2a83      	cmp	r2, #131	; 0x83
    11fa:	d119      	bne.n	1230 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    11fc:	b2cb      	uxtb	r3, r1
    11fe:	4c32      	ldr	r4, [pc, #200]	; (12c8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    1200:	015a      	lsls	r2, r3, #5
    1202:	18a2      	adds	r2, r4, r2
    1204:	6991      	ldr	r1, [r2, #24]
    1206:	4831      	ldr	r0, [pc, #196]	; (12cc <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1208:	01ad      	lsls	r5, r5, #6
    120a:	4008      	ands	r0, r1
    120c:	21c0      	movs	r1, #192	; 0xc0
    120e:	0589      	lsls	r1, r1, #22
    1210:	4301      	orrs	r1, r0
    1212:	6191      	str	r1, [r2, #24]
    1214:	492e      	ldr	r1, [pc, #184]	; (12d0 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1216:	6820      	ldr	r0, [r4, #0]
    1218:	194d      	adds	r5, r1, r5
    121a:	2170      	movs	r1, #112	; 0x70
    121c:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    121e:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1220:	015b      	lsls	r3, r3, #5
    1222:	5c1a      	ldrb	r2, [r3, r0]
    1224:	438a      	bics	r2, r1
    1226:	0011      	movs	r1, r2
    1228:	2240      	movs	r2, #64	; 0x40
    122a:	430a      	orrs	r2, r1
    122c:	541a      	strb	r2, [r3, r0]
}
    122e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    1230:	2a02      	cmp	r2, #2
    1232:	d144      	bne.n	12be <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    1234:	008b      	lsls	r3, r1, #2
    1236:	9301      	str	r3, [sp, #4]
    1238:	4b26      	ldr	r3, [pc, #152]	; (12d4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    123a:	008a      	lsls	r2, r1, #2
    123c:	58d6      	ldr	r6, [r2, r3]
    123e:	2e00      	cmp	r6, #0
    1240:	d1f5      	bne.n	122e <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    1242:	2038      	movs	r0, #56	; 0x38
    1244:	f000 ffa4 	bl	2190 <_Znwj>
		notify(false)
    1248:	4b23      	ldr	r3, [pc, #140]	; (12d8 <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    124a:	4f1f      	ldr	r7, [pc, #124]	; (12c8 <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    124c:	6003      	str	r3, [r0, #0]
    124e:	2380      	movs	r3, #128	; 0x80
    1250:	005b      	lsls	r3, r3, #1
    1252:	60c3      	str	r3, [r0, #12]
    1254:	1d43      	adds	r3, r0, #5
    1256:	6206      	str	r6, [r0, #32]
    1258:	6085      	str	r5, [r0, #8]
    125a:	6106      	str	r6, [r0, #16]
    125c:	6146      	str	r6, [r0, #20]
    125e:	61c6      	str	r6, [r0, #28]
    1260:	0004      	movs	r4, r0
    1262:	6047      	str	r7, [r0, #4]
    1264:	77de      	strb	r6, [r3, #31]
    1266:	62c6      	str	r6, [r0, #44]	; 0x2c
    1268:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    126a:	2080      	movs	r0, #128	; 0x80
		notify(false)
    126c:	332f      	adds	r3, #47	; 0x2f
    126e:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    1270:	0040      	lsls	r0, r0, #1
		notify(false)
    1272:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    1274:	f002 fb22 	bl	38bc <malloc>
    1278:	0006      	movs	r6, r0
    127a:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    127c:	2080      	movs	r0, #128	; 0x80
    127e:	0040      	lsls	r0, r0, #1
    1280:	f002 fb1c 	bl	38bc <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1284:	b2ed      	uxtb	r5, r5
    1286:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    1288:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    128a:	18fb      	adds	r3, r7, r3
    128c:	689a      	ldr	r2, [r3, #8]
    128e:	490f      	ldr	r1, [pc, #60]	; (12cc <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1290:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1292:	4011      	ands	r1, r2
    1294:	22c0      	movs	r2, #192	; 0xc0
    1296:	0592      	lsls	r2, r2, #22
    1298:	430a      	orrs	r2, r1
    129a:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    129c:	683a      	ldr	r2, [r7, #0]
    129e:	3508      	adds	r5, #8
    12a0:	016d      	lsls	r5, r5, #5
    12a2:	5ca9      	ldrb	r1, [r5, r2]
    12a4:	4381      	bics	r1, r0
    12a6:	0008      	movs	r0, r1
    12a8:	2103      	movs	r1, #3
    12aa:	4301      	orrs	r1, r0
    12ac:	54a9      	strb	r1, [r5, r2]
		release();
    12ae:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    12b0:	605e      	str	r6, [r3, #4]
		release();
    12b2:	f7ff fd81 	bl	db8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    12b6:	4b07      	ldr	r3, [pc, #28]	; (12d4 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    12b8:	9a01      	ldr	r2, [sp, #4]
    12ba:	50d4      	str	r4, [r2, r3]
    12bc:	e7b7      	b.n	122e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    12be:	0011      	movs	r1, r2
    12c0:	0028      	movs	r0, r5
    12c2:	f7ff fc91 	bl	be8 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    12c6:	e7b2      	b.n	122e <_ZN14USBDeviceClass6initEPEmm+0x3a>
    12c8:	20000c08 	.word	0x20000c08
    12cc:	8fffffff 	.word	0x8fffffff
    12d0:	2000077c 	.word	0x2000077c
    12d4:	20000754 	.word	0x20000754
    12d8:	00003b24 	.word	0x00003b24

000012dc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    12dc:	b570      	push	{r4, r5, r6, lr}
    12de:	0005      	movs	r5, r0
    12e0:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    12e2:	4b06      	ldr	r3, [pc, #24]	; (12fc <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    12e4:	00a2      	lsls	r2, r4, #2
    12e6:	58d2      	ldr	r2, [r2, r3]
    12e8:	2a00      	cmp	r2, #0
    12ea:	d005      	beq.n	12f8 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    12ec:	0021      	movs	r1, r4
    12ee:	0028      	movs	r0, r5
    12f0:	f7ff ff80 	bl	11f4 <_ZN14USBDeviceClass6initEPEmm>
    12f4:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    12f6:	e7f4      	b.n	12e2 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    12f8:	bd70      	pop	{r4, r5, r6, pc}
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	20000008 	.word	0x20000008

00001300 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    1300:	4b08      	ldr	r3, [pc, #32]	; (1324 <_ZN14USBDeviceClass9availableEm+0x24>)
    1302:	008a      	lsls	r2, r1, #2
    1304:	58d0      	ldr	r0, [r2, r3]
{
    1306:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    1308:	2800      	cmp	r0, #0
    130a:	d003      	beq.n	1314 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    130c:	6803      	ldr	r3, [r0, #0]
    130e:	689b      	ldr	r3, [r3, #8]
    1310:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    1312:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1314:	b2c9      	uxtb	r1, r1
    1316:	4b04      	ldr	r3, [pc, #16]	; (1328 <_ZN14USBDeviceClass9availableEm+0x28>)
    1318:	0149      	lsls	r1, r1, #5
    131a:	1859      	adds	r1, r3, r1
    131c:	6888      	ldr	r0, [r1, #8]
    131e:	0480      	lsls	r0, r0, #18
    1320:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    1322:	e7f6      	b.n	1312 <_ZN14USBDeviceClass9availableEm+0x12>
    1324:	20000754 	.word	0x20000754
    1328:	20000c08 	.word	0x20000c08

0000132c <_ZN14USBDeviceClass5flushEm>:
{
    132c:	b510      	push	{r4, lr}
    132e:	000c      	movs	r4, r1
	if (available(ep)) {
    1330:	f7ff ffe6 	bl	1300 <_ZN14USBDeviceClass9availableEm>
    1334:	2800      	cmp	r0, #0
    1336:	d00c      	beq.n	1352 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <_ZN14USBDeviceClass5flushEm+0x28>)
    133a:	b2e4      	uxtb	r4, r4
    133c:	681b      	ldr	r3, [r3, #0]
    133e:	3408      	adds	r4, #8
    1340:	0164      	lsls	r4, r4, #5
    1342:	191c      	adds	r4, r3, r4
    1344:	2380      	movs	r3, #128	; 0x80
    1346:	7962      	ldrb	r2, [r4, #5]
    1348:	425b      	negs	r3, r3
    134a:	4313      	orrs	r3, r2
    134c:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    134e:	2302      	movs	r3, #2
    1350:	71e3      	strb	r3, [r4, #7]
}
    1352:	bd10      	pop	{r4, pc}
    1354:	20000c08 	.word	0x20000c08

00001358 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    1358:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    135a:	4b13      	ldr	r3, [pc, #76]	; (13a8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    135c:	b2cc      	uxtb	r4, r1
    135e:	4a13      	ldr	r2, [pc, #76]	; (13ac <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    1360:	0160      	lsls	r0, r4, #5
    1362:	0189      	lsls	r1, r1, #6
    1364:	1859      	adds	r1, r3, r1
    1366:	1813      	adds	r3, r2, r0
    1368:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    136a:	6899      	ldr	r1, [r3, #8]
    136c:	4d10      	ldr	r5, [pc, #64]	; (13b0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    136e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1370:	400d      	ands	r5, r1
    1372:	2180      	movs	r1, #128	; 0x80
    1374:	0289      	lsls	r1, r1, #10
    1376:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1378:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    137a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    137c:	6899      	ldr	r1, [r3, #8]
    137e:	0b89      	lsrs	r1, r1, #14
    1380:	0389      	lsls	r1, r1, #14
    1382:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1384:	6811      	ldr	r1, [r2, #0]
    1386:	0163      	lsls	r3, r4, #5
    1388:	18cb      	adds	r3, r1, r3
    138a:	791e      	ldrb	r6, [r3, #4]
    138c:	4335      	orrs	r5, r6
    138e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    1390:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    1392:	066d      	lsls	r5, r5, #25
    1394:	d5fc      	bpl.n	1390 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1396:	0164      	lsls	r4, r4, #5
    1398:	1909      	adds	r1, r1, r4
    139a:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    139c:	07db      	lsls	r3, r3, #31
    139e:	d5fc      	bpl.n	139a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    13a0:	1812      	adds	r2, r2, r0
    13a2:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    13a4:	b2c0      	uxtb	r0, r0
}
    13a6:	bd70      	pop	{r4, r5, r6, pc}
    13a8:	2000093c 	.word	0x2000093c
    13ac:	20000c08 	.word	0x20000c08
    13b0:	f0003fff 	.word	0xf0003fff

000013b4 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    13b4:	b570      	push	{r4, r5, r6, lr}
    13b6:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    13b8:	2240      	movs	r2, #64	; 0x40
    13ba:	4b0b      	ldr	r3, [pc, #44]	; (13e8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    13bc:	000d      	movs	r5, r1
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	33ff      	adds	r3, #255	; 0xff
    13c2:	7959      	ldrb	r1, [r3, #5]
    13c4:	430a      	orrs	r2, r1
    13c6:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    13c8:	2100      	movs	r1, #0
    13ca:	f7ff ffc5 	bl	1358 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    13ce:	42a0      	cmp	r0, r4
    13d0:	d900      	bls.n	13d4 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    13d2:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    13d4:	2300      	movs	r3, #0
		data[i] = buffer[i];
    13d6:	4905      	ldr	r1, [pc, #20]	; (13ec <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    13d8:	42a3      	cmp	r3, r4
    13da:	d003      	beq.n	13e4 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    13dc:	5c5a      	ldrb	r2, [r3, r1]
    13de:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    13e0:	3301      	adds	r3, #1
    13e2:	e7f9      	b.n	13d8 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    13e4:	bd70      	pop	{r4, r5, r6, pc}
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	20000c08 	.word	0x20000c08
    13ec:	2000093c 	.word	0x2000093c

000013f0 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    13f0:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    13f2:	b2c9      	uxtb	r1, r1
    13f4:	480b      	ldr	r0, [pc, #44]	; (1424 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    13f6:	0149      	lsls	r1, r1, #5
    13f8:	1842      	adds	r2, r0, r1
    13fa:	6893      	ldr	r3, [r2, #8]
    13fc:	049b      	lsls	r3, r3, #18
    13fe:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    1400:	2b3f      	cmp	r3, #63	; 0x3f
    1402:	dd0b      	ble.n	141c <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1404:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    1406:	3b40      	subs	r3, #64	; 0x40
    1408:	049b      	lsls	r3, r3, #18
    140a:	0ba4      	lsrs	r4, r4, #14
    140c:	0c9b      	lsrs	r3, r3, #18
    140e:	03a4      	lsls	r4, r4, #14
    1410:	4323      	orrs	r3, r4
    1412:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1414:	1841      	adds	r1, r0, r1
    1416:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    1418:	b2c0      	uxtb	r0, r0
}
    141a:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    141c:	6893      	ldr	r3, [r2, #8]
    141e:	0b9b      	lsrs	r3, r3, #14
    1420:	039b      	lsls	r3, r3, #14
    1422:	e7f6      	b.n	1412 <_ZN14USBDeviceClass7armRecvEm+0x22>
    1424:	20000c08 	.word	0x20000c08

00001428 <_ZN14USBDeviceClass4recvEmPvm>:
{
    1428:	b5f0      	push	{r4, r5, r6, r7, lr}
    142a:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    142c:	4b30      	ldr	r3, [pc, #192]	; (14f0 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    142e:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1430:	681b      	ldr	r3, [r3, #0]
{
    1432:	0006      	movs	r6, r0
    1434:	000d      	movs	r5, r1
    1436:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    1438:	2b00      	cmp	r3, #0
    143a:	d055      	beq.n	14e8 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    143c:	4f2d      	ldr	r7, [pc, #180]	; (14f4 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    143e:	7839      	ldrb	r1, [r7, #0]
    1440:	b2c9      	uxtb	r1, r1
    1442:	2900      	cmp	r1, #0
    1444:	d102      	bne.n	144c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    1446:	2019      	movs	r0, #25
    1448:	f000 fdbe 	bl	1fc8 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    144c:	2364      	movs	r3, #100	; 0x64
    144e:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    1450:	4b29      	ldr	r3, [pc, #164]	; (14f8 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    1452:	00aa      	lsls	r2, r5, #2
    1454:	58d0      	ldr	r0, [r2, r3]
    1456:	2800      	cmp	r0, #0
    1458:	d008      	beq.n	146c <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    145a:	6803      	ldr	r3, [r0, #0]
    145c:	0022      	movs	r2, r4
    145e:	685b      	ldr	r3, [r3, #4]
    1460:	9901      	ldr	r1, [sp, #4]
    1462:	4798      	blx	r3
    1464:	0004      	movs	r4, r0
}
    1466:	0020      	movs	r0, r4
    1468:	b005      	add	sp, #20
    146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    146c:	0029      	movs	r1, r5
    146e:	0030      	movs	r0, r6
    1470:	f7ff ff46 	bl	1300 <_ZN14USBDeviceClass9availableEm>
    1474:	4284      	cmp	r4, r0
    1476:	d904      	bls.n	1482 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    1478:	0029      	movs	r1, r5
    147a:	0030      	movs	r0, r6
    147c:	f7ff ff40 	bl	1300 <_ZN14USBDeviceClass9availableEm>
    1480:	0004      	movs	r4, r0
	armRecv(ep);
    1482:	0029      	movs	r1, r5
    1484:	0030      	movs	r0, r6
    1486:	f7ff ffb3 	bl	13f0 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    148a:	2101      	movs	r1, #1
    148c:	b2eb      	uxtb	r3, r5
    148e:	4f1b      	ldr	r7, [pc, #108]	; (14fc <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    1490:	9303      	str	r3, [sp, #12]
    1492:	015b      	lsls	r3, r3, #5
    1494:	9302      	str	r3, [sp, #8]
    1496:	9a02      	ldr	r2, [sp, #8]
    1498:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    149a:	9801      	ldr	r0, [sp, #4]
    149c:	189b      	adds	r3, r3, r2
    149e:	33ff      	adds	r3, #255	; 0xff
    14a0:	7a5a      	ldrb	r2, [r3, #9]
    14a2:	430a      	orrs	r2, r1
    14a4:	4916      	ldr	r1, [pc, #88]	; (1500 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    14a6:	725a      	strb	r2, [r3, #9]
    14a8:	01ab      	lsls	r3, r5, #6
    14aa:	18c9      	adds	r1, r1, r3
    14ac:	0022      	movs	r2, r4
    14ae:	f002 fa0f 	bl	38d0 <memcpy>
	if (len && !available(ep)) {
    14b2:	2c00      	cmp	r4, #0
    14b4:	d0d7      	beq.n	1466 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    14b6:	0029      	movs	r1, r5
    14b8:	0030      	movs	r0, r6
    14ba:	f7ff ff21 	bl	1300 <_ZN14USBDeviceClass9availableEm>
    14be:	2800      	cmp	r0, #0
    14c0:	d1d1      	bne.n	1466 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14c2:	2140      	movs	r1, #64	; 0x40
    14c4:	9b03      	ldr	r3, [sp, #12]
    14c6:	683a      	ldr	r2, [r7, #0]
    14c8:	3308      	adds	r3, #8
    14ca:	015b      	lsls	r3, r3, #5
    14cc:	18d3      	adds	r3, r2, r3
    14ce:	7918      	ldrb	r0, [r3, #4]
    14d0:	4301      	orrs	r1, r0
    14d2:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    14d4:	2101      	movs	r1, #1
    14d6:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    14d8:	2101      	movs	r1, #1
    14da:	9b02      	ldr	r3, [sp, #8]
    14dc:	18d3      	adds	r3, r2, r3
    14de:	33ff      	adds	r3, #255	; 0xff
    14e0:	7a9a      	ldrb	r2, [r3, #10]
    14e2:	430a      	orrs	r2, r1
    14e4:	729a      	strb	r2, [r3, #10]
    14e6:	e7be      	b.n	1466 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    14e8:	2401      	movs	r4, #1
    14ea:	4264      	negs	r4, r4
    14ec:	e7bb      	b.n	1466 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	20000c00 	.word	0x20000c00
    14f4:	20000770 	.word	0x20000770
    14f8:	20000754 	.word	0x20000754
    14fc:	20000c08 	.word	0x20000c08
    1500:	2000093c 	.word	0x2000093c

00001504 <_ZN14USBDeviceClass4recvEm>:
{
    1504:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    1506:	466b      	mov	r3, sp
    1508:	1ddc      	adds	r4, r3, #7
    150a:	0022      	movs	r2, r4
    150c:	2301      	movs	r3, #1
    150e:	f7ff ff8b 	bl	1428 <_ZN14USBDeviceClass4recvEmPvm>
    1512:	2801      	cmp	r0, #1
    1514:	d101      	bne.n	151a <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    1516:	7820      	ldrb	r0, [r4, #0]
}
    1518:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    151a:	2001      	movs	r0, #1
    151c:	4240      	negs	r0, r0
    151e:	e7fb      	b.n	1518 <_ZN14USBDeviceClass4recvEm+0x14>

00001520 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    1520:	b5f0      	push	{r4, r5, r6, r7, lr}
    1522:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    1524:	4b3a      	ldr	r3, [pc, #232]	; (1610 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    1526:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1528:	681b      	ldr	r3, [r3, #0]
{
    152a:	000f      	movs	r7, r1
    152c:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    152e:	2b00      	cmp	r3, #0
    1530:	d03f      	beq.n	15b2 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    1532:	2380      	movs	r3, #128	; 0x80
    1534:	01db      	lsls	r3, r3, #7
    1536:	429e      	cmp	r6, r3
    1538:	d83b      	bhi.n	15b2 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    153a:	4c36      	ldr	r4, [pc, #216]	; (1614 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    153c:	7821      	ldrb	r1, [r4, #0]
    153e:	b2c9      	uxtb	r1, r1
    1540:	2900      	cmp	r1, #0
    1542:	d102      	bne.n	154a <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    1544:	201a      	movs	r0, #26
    1546:	f000 fd3f 	bl	1fc8 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    154a:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    154c:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    154e:	4a32      	ldr	r2, [pc, #200]	; (1618 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    1550:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1552:	01bb      	lsls	r3, r7, #6
    1554:	18d3      	adds	r3, r2, r3
    1556:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1558:	2e00      	cmp	r6, #0
    155a:	d02c      	beq.n	15b6 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    155c:	4b2f      	ldr	r3, [pc, #188]	; (161c <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	9303      	str	r3, [sp, #12]
    1562:	23ff      	movs	r3, #255	; 0xff
    1564:	403b      	ands	r3, r7
    1566:	001c      	movs	r4, r3
    1568:	9300      	str	r3, [sp, #0]
    156a:	3408      	adds	r4, #8
    156c:	9b03      	ldr	r3, [sp, #12]
    156e:	0164      	lsls	r4, r4, #5
    1570:	191c      	adds	r4, r3, r4
    1572:	79a3      	ldrb	r3, [r4, #6]
    1574:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    1576:	d021      	beq.n	15bc <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1578:	4b29      	ldr	r3, [pc, #164]	; (1620 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    157a:	492a      	ldr	r1, [pc, #168]	; (1624 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    157c:	6818      	ldr	r0, [r3, #0]
    157e:	f001 fa1f 	bl	29c0 <__udivsi3>
    1582:	4b29      	ldr	r3, [pc, #164]	; (1628 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1584:	2117      	movs	r1, #23
    1586:	4358      	muls	r0, r3
    1588:	f001 fa1a 	bl	29c0 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    158c:	4b27      	ldr	r3, [pc, #156]	; (162c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    158e:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    1590:	0792      	lsls	r2, r2, #30
    1592:	d413      	bmi.n	15bc <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1594:	5dda      	ldrb	r2, [r3, r7]
    1596:	2a00      	cmp	r2, #0
    1598:	d101      	bne.n	159e <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    159a:	3801      	subs	r0, #1
    159c:	d2f7      	bcs.n	158e <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    159e:	2201      	movs	r2, #1
    15a0:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    15a2:	9b00      	ldr	r3, [sp, #0]
    15a4:	015a      	lsls	r2, r3, #5
    15a6:	4b1d      	ldr	r3, [pc, #116]	; (161c <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    15a8:	189b      	adds	r3, r3, r2
    15aa:	699a      	ldr	r2, [r3, #24]
    15ac:	0b92      	lsrs	r2, r2, #14
    15ae:	0392      	lsls	r2, r2, #14
    15b0:	619a      	str	r2, [r3, #24]
					return -1;
    15b2:	2501      	movs	r5, #1
    15b4:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    15b6:	0028      	movs	r0, r5
    15b8:	b005      	add	sp, #20
    15ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    15bc:	2200      	movs	r2, #0
    15be:	4b1b      	ldr	r3, [pc, #108]	; (162c <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    15c0:	0034      	movs	r4, r6
    15c2:	55da      	strb	r2, [r3, r7]
    15c4:	2e3f      	cmp	r6, #63	; 0x3f
    15c6:	d900      	bls.n	15ca <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    15c8:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    15ca:	0022      	movs	r2, r4
    15cc:	9901      	ldr	r1, [sp, #4]
    15ce:	9802      	ldr	r0, [sp, #8]
    15d0:	f002 f97e 	bl	38d0 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    15d4:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    15d6:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    15d8:	015a      	lsls	r2, r3, #5
    15da:	4b10      	ldr	r3, [pc, #64]	; (161c <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    15dc:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    15de:	189b      	adds	r3, r3, r2
    15e0:	9a02      	ldr	r2, [sp, #8]
		written += length;
    15e2:	192d      	adds	r5, r5, r4
    15e4:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    15e6:	699a      	ldr	r2, [r3, #24]
		len -= length;
    15e8:	1b36      	subs	r6, r6, r4
    15ea:	0b92      	lsrs	r2, r2, #14
    15ec:	0392      	lsls	r2, r2, #14
    15ee:	430a      	orrs	r2, r1
    15f0:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    15f2:	9b00      	ldr	r3, [sp, #0]
    15f4:	9a03      	ldr	r2, [sp, #12]
    15f6:	3308      	adds	r3, #8
    15f8:	015b      	lsls	r3, r3, #5
    15fa:	18d3      	adds	r3, r2, r3
    15fc:	2202      	movs	r2, #2
    15fe:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1600:	7959      	ldrb	r1, [r3, #5]
    1602:	3a82      	subs	r2, #130	; 0x82
    1604:	430a      	orrs	r2, r1
    1606:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	191b      	adds	r3, r3, r4
    160c:	9301      	str	r3, [sp, #4]
	while (len != 0)
    160e:	e7a3      	b.n	1558 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    1610:	20000c00 	.word	0x20000c00
    1614:	20000771 	.word	0x20000771
    1618:	2000077c 	.word	0x2000077c
    161c:	20000c08 	.word	0x20000c08
    1620:	20000030 	.word	0x20000030
    1624:	000f4240 	.word	0x000f4240
    1628:	00011170 	.word	0x00011170
    162c:	20000773 	.word	0x20000773

00001630 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1630:	b570      	push	{r4, r5, r6, lr}
    1632:	000d      	movs	r5, r1
    1634:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1636:	4e0d      	ldr	r6, [pc, #52]	; (166c <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1638:	01ab      	lsls	r3, r5, #6
    163a:	18f6      	adds	r6, r6, r3
{
    163c:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    163e:	0030      	movs	r0, r6
    1640:	0022      	movs	r2, r4
    1642:	f002 f945 	bl	38d0 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1646:	b2ed      	uxtb	r5, r5
    1648:	4909      	ldr	r1, [pc, #36]	; (1670 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    164a:	016d      	lsls	r5, r5, #5
    164c:	194d      	adds	r5, r1, r5
    164e:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1650:	69ab      	ldr	r3, [r5, #24]
    1652:	4a08      	ldr	r2, [pc, #32]	; (1674 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1654:	0020      	movs	r0, r4
    1656:	4013      	ands	r3, r2
    1658:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    165a:	69ab      	ldr	r3, [r5, #24]
    165c:	04a2      	lsls	r2, r4, #18
    165e:	0b9b      	lsrs	r3, r3, #14
    1660:	0c92      	lsrs	r2, r2, #18
    1662:	039b      	lsls	r3, r3, #14
    1664:	4313      	orrs	r3, r2
    1666:	61ab      	str	r3, [r5, #24]
    1668:	bd70      	pop	{r4, r5, r6, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	2000077c 	.word	0x2000077c
    1670:	20000c08 	.word	0x20000c08
    1674:	f0003fff 	.word	0xf0003fff

00001678 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    167a:	4b10      	ldr	r3, [pc, #64]	; (16bc <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    167c:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    167e:	781b      	ldrb	r3, [r3, #0]
{
    1680:	000f      	movs	r7, r1
    1682:	0015      	movs	r5, r2
	if (_dry_run == true)
    1684:	2b00      	cmp	r3, #0
    1686:	d10c      	bne.n	16a2 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1688:	4b0d      	ldr	r3, [pc, #52]	; (16c0 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    168a:	0016      	movs	r6, r2
    168c:	781c      	ldrb	r4, [r3, #0]
    168e:	2c00      	cmp	r4, #0
    1690:	d009      	beq.n	16a6 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1692:	4e0c      	ldr	r6, [pc, #48]	; (16c4 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1694:	480c      	ldr	r0, [pc, #48]	; (16c8 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1696:	8834      	ldrh	r4, [r6, #0]
    1698:	1900      	adds	r0, r0, r4
		_pack_size += len;
    169a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    169c:	f002 f918 	bl	38d0 <memcpy>
		_pack_size += len;
    16a0:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    16a2:	0028      	movs	r0, r5
    16a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    16a6:	2e00      	cmp	r6, #0
    16a8:	d0fb      	beq.n	16a2 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    16aa:	193a      	adds	r2, r7, r4
    16ac:	0033      	movs	r3, r6
    16ae:	2100      	movs	r1, #0
    16b0:	9801      	ldr	r0, [sp, #4]
    16b2:	f7ff ffbd 	bl	1630 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    16b6:	1824      	adds	r4, r4, r0
		len -= sent;
    16b8:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    16ba:	e7f4      	b.n	16a6 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    16bc:	20000afc 	.word	0x20000afc
    16c0:	20000bfd 	.word	0x20000bfd
    16c4:	20000bfe 	.word	0x20000bfe
    16c8:	20000afd 	.word	0x20000afd

000016cc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    16cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    16ce:	2000      	movs	r0, #0
{
    16d0:	af00      	add	r7, sp, #0
    16d2:	000e      	movs	r6, r1
    16d4:	0015      	movs	r5, r2
	if (maxlen < 2)
    16d6:	2a01      	cmp	r2, #1
    16d8:	dd26      	ble.n	1728 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    16da:	1dd3      	adds	r3, r2, #7
    16dc:	466a      	mov	r2, sp
    16de:	08db      	lsrs	r3, r3, #3
    16e0:	00db      	lsls	r3, r3, #3
    16e2:	1ad3      	subs	r3, r2, r3
    16e4:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    16e6:	0008      	movs	r0, r1
    16e8:	f002 f974 	bl	39d4 <strlen>
	uint8_t buffer[maxlen];
    16ec:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    16ee:	2303      	movs	r3, #3
		buffer[i] = 0;
    16f0:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    16f2:	3001      	adds	r0, #1
    16f4:	0040      	lsls	r0, r0, #1
    16f6:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    16f8:	7063      	strb	r3, [r4, #1]
    16fa:	1e5a      	subs	r2, r3, #1
    16fc:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    16fe:	4295      	cmp	r5, r2
    1700:	dd0b      	ble.n	171a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    1702:	7830      	ldrb	r0, [r6, #0]
    1704:	2800      	cmp	r0, #0
    1706:	d008      	beq.n	171a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    1708:	3601      	adds	r6, #1
    170a:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    170c:	429d      	cmp	r5, r3
    170e:	d003      	beq.n	1718 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    1710:	54e1      	strb	r1, [r4, r3]
    1712:	3302      	adds	r3, #2
    1714:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    1716:	e7f0      	b.n	16fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    1718:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    171a:	0021      	movs	r1, r4
    171c:	4803      	ldr	r0, [pc, #12]	; (172c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    171e:	f7ff ffab 	bl	1678 <_ZN14USBDeviceClass11sendControlEPKvm>
    1722:	1e43      	subs	r3, r0, #1
    1724:	4198      	sbcs	r0, r3
    1726:	b2c0      	uxtb	r0, r0
}
    1728:	46bd      	mov	sp, r7
    172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    172c:	20000750 	.word	0x20000750

00001730 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1730:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1732:	2700      	movs	r7, #0
	_dry_run = true;
    1734:	2601      	movs	r6, #1
{
    1736:	b087      	sub	sp, #28
	_dry_run = true;
    1738:	4b1e      	ldr	r3, [pc, #120]	; (17b4 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    173a:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    173c:	a902      	add	r1, sp, #8
	_dry_run = true;
    173e:	701e      	strb	r6, [r3, #0]
{
    1740:	0005      	movs	r5, r0
	uint32_t total = 0;
    1742:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1744:	f7ff fc46 	bl	fd4 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1748:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    174a:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    174c:	2209      	movs	r2, #9
    174e:	0039      	movs	r1, r7
    1750:	0020      	movs	r0, r4
    1752:	f002 f8c6 	bl	38e2 <memset>
    1756:	2309      	movs	r3, #9
    1758:	7023      	strb	r3, [r4, #0]
    175a:	2302      	movs	r3, #2
    175c:	7063      	strb	r3, [r4, #1]
    175e:	339e      	adds	r3, #158	; 0x9e
    1760:	71e3      	strb	r3, [r4, #7]
    1762:	335a      	adds	r3, #90	; 0x5a
    1764:	7223      	strb	r3, [r4, #8]
    1766:	9b02      	ldr	r3, [sp, #8]
    1768:	7166      	strb	r6, [r4, #5]
    176a:	3309      	adds	r3, #9
    176c:	8063      	strh	r3, [r4, #2]
    176e:	466b      	mov	r3, sp
    1770:	791b      	ldrb	r3, [r3, #4]
    1772:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1774:	4b0f      	ldr	r3, [pc, #60]	; (17b4 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1776:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1778:	9b00      	ldr	r3, [sp, #0]
    177a:	2b09      	cmp	r3, #9
    177c:	d107      	bne.n	178e <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    177e:	001a      	movs	r2, r3
    1780:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1782:	0028      	movs	r0, r5
    1784:	f7ff ff78 	bl	1678 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1788:	2001      	movs	r0, #1
    178a:	b007      	add	sp, #28
    178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    178e:	4b0a      	ldr	r3, [pc, #40]	; (17b8 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1790:	2209      	movs	r2, #9
		_pack_message = true;
    1792:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1794:	4e09      	ldr	r6, [pc, #36]	; (17bc <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1796:	0021      	movs	r1, r4
    1798:	0028      	movs	r0, r5
	total = 0;
    179a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    179c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    179e:	f7ff ff6b 	bl	1678 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    17a2:	a902      	add	r1, sp, #8
    17a4:	0028      	movs	r0, r5
    17a6:	f7ff fc15 	bl	fd4 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    17aa:	4b03      	ldr	r3, [pc, #12]	; (17b8 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    17ac:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    17ae:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    17b0:	4903      	ldr	r1, [pc, #12]	; (17c0 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    17b2:	e7e6      	b.n	1782 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    17b4:	20000afc 	.word	0x20000afc
    17b8:	20000bfd 	.word	0x20000bfd
    17bc:	20000bfe 	.word	0x20000bfe
    17c0:	20000afd 	.word	0x20000afd

000017c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    17c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    17c6:	78ce      	ldrb	r6, [r1, #3]
{
    17c8:	b092      	sub	sp, #72	; 0x48
    17ca:	0005      	movs	r5, r0
    17cc:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    17ce:	2e02      	cmp	r6, #2
    17d0:	d108      	bne.n	17e4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    17d2:	88c9      	ldrh	r1, [r1, #6]
    17d4:	482b      	ldr	r0, [pc, #172]	; (1884 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    17d6:	f7ff ffab 	bl	1730 <_ZN14USBDeviceClass17sendConfigurationEm>
    17da:	1e43      	subs	r3, r0, #1
    17dc:	4198      	sbcs	r0, r3
    17de:	b2c0      	uxtb	r0, r0
}
    17e0:	b012      	add	sp, #72	; 0x48
    17e2:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    17e4:	f001 f8bc 	bl	2960 <_Z12PluggableUSBv>
    17e8:	0021      	movs	r1, r4
    17ea:	f001 f889 	bl	2900 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    17ee:	2800      	cmp	r0, #0
    17f0:	d003      	beq.n	17fa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    17f2:	17c3      	asrs	r3, r0, #31
    17f4:	1a18      	subs	r0, r3, r0
    17f6:	0fc0      	lsrs	r0, r0, #31
    17f8:	e7f2      	b.n	17e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    17fa:	2e01      	cmp	r6, #1
    17fc:	d10b      	bne.n	1816 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    17fe:	88e2      	ldrh	r2, [r4, #6]
    1800:	4921      	ldr	r1, [pc, #132]	; (1888 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    1802:	2a11      	cmp	r2, #17
    1804:	dc10      	bgt.n	1828 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    1806:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1808:	2a00      	cmp	r2, #0
    180a:	d00d      	beq.n	1828 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    180c:	0028      	movs	r0, r5
    180e:	f7ff ff33 	bl	1678 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1812:	2001      	movs	r0, #1
    1814:	e7e4      	b.n	17e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1816:	2e03      	cmp	r6, #3
    1818:	d1e2      	bne.n	17e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    181a:	78a3      	ldrb	r3, [r4, #2]
    181c:	2b00      	cmp	r3, #0
    181e:	d105      	bne.n	182c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    1820:	88e2      	ldrh	r2, [r4, #6]
    1822:	491a      	ldr	r1, [pc, #104]	; (188c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    1824:	2a03      	cmp	r2, #3
    1826:	ddee      	ble.n	1806 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    1828:	780a      	ldrb	r2, [r1, #0]
    182a:	e7ef      	b.n	180c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    182c:	2b02      	cmp	r3, #2
    182e:	d105      	bne.n	183c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1830:	79a2      	ldrb	r2, [r4, #6]
    1832:	4917      	ldr	r1, [pc, #92]	; (1890 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1834:	0028      	movs	r0, r5
    1836:	f7ff ff49 	bl	16cc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    183a:	e7d1      	b.n	17e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    183c:	2b01      	cmp	r3, #1
    183e:	d102      	bne.n	1846 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1840:	79a2      	ldrb	r2, [r4, #6]
    1842:	4914      	ldr	r1, [pc, #80]	; (1894 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    1844:	e7f6      	b.n	1834 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    1846:	2b03      	cmp	r3, #3
    1848:	d1ca      	bne.n	17e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    184a:	4b13      	ldr	r3, [pc, #76]	; (1898 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    184c:	a901      	add	r1, sp, #4
    184e:	6818      	ldr	r0, [r3, #0]
    1850:	f7ff f9b8 	bl	bc4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    1854:	4b11      	ldr	r3, [pc, #68]	; (189c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1856:	a903      	add	r1, sp, #12
    1858:	6818      	ldr	r0, [r3, #0]
    185a:	f7ff f9b3 	bl	bc4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    185e:	4b10      	ldr	r3, [pc, #64]	; (18a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1860:	a905      	add	r1, sp, #20
    1862:	6818      	ldr	r0, [r3, #0]
    1864:	f7ff f9ae 	bl	bc4 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    1868:	4b0e      	ldr	r3, [pc, #56]	; (18a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    186a:	a907      	add	r1, sp, #28
    186c:	6818      	ldr	r0, [r3, #0]
    186e:	f7ff f9a9 	bl	bc4 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    1872:	f001 f875 	bl	2960 <_Z12PluggableUSBv>
    1876:	a909      	add	r1, sp, #36	; 0x24
    1878:	f001 f852 	bl	2920 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    187c:	79a2      	ldrb	r2, [r4, #6]
    187e:	a901      	add	r1, sp, #4
    1880:	e7d8      	b.n	1834 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    1882:	46c0      	nop			; (mov r8, r8)
    1884:	20000750 	.word	0x20000750
    1888:	00003b4e 	.word	0x00003b4e
    188c:	00003b3e 	.word	0x00003b3e
    1890:	00003b30 	.word	0x00003b30
    1894:	00003b42 	.word	0x00003b42
    1898:	0080a00c 	.word	0x0080a00c
    189c:	0080a040 	.word	0x0080a040
    18a0:	0080a044 	.word	0x0080a044
    18a4:	0080a048 	.word	0x0080a048

000018a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    18a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    18aa:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    18ac:	7848      	ldrb	r0, [r1, #1]
{
    18ae:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    18b0:	280b      	cmp	r0, #11
    18b2:	d811      	bhi.n	18d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    18b4:	f001 f87a 	bl	29ac <__gnu_thumb1_case_uqi>
    18b8:	2e101d06 	.word	0x2e101d06
    18bc:	70484310 	.word	0x70484310
    18c0:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    18c4:	7809      	ldrb	r1, [r1, #0]
    18c6:	aa01      	add	r2, sp, #4
    18c8:	2900      	cmp	r1, #0
    18ca:	d107      	bne.n	18dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    18cc:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    18ce:	7011      	strb	r1, [r2, #0]
    18d0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    18d2:	0030      	movs	r0, r6
    18d4:	f7ff feac 	bl	1630 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    18d8:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    18da:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    18dc:	2300      	movs	r3, #0
    18de:	7013      	strb	r3, [r2, #0]
    18e0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    18e2:	4b2e      	ldr	r3, [pc, #184]	; (199c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    18e4:	781b      	ldrb	r3, [r3, #0]
    18e6:	2b01      	cmp	r3, #1
    18e8:	d100      	bne.n	18ec <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    18ea:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    18ec:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    18ee:	2100      	movs	r1, #0
    18f0:	e7ef      	b.n	18d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    18f2:	788a      	ldrb	r2, [r1, #2]
    18f4:	2300      	movs	r3, #0
    18f6:	2a01      	cmp	r2, #1
    18f8:	d104      	bne.n	1904 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    18fa:	aa01      	add	r2, sp, #4
    18fc:	7013      	strb	r3, [r2, #0]
    18fe:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1900:	4b27      	ldr	r3, [pc, #156]	; (19a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    1902:	e7ef      	b.n	18e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1904:	4a25      	ldr	r2, [pc, #148]	; (199c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1906:	7013      	strb	r3, [r2, #0]
    1908:	4a26      	ldr	r2, [pc, #152]	; (19a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    190a:	6993      	ldr	r3, [r2, #24]
    190c:	0b9b      	lsrs	r3, r3, #14
    190e:	039b      	lsls	r3, r3, #14
    1910:	6193      	str	r3, [r2, #24]
    1912:	e7e1      	b.n	18d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1914:	788c      	ldrb	r4, [r1, #2]
    1916:	2c01      	cmp	r4, #1
    1918:	d106      	bne.n	1928 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    191a:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    191c:	4b20      	ldr	r3, [pc, #128]	; (19a0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    191e:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1920:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1922:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1924:	0023      	movs	r3, r4
    1926:	e7d4      	b.n	18d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    1928:	2c00      	cmp	r4, #0
    192a:	d108      	bne.n	193e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    192c:	2001      	movs	r0, #1
    192e:	4b1b      	ldr	r3, [pc, #108]	; (199c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1930:	4a1c      	ldr	r2, [pc, #112]	; (19a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1932:	7018      	strb	r0, [r3, #0]
    1934:	6993      	ldr	r3, [r2, #24]
    1936:	0b9b      	lsrs	r3, r3, #14
    1938:	039b      	lsls	r3, r3, #14
    193a:	6193      	str	r3, [r2, #24]
			return true;
    193c:	e7cd      	b.n	18da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    193e:	78a9      	ldrb	r1, [r5, #2]
    1940:	0030      	movs	r0, r6
    1942:	f7ff fc11 	bl	1168 <_ZN14USBDeviceClass10setAddressEm>
    1946:	e7c7      	b.n	18d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1948:	0030      	movs	r0, r6
    194a:	f7ff ff3b 	bl	17c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    194e:	e7c4      	b.n	18da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1950:	2301      	movs	r3, #1
    1952:	4a15      	ldr	r2, [pc, #84]	; (19a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1954:	e7cb      	b.n	18ee <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1956:	780b      	ldrb	r3, [r1, #0]
			return false;
    1958:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    195a:	06db      	lsls	r3, r3, #27
    195c:	d1bd      	bne.n	18da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    195e:	0030      	movs	r0, r6
    1960:	f7ff fcbc 	bl	12dc <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1964:	202a      	movs	r0, #42	; 0x2a
    1966:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    1968:	78aa      	ldrb	r2, [r5, #2]
    196a:	4b0f      	ldr	r3, [pc, #60]	; (19a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    196c:	30ff      	adds	r0, #255	; 0xff
    196e:	601a      	str	r2, [r3, #0]
    1970:	4a0c      	ldr	r2, [pc, #48]	; (19a4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1972:	6813      	ldr	r3, [r2, #0]
    1974:	5c1c      	ldrb	r4, [r3, r0]
    1976:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1978:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    197a:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    197c:	34ff      	adds	r4, #255	; 0xff
    197e:	5d19      	ldrb	r1, [r3, r4]
    1980:	3829      	subs	r0, #41	; 0x29
    1982:	38ff      	subs	r0, #255	; 0xff
    1984:	4301      	orrs	r1, r0
    1986:	5519      	strb	r1, [r3, r4]
    1988:	e7d4      	b.n	1934 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    198a:	2301      	movs	r3, #1
    198c:	4a07      	ldr	r2, [pc, #28]	; (19ac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    198e:	e7ae      	b.n	18ee <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1990:	788a      	ldrb	r2, [r1, #2]
    1992:	4b06      	ldr	r3, [pc, #24]	; (19ac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1994:	601a      	str	r2, [r3, #0]
    1996:	e7b7      	b.n	1908 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1998:	2000      	movs	r0, #0
    199a:	e79e      	b.n	18da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    199c:	20000772 	.word	0x20000772
    19a0:	2000077a 	.word	0x2000077a
    19a4:	20000c08 	.word	0x20000c08
    19a8:	20000c00 	.word	0x20000c00
    19ac:	20000c04 	.word	0x20000c04

000019b0 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    19b0:	4b4c      	ldr	r3, [pc, #304]	; (1ae4 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    19b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    19b4:	781c      	ldrb	r4, [r3, #0]
{
    19b6:	0007      	movs	r7, r0
	if (_pack_message == true) {
    19b8:	2c00      	cmp	r4, #0
    19ba:	d000      	beq.n	19be <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    19bc:	e07d      	b.n	1aba <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    19be:	4e4a      	ldr	r6, [pc, #296]	; (1ae8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    19c0:	6833      	ldr	r3, [r6, #0]
    19c2:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    19c4:	071b      	lsls	r3, r3, #28
    19c6:	d50e      	bpl.n	19e6 <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    19c8:	0021      	movs	r1, r4
    19ca:	0020      	movs	r0, r4
    19cc:	f7ff f90c 	bl	be8 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    19d0:	6832      	ldr	r2, [r6, #0]
    19d2:	2310      	movs	r3, #16
    19d4:	0011      	movs	r1, r2
    19d6:	31ff      	adds	r1, #255	; 0xff
    19d8:	7a88      	ldrb	r0, [r1, #10]
    19da:	4303      	orrs	r3, r0
    19dc:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    19de:	4b43      	ldr	r3, [pc, #268]	; (1aec <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    19e0:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    19e2:	2308      	movs	r3, #8
    19e4:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    19e6:	6833      	ldr	r3, [r6, #0]
    19e8:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    19ea:	0752      	lsls	r2, r2, #29
    19ec:	d51f      	bpl.n	1a2e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    19ee:	2204      	movs	r2, #4
    19f0:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    19f2:	4a3f      	ldr	r2, [pc, #252]	; (1af0 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    19f4:	7813      	ldrb	r3, [r2, #0]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d00a      	beq.n	1a10 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    19fa:	7813      	ldrb	r3, [r2, #0]
    19fc:	3b01      	subs	r3, #1
    19fe:	b2db      	uxtb	r3, r3
    1a00:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1a02:	7813      	ldrb	r3, [r2, #0]
    1a04:	2b00      	cmp	r3, #0
    1a06:	d103      	bne.n	1a10 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    1a08:	2101      	movs	r1, #1
    1a0a:	201a      	movs	r0, #26
    1a0c:	f000 fadc 	bl	1fc8 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1a10:	4a38      	ldr	r2, [pc, #224]	; (1af4 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1a12:	7813      	ldrb	r3, [r2, #0]
    1a14:	2b00      	cmp	r3, #0
    1a16:	d00a      	beq.n	1a2e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    1a18:	7813      	ldrb	r3, [r2, #0]
    1a1a:	3b01      	subs	r3, #1
    1a1c:	b2db      	uxtb	r3, r3
    1a1e:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1a20:	7813      	ldrb	r3, [r2, #0]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d103      	bne.n	1a2e <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    1a26:	2101      	movs	r1, #1
    1a28:	2019      	movs	r0, #25
    1a2a:	f000 facd 	bl	1fc8 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1a2e:	6833      	ldr	r3, [r6, #0]
    1a30:	33ff      	adds	r3, #255	; 0xff
    1a32:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1a34:	06d2      	lsls	r2, r2, #27
    1a36:	d520      	bpl.n	1a7a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1a38:	2210      	movs	r2, #16
    1a3a:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1a3c:	7959      	ldrb	r1, [r3, #5]
    1a3e:	3230      	adds	r2, #48	; 0x30
    1a40:	430a      	orrs	r2, r1
    1a42:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1a44:	2360      	movs	r3, #96	; 0x60
    1a46:	492c      	ldr	r1, [pc, #176]	; (1af8 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    1a48:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1a4a:	780a      	ldrb	r2, [r1, #0]
    1a4c:	421a      	tst	r2, r3
    1a4e:	d135      	bne.n	1abc <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    1a50:	f7ff ff2a 	bl	18a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    1a54:	2800      	cmp	r0, #0
    1a56:	d034      	beq.n	1ac2 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1a58:	2280      	movs	r2, #128	; 0x80
    1a5a:	6833      	ldr	r3, [r6, #0]
    1a5c:	4252      	negs	r2, r2
    1a5e:	33ff      	adds	r3, #255	; 0xff
    1a60:	7999      	ldrb	r1, [r3, #6]
    1a62:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1a64:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1a66:	6833      	ldr	r3, [r6, #0]
    1a68:	33ff      	adds	r3, #255	; 0xff
    1a6a:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1a6c:	0652      	lsls	r2, r2, #25
    1a6e:	d504      	bpl.n	1a7a <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1a70:	2240      	movs	r2, #64	; 0x40
    1a72:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1a74:	7a59      	ldrb	r1, [r3, #9]
    1a76:	430a      	orrs	r2, r1
    1a78:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1a7a:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    1a7c:	2500      	movs	r5, #0
    1a7e:	8c1c      	ldrh	r4, [r3, #32]
    1a80:	2301      	movs	r3, #1
    1a82:	439c      	bics	r4, r3
    1a84:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1a86:	9301      	str	r3, [sp, #4]
    1a88:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    1a8a:	2c00      	cmp	r4, #0
    1a8c:	d015      	beq.n	1aba <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
		if ((ept_int & (1 << i)) != 0)
    1a8e:	0023      	movs	r3, r4
    1a90:	412b      	asrs	r3, r5
    1a92:	9a01      	ldr	r2, [sp, #4]
    1a94:	4213      	tst	r3, r2
    1a96:	d00d      	beq.n	1ab4 <_ZN14USBDeviceClass10ISRHandlerEv+0x104>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1a98:	002b      	movs	r3, r5
    1a9a:	6832      	ldr	r2, [r6, #0]
    1a9c:	3308      	adds	r3, #8
    1a9e:	015b      	lsls	r3, r3, #5
    1aa0:	18d3      	adds	r3, r2, r3
    1aa2:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    1aa4:	07d2      	lsls	r2, r2, #31
    1aa6:	d413      	bmi.n	1ad0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1aa8:	79db      	ldrb	r3, [r3, #7]
    1aaa:	079b      	lsls	r3, r3, #30
    1aac:	d410      	bmi.n	1ad0 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    1aae:	9b01      	ldr	r3, [sp, #4]
    1ab0:	40ab      	lsls	r3, r5
    1ab2:	439c      	bics	r4, r3
    1ab4:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    1ab6:	2d09      	cmp	r5, #9
    1ab8:	d1e6      	bne.n	1a88 <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			break;  // fire exit
	}
}
    1aba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    1abc:	f7ff fb78 	bl	11b0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1ac0:	e7c8      	b.n	1a54 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1ac2:	2220      	movs	r2, #32
    1ac4:	4b0d      	ldr	r3, [pc, #52]	; (1afc <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1ac6:	e7cd      	b.n	1a64 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
					epHandlers[i]->handleEndpoint();
    1ac8:	6803      	ldr	r3, [r0, #0]
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	4798      	blx	r3
    1ace:	e7ee      	b.n	1aae <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
				if (epHandlers[i]) {
    1ad0:	4b0b      	ldr	r3, [pc, #44]	; (1b00 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    1ad2:	00aa      	lsls	r2, r5, #2
    1ad4:	58d0      	ldr	r0, [r2, r3]
    1ad6:	2800      	cmp	r0, #0
    1ad8:	d1f6      	bne.n	1ac8 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
					handleEndpoint(i);
    1ada:	0038      	movs	r0, r7
    1adc:	f7ff fa90 	bl	1000 <_ZN14USBDeviceClass14handleEndpointEh>
    1ae0:	e7e5      	b.n	1aae <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	20000bfd 	.word	0x20000bfd
    1ae8:	20000c08 	.word	0x20000c08
    1aec:	20000c00 	.word	0x20000c00
    1af0:	20000771 	.word	0x20000771
    1af4:	20000770 	.word	0x20000770
    1af8:	2000093c 	.word	0x2000093c
    1afc:	410050ff 	.word	0x410050ff
    1b00:	20000754 	.word	0x20000754

00001b04 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1b04:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1b06:	4802      	ldr	r0, [pc, #8]	; (1b10 <UDD_Handler+0xc>)
    1b08:	f7ff ff52 	bl	19b0 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1b0c:	bd10      	pop	{r4, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	20000750 	.word	0x20000750

00001b14 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1b14:	4a01      	ldr	r2, [pc, #4]	; (1b1c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    1b16:	4b02      	ldr	r3, [pc, #8]	; (1b20 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1b18:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1b1a:	4770      	bx	lr
    1b1c:	41005000 	.word	0x41005000
    1b20:	20000c08 	.word	0x20000c08

00001b24 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1b24:	21fa      	movs	r1, #250	; 0xfa
    1b26:	4b31      	ldr	r3, [pc, #196]	; (1bec <init+0xc8>)
{
    1b28:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1b2a:	6818      	ldr	r0, [r3, #0]
    1b2c:	0089      	lsls	r1, r1, #2
    1b2e:	f000 ff47 	bl	29c0 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1b32:	4b2f      	ldr	r3, [pc, #188]	; (1bf0 <init+0xcc>)
    1b34:	3801      	subs	r0, #1
    1b36:	4298      	cmp	r0, r3
    1b38:	d856      	bhi.n	1be8 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1b3a:	492e      	ldr	r1, [pc, #184]	; (1bf4 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b3c:	4a2e      	ldr	r2, [pc, #184]	; (1bf8 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1b3e:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b40:	20c0      	movs	r0, #192	; 0xc0
    1b42:	6a13      	ldr	r3, [r2, #32]
    1b44:	0600      	lsls	r0, r0, #24
    1b46:	021b      	lsls	r3, r3, #8
    1b48:	0a1b      	lsrs	r3, r3, #8
    1b4a:	4303      	orrs	r3, r0
    1b4c:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1b4e:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1b50:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1b52:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1b54:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1b56:	2180      	movs	r1, #128	; 0x80
    1b58:	6a13      	ldr	r3, [r2, #32]
    1b5a:	0609      	lsls	r1, r1, #24
    1b5c:	021b      	lsls	r3, r3, #8
    1b5e:	0a1b      	lsrs	r3, r3, #8
    1b60:	430b      	orrs	r3, r1
    1b62:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1b64:	22fc      	movs	r2, #252	; 0xfc
    1b66:	4b25      	ldr	r3, [pc, #148]	; (1bfc <init+0xd8>)
    1b68:	6a19      	ldr	r1, [r3, #32]
    1b6a:	430a      	orrs	r2, r1
    1b6c:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1b6e:	22fc      	movs	r2, #252	; 0xfc
    1b70:	6a19      	ldr	r1, [r3, #32]
    1b72:	0192      	lsls	r2, r2, #6
    1b74:	430a      	orrs	r2, r1
    1b76:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1b78:	22a0      	movs	r2, #160	; 0xa0
    1b7a:	6a19      	ldr	r1, [r3, #32]
    1b7c:	02d2      	lsls	r2, r2, #11
    1b7e:	430a      	orrs	r2, r1
    1b80:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1b82:	0020      	movs	r0, r4
    1b84:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1b86:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1b88:	f000 f9d2 	bl	1f30 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1b8c:	2c14      	cmp	r4, #20
    1b8e:	d1f8      	bne.n	1b82 <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1b90:	4b1b      	ldr	r3, [pc, #108]	; (1c00 <init+0xdc>)
    1b92:	001c      	movs	r4, r3
    1b94:	785a      	ldrb	r2, [r3, #1]
    1b96:	b252      	sxtb	r2, r2
    1b98:	2a00      	cmp	r2, #0
    1b9a:	dbfb      	blt.n	1b94 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1b9c:	4a19      	ldr	r2, [pc, #100]	; (1c04 <init+0xe0>)
    1b9e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1ba0:	4b19      	ldr	r3, [pc, #100]	; (1c08 <init+0xe4>)
    1ba2:	001a      	movs	r2, r3
    1ba4:	7e59      	ldrb	r1, [r3, #25]
    1ba6:	09c9      	lsrs	r1, r1, #7
    1ba8:	2901      	cmp	r1, #1
    1baa:	d0fb      	beq.n	1ba4 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1bac:	21e4      	movs	r1, #228	; 0xe4
    1bae:	00c9      	lsls	r1, r1, #3
    1bb0:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1bb2:	213f      	movs	r1, #63	; 0x3f
    1bb4:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1bb6:	7e53      	ldrb	r3, [r2, #25]
    1bb8:	09db      	lsrs	r3, r3, #7
    1bba:	2b01      	cmp	r3, #1
    1bbc:	d0fb      	beq.n	1bb6 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1bbe:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1bc0:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1bc2:	015b      	lsls	r3, r3, #5
    1bc4:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1bc6:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1bc8:	f000 f82e 	bl	1c28 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1bcc:	7863      	ldrb	r3, [r4, #1]
    1bce:	b25b      	sxtb	r3, r3
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	dbfb      	blt.n	1bcc <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1bd4:	4b0d      	ldr	r3, [pc, #52]	; (1c0c <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1bd6:	4a0e      	ldr	r2, [pc, #56]	; (1c10 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1bd8:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1bda:	79d3      	ldrb	r3, [r2, #7]
    1bdc:	09db      	lsrs	r3, r3, #7
    1bde:	2b01      	cmp	r3, #1
    1be0:	d0fb      	beq.n	1bda <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1be2:	2341      	movs	r3, #65	; 0x41
    1be4:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1be6:	bd10      	pop	{r4, pc}
    1be8:	e7fe      	b.n	1be8 <init+0xc4>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	20000030 	.word	0x20000030
    1bf0:	00ffffff 	.word	0x00ffffff
    1bf4:	e000e010 	.word	0xe000e010
    1bf8:	e000ed00 	.word	0xe000ed00
    1bfc:	40000400 	.word	0x40000400
    1c00:	40000c00 	.word	0x40000c00
    1c04:	0000401e 	.word	0x0000401e
    1c08:	42004000 	.word	0x42004000
    1c0c:	00004021 	.word	0x00004021
    1c10:	42004800 	.word	0x42004800

00001c14 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    1c14:	4291      	cmp	r1, r2
    1c16:	d002      	beq.n	1c1e <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    1c18:	d902      	bls.n	1c20 <mapResolution+0xc>
    return value >> (from-to);
    1c1a:	1a8a      	subs	r2, r1, r2
    1c1c:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    1c1e:	4770      	bx	lr
  return value << (to-from);
    1c20:	1a52      	subs	r2, r2, r1
    1c22:	4090      	lsls	r0, r2
    1c24:	e7fb      	b.n	1c1e <mapResolution+0xa>
	...

00001c28 <analogReference>:
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1c28:	4a16      	ldr	r2, [pc, #88]	; (1c84 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1c2a:	b500      	push	{lr}
    1c2c:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1c2e:	7e51      	ldrb	r1, [r2, #25]
    1c30:	09c9      	lsrs	r1, r1, #7
    1c32:	2901      	cmp	r1, #1
    1c34:	d0fb      	beq.n	1c2e <analogReference+0x6>
  syncADC();
  switch (mode)
    1c36:	3801      	subs	r0, #1
    1c38:	2804      	cmp	r0, #4
    1c3a:	d816      	bhi.n	1c6a <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1c3c:	6919      	ldr	r1, [r3, #16]
    1c3e:	4a12      	ldr	r2, [pc, #72]	; (1c88 <analogReference+0x60>)
    1c40:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c42:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1c44:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c46:	785a      	ldrb	r2, [r3, #1]
    1c48:	438a      	bics	r2, r1
  switch (mode)
    1c4a:	f000 feaf 	bl	29ac <__gnu_thumb1_case_uqi>
    1c4e:	0803      	.short	0x0803
    1c50:	0b06      	.short	0x0b06
    1c52:	03          	.byte	0x03
    1c53:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1c54:	0011      	movs	r1, r2
    1c56:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c58:	430a      	orrs	r2, r1
    1c5a:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1c5c:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1c5e:	0011      	movs	r1, r2
    1c60:	2203      	movs	r2, #3
    1c62:	e7f9      	b.n	1c58 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c64:	0011      	movs	r1, r2
    1c66:	2202      	movs	r2, #2
    1c68:	e7f6      	b.n	1c58 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1c6a:	23f0      	movs	r3, #240	; 0xf0
    1c6c:	6911      	ldr	r1, [r2, #16]
    1c6e:	051b      	lsls	r3, r3, #20
    1c70:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c72:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1c74:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1c76:	7853      	ldrb	r3, [r2, #1]
    1c78:	438b      	bics	r3, r1
    1c7a:	0019      	movs	r1, r3
    1c7c:	2302      	movs	r3, #2
    1c7e:	430b      	orrs	r3, r1
    1c80:	7053      	strb	r3, [r2, #1]
}
    1c82:	e7eb      	b.n	1c5c <analogReference+0x34>
    1c84:	42004000 	.word	0x42004000
    1c88:	f0ffffff 	.word	0xf0ffffff

00001c8c <analogRead>:

uint32_t analogRead(uint32_t pin)
{
    1c8c:	b510      	push	{r4, lr}
    1c8e:	0004      	movs	r4, r0
  uint32_t valueRead = 0;

  if (pin < A0) {
    1c90:	280d      	cmp	r0, #13
    1c92:	d800      	bhi.n	1c96 <analogRead+0xa>
    pin += A0;
    1c94:	340e      	adds	r4, #14
  }

  pinPeripheral(pin, PIO_ANALOG);
    1c96:	2101      	movs	r1, #1
    1c98:	0020      	movs	r0, r4
    1c9a:	f000 f9c1 	bl	2020 <pinPeripheral>

  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    1c9e:	2c0e      	cmp	r4, #14
    1ca0:	d10d      	bne.n	1cbe <analogRead+0x32>
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1ca2:	4b28      	ldr	r3, [pc, #160]	; (1d44 <analogRead+0xb8>)
    1ca4:	0019      	movs	r1, r3
    1ca6:	79da      	ldrb	r2, [r3, #7]
    1ca8:	09d2      	lsrs	r2, r2, #7
    1caa:	2a01      	cmp	r2, #1
    1cac:	d0fb      	beq.n	1ca6 <analogRead+0x1a>
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    1cae:	2002      	movs	r0, #2
    1cb0:	781a      	ldrb	r2, [r3, #0]
    1cb2:	4382      	bics	r2, r0
    1cb4:	701a      	strb	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1cb6:	79cb      	ldrb	r3, [r1, #7]
    1cb8:	09db      	lsrs	r3, r3, #7
    1cba:	2b01      	cmp	r3, #1
    1cbc:	d0fb      	beq.n	1cb6 <analogRead+0x2a>
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1cbe:	4922      	ldr	r1, [pc, #136]	; (1d48 <analogRead+0xbc>)
    1cc0:	000b      	movs	r3, r1
    1cc2:	7e4a      	ldrb	r2, [r1, #25]
    1cc4:	09d2      	lsrs	r2, r2, #7
    1cc6:	2a01      	cmp	r2, #1
    1cc8:	d0fb      	beq.n	1cc2 <analogRead+0x36>
    //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
    syncDAC();
  }

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    1cca:	2218      	movs	r2, #24
    1ccc:	4362      	muls	r2, r4
    1cce:	4c1f      	ldr	r4, [pc, #124]	; (1d4c <analogRead+0xc0>)
    1cd0:	18a4      	adds	r4, r4, r2
    1cd2:	7c20      	ldrb	r0, [r4, #16]
    1cd4:	241f      	movs	r4, #31
    1cd6:	690a      	ldr	r2, [r1, #16]
    1cd8:	4020      	ands	r0, r4
    1cda:	43a2      	bics	r2, r4
    1cdc:	4302      	orrs	r2, r0
    1cde:	610a      	str	r2, [r1, #16]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1ce0:	7e5a      	ldrb	r2, [r3, #25]
    1ce2:	09d2      	lsrs	r2, r2, #7
    1ce4:	2a01      	cmp	r2, #1
    1ce6:	d0fb      	beq.n	1ce0 <analogRead+0x54>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    1ce8:	2202      	movs	r2, #2
    1cea:	7819      	ldrb	r1, [r3, #0]
    1cec:	430a      	orrs	r2, r1
    1cee:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1cf0:	7e5a      	ldrb	r2, [r3, #25]
    1cf2:	09d2      	lsrs	r2, r2, #7
    1cf4:	2a01      	cmp	r2, #1
    1cf6:	d0fb      	beq.n	1cf0 <analogRead+0x64>

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    1cf8:	2202      	movs	r2, #2
    1cfa:	7b19      	ldrb	r1, [r3, #12]
    1cfc:	430a      	orrs	r2, r1
    1cfe:	731a      	strb	r2, [r3, #12]

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1d00:	2201      	movs	r2, #1
    1d02:	761a      	strb	r2, [r3, #24]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1d04:	7e5a      	ldrb	r2, [r3, #25]
    1d06:	09d2      	lsrs	r2, r2, #7
    1d08:	2a01      	cmp	r2, #1
    1d0a:	d0fb      	beq.n	1d04 <analogRead+0x78>

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    1d0c:	2202      	movs	r2, #2
    1d0e:	7b19      	ldrb	r1, [r3, #12]
    1d10:	430a      	orrs	r2, r1
    1d12:	731a      	strb	r2, [r3, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    1d14:	7e1a      	ldrb	r2, [r3, #24]
    1d16:	07d2      	lsls	r2, r2, #31
    1d18:	d5fc      	bpl.n	1d14 <analogRead+0x88>
  valueRead = ADC->RESULT.reg;
    1d1a:	8b58      	ldrh	r0, [r3, #26]
    1d1c:	b280      	uxth	r0, r0
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1d1e:	7e5a      	ldrb	r2, [r3, #25]
    1d20:	09d2      	lsrs	r2, r2, #7
    1d22:	2a01      	cmp	r2, #1
    1d24:	d0fb      	beq.n	1d1e <analogRead+0x92>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    1d26:	2102      	movs	r1, #2
    1d28:	781a      	ldrb	r2, [r3, #0]
    1d2a:	438a      	bics	r2, r1
    1d2c:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1d2e:	7e5a      	ldrb	r2, [r3, #25]
    1d30:	09d2      	lsrs	r2, r2, #7
    1d32:	2a01      	cmp	r2, #1
    1d34:	d0fb      	beq.n	1d2e <analogRead+0xa2>
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    1d36:	4b06      	ldr	r3, [pc, #24]	; (1d50 <analogRead+0xc4>)
    1d38:	681a      	ldr	r2, [r3, #0]
    1d3a:	4b06      	ldr	r3, [pc, #24]	; (1d54 <analogRead+0xc8>)
    1d3c:	6819      	ldr	r1, [r3, #0]
    1d3e:	f7ff ff69 	bl	1c14 <mapResolution>
}
    1d42:	bd10      	pop	{r4, pc}
    1d44:	42004800 	.word	0x42004800
    1d48:	42004000 	.word	0x42004000
    1d4c:	00003b70 	.word	0x00003b70
    1d50:	20000038 	.word	0x20000038
    1d54:	20000034 	.word	0x20000034

00001d58 <analogWrite>:
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint32_t pin, uint32_t value)
{
  PinDescription pinDesc = g_APinDescription[pin];
    1d58:	2318      	movs	r3, #24
    1d5a:	4343      	muls	r3, r0
{
    1d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  PinDescription pinDesc = g_APinDescription[pin];
    1d5e:	4a6b      	ldr	r2, [pc, #428]	; (1f0c <analogWrite+0x1b4>)
{
    1d60:	b087      	sub	sp, #28
  PinDescription pinDesc = g_APinDescription[pin];
    1d62:	189b      	adds	r3, r3, r2
    1d64:	68da      	ldr	r2, [r3, #12]
{
    1d66:	0006      	movs	r6, r0
    1d68:	000c      	movs	r4, r1
  PinDescription pinDesc = g_APinDescription[pin];
    1d6a:	9200      	str	r2, [sp, #0]
  uint32_t attr = pinDesc.ulPinAttribute;

  if ((attr & PIN_ATTR_ANALOG) == PIN_ATTR_ANALOG)
    1d6c:	0792      	lsls	r2, r2, #30
    1d6e:	d51e      	bpl.n	1dae <analogWrite+0x56>
  {
    // DAC handling code

    if (pin != PIN_A0) { // Only 1 DAC on A0 (PA02)
    1d70:	280e      	cmp	r0, #14
    1d72:	d11a      	bne.n	1daa <analogWrite+0x52>
      return;
    }

    value = mapResolution(value, _writeResolution, 10);
    1d74:	4b66      	ldr	r3, [pc, #408]	; (1f10 <analogWrite+0x1b8>)
    1d76:	220a      	movs	r2, #10
    1d78:	6819      	ldr	r1, [r3, #0]
    1d7a:	0020      	movs	r0, r4
    1d7c:	f7ff ff4a 	bl	1c14 <mapResolution>
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1d80:	4a64      	ldr	r2, [pc, #400]	; (1f14 <analogWrite+0x1bc>)
    1d82:	0013      	movs	r3, r2
    1d84:	79d1      	ldrb	r1, [r2, #7]
    1d86:	09c9      	lsrs	r1, r1, #7
    1d88:	2901      	cmp	r1, #1
    1d8a:	d0fb      	beq.n	1d84 <analogWrite+0x2c>

    syncDAC();
    DAC->DATA.reg = value & 0x3FF;  // DAC on 10 bits.
    1d8c:	0580      	lsls	r0, r0, #22
    1d8e:	0d80      	lsrs	r0, r0, #22
    1d90:	8110      	strh	r0, [r2, #8]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1d92:	79da      	ldrb	r2, [r3, #7]
    1d94:	09d2      	lsrs	r2, r2, #7
    1d96:	2a01      	cmp	r2, #1
    1d98:	d0fb      	beq.n	1d92 <analogWrite+0x3a>
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC
    1d9a:	2202      	movs	r2, #2
    1d9c:	7819      	ldrb	r1, [r3, #0]
    1d9e:	430a      	orrs	r2, r1
    1da0:	701a      	strb	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1da2:	79da      	ldrb	r2, [r3, #7]
    1da4:	09d2      	lsrs	r2, r2, #7
    1da6:	2a01      	cmp	r2, #1
    1da8:	d0fb      	beq.n	1da2 <analogWrite+0x4a>
  if (value < 128) {
    digitalWrite(pin, LOW);
  } else {
    digitalWrite(pin, HIGH);
  }
}
    1daa:	b007      	add	sp, #28
    1dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((attr & PIN_ATTR_PWM) == PIN_ATTR_PWM)
    1dae:	2708      	movs	r7, #8
    1db0:	9a00      	ldr	r2, [sp, #0]
    1db2:	4d57      	ldr	r5, [pc, #348]	; (1f10 <analogWrite+0x1b8>)
    1db4:	403a      	ands	r2, r7
    1db6:	9201      	str	r2, [sp, #4]
    1db8:	d100      	bne.n	1dbc <analogWrite+0x64>
    1dba:	e096      	b.n	1eea <analogWrite+0x192>
  PinDescription pinDesc = g_APinDescription[pin];
    1dbc:	2212      	movs	r2, #18
    1dbe:	5e9b      	ldrsh	r3, [r3, r2]
    value = mapResolution(value, _writeResolution, 16);
    1dc0:	6829      	ldr	r1, [r5, #0]
    1dc2:	0020      	movs	r0, r4
    1dc4:	2210      	movs	r2, #16
  PinDescription pinDesc = g_APinDescription[pin];
    1dc6:	9301      	str	r3, [sp, #4]
    value = mapResolution(value, _writeResolution, 16);
    1dc8:	f7ff ff24 	bl	1c14 <mapResolution>
    uint32_t tcNum = GetTCNumber(pinDesc.ulPWMChannel);
    1dcc:	9b01      	ldr	r3, [sp, #4]
    value = mapResolution(value, _writeResolution, 16);
    1dce:	0005      	movs	r5, r0
    uint32_t tcNum = GetTCNumber(pinDesc.ulPWMChannel);
    1dd0:	121f      	asrs	r7, r3, #8
    uint8_t tcChannel = GetTCChannelNumber(pinDesc.ulPWMChannel);
    1dd2:	466b      	mov	r3, sp
    1dd4:	791c      	ldrb	r4, [r3, #4]
    if (attr & PIN_ATTR_TIMER) {
    1dd6:	9b00      	ldr	r3, [sp, #0]
        pinPeripheral(pin, PIO_TIMER);
    1dd8:	2104      	movs	r1, #4
    if (attr & PIN_ATTR_TIMER) {
    1dda:	06db      	lsls	r3, r3, #27
    1ddc:	d400      	bmi.n	1de0 <analogWrite+0x88>
      pinPeripheral(pin, PIO_TIMER_ALT);
    1dde:	2105      	movs	r1, #5
    1de0:	0030      	movs	r0, r6
    1de2:	f000 f91d 	bl	2020 <pinPeripheral>
    if (!tcEnabled[tcNum]) {
    1de6:	4b4c      	ldr	r3, [pc, #304]	; (1f18 <analogWrite+0x1c0>)
    1de8:	5dda      	ldrb	r2, [r3, r7]
    1dea:	2a00      	cmp	r2, #0
    1dec:	d158      	bne.n	1ea0 <analogWrite+0x148>
      tcEnabled[tcNum] = true;
    1dee:	3201      	adds	r2, #1
    1df0:	55da      	strb	r2, [r3, r7]
      uint16_t GCLK_CLKCTRL_IDs[] = {
    1df2:	494a      	ldr	r1, [pc, #296]	; (1f1c <analogWrite+0x1c4>)
    1df4:	320f      	adds	r2, #15
    1df6:	a802      	add	r0, sp, #8
    1df8:	f001 fd6a 	bl	38d0 <memcpy>
      GCLK->CLKCTRL.reg = (uint16_t) (GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_IDs[tcNum]);
    1dfc:	aa02      	add	r2, sp, #8
    1dfe:	007b      	lsls	r3, r7, #1
    1e00:	5a9b      	ldrh	r3, [r3, r2]
    1e02:	2280      	movs	r2, #128	; 0x80
    1e04:	01d2      	lsls	r2, r2, #7
    1e06:	431a      	orrs	r2, r3
    1e08:	4b45      	ldr	r3, [pc, #276]	; (1f20 <analogWrite+0x1c8>)
    1e0a:	805a      	strh	r2, [r3, #2]
      while (GCLK->STATUS.bit.SYNCBUSY == 1);
    1e0c:	785a      	ldrb	r2, [r3, #1]
    1e0e:	09d2      	lsrs	r2, r2, #7
    1e10:	2a01      	cmp	r2, #1
    1e12:	d0fb      	beq.n	1e0c <analogWrite+0xb4>
    1e14:	4a43      	ldr	r2, [pc, #268]	; (1f24 <analogWrite+0x1cc>)
    1e16:	00bb      	lsls	r3, r7, #2
        Tc* TCx = (Tc*) GetTC(pinDesc.ulPWMChannel);
    1e18:	58d3      	ldr	r3, [r2, r3]
      if (tcNum >= TCC_INST_NUM) {
    1e1a:	2f02      	cmp	r7, #2
    1e1c:	d91c      	bls.n	1e58 <analogWrite+0x100>
        TCx->COUNT16.CTRLA.bit.ENABLE = 0;
    1e1e:	2102      	movs	r1, #2
    1e20:	881a      	ldrh	r2, [r3, #0]
    1e22:	438a      	bics	r2, r1
    1e24:	801a      	strh	r2, [r3, #0]
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1e26:	7bda      	ldrb	r2, [r3, #15]
    1e28:	09d2      	lsrs	r2, r2, #7
    1e2a:	d1fc      	bne.n	1e26 <analogWrite+0xce>
        TCx->COUNT16.CTRLA.reg |= TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_NPWM;
    1e2c:	8819      	ldrh	r1, [r3, #0]
    1e2e:	3240      	adds	r2, #64	; 0x40
    1e30:	430a      	orrs	r2, r1
    1e32:	801a      	strh	r2, [r3, #0]
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1e34:	7bda      	ldrb	r2, [r3, #15]
    1e36:	09d2      	lsrs	r2, r2, #7
    1e38:	d1fc      	bne.n	1e34 <analogWrite+0xdc>
        TCx->COUNT16.CC[tcChannel].reg = (uint32_t) value;
    1e3a:	340c      	adds	r4, #12
    1e3c:	b2ad      	uxth	r5, r5
    1e3e:	0064      	lsls	r4, r4, #1
    1e40:	52e5      	strh	r5, [r4, r3]
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1e42:	7bda      	ldrb	r2, [r3, #15]
    1e44:	09d2      	lsrs	r2, r2, #7
    1e46:	d1fc      	bne.n	1e42 <analogWrite+0xea>
        TCx->COUNT16.CTRLA.bit.ENABLE = 1;
    1e48:	8819      	ldrh	r1, [r3, #0]
    1e4a:	3202      	adds	r2, #2
    1e4c:	430a      	orrs	r2, r1
    1e4e:	801a      	strh	r2, [r3, #0]
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1e50:	7bda      	ldrb	r2, [r3, #15]
    1e52:	09d2      	lsrs	r2, r2, #7
    1e54:	d1fc      	bne.n	1e50 <analogWrite+0xf8>
    1e56:	e7a8      	b.n	1daa <analogWrite+0x52>
        TCCx->CTRLA.bit.ENABLE = 0;
    1e58:	2102      	movs	r1, #2
    1e5a:	681a      	ldr	r2, [r3, #0]
    1e5c:	438a      	bics	r2, r1
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1e5e:	4932      	ldr	r1, [pc, #200]	; (1f28 <analogWrite+0x1d0>)
        TCCx->CTRLA.bit.ENABLE = 0;
    1e60:	601a      	str	r2, [r3, #0]
    1e62:	000a      	movs	r2, r1
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1e64:	6898      	ldr	r0, [r3, #8]
    1e66:	4208      	tst	r0, r1
    1e68:	d1fc      	bne.n	1e64 <analogWrite+0x10c>
        TCCx->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM;
    1e6a:	2102      	movs	r1, #2
    1e6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    1e6e:	4301      	orrs	r1, r0
    1e70:	63d9      	str	r1, [r3, #60]	; 0x3c
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1e72:	6899      	ldr	r1, [r3, #8]
    1e74:	4211      	tst	r1, r2
    1e76:	d1fc      	bne.n	1e72 <analogWrite+0x11a>
        TCCx->CC[tcChannel].reg = (uint32_t) value;
    1e78:	3410      	adds	r4, #16
    1e7a:	00a4      	lsls	r4, r4, #2
    1e7c:	191c      	adds	r4, r3, r4
    1e7e:	6065      	str	r5, [r4, #4]
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1e80:	6899      	ldr	r1, [r3, #8]
    1e82:	4211      	tst	r1, r2
    1e84:	d1fc      	bne.n	1e80 <analogWrite+0x128>
        TCCx->PER.reg = 0xFFFF;
    1e86:	4929      	ldr	r1, [pc, #164]	; (1f2c <analogWrite+0x1d4>)
    1e88:	6419      	str	r1, [r3, #64]	; 0x40
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1e8a:	6899      	ldr	r1, [r3, #8]
    1e8c:	4211      	tst	r1, r2
    1e8e:	d1fc      	bne.n	1e8a <analogWrite+0x132>
        TCCx->CTRLA.bit.ENABLE = 1;
    1e90:	2102      	movs	r1, #2
    1e92:	6818      	ldr	r0, [r3, #0]
    1e94:	4301      	orrs	r1, r0
    1e96:	6019      	str	r1, [r3, #0]
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1e98:	6899      	ldr	r1, [r3, #8]
    1e9a:	4211      	tst	r1, r2
    1e9c:	d1fc      	bne.n	1e98 <analogWrite+0x140>
    1e9e:	e784      	b.n	1daa <analogWrite+0x52>
    1ea0:	4a20      	ldr	r2, [pc, #128]	; (1f24 <analogWrite+0x1cc>)
    1ea2:	00bb      	lsls	r3, r7, #2
      if (tcNum >= TCC_INST_NUM) {
    1ea4:	2f02      	cmp	r7, #2
    1ea6:	d908      	bls.n	1eba <analogWrite+0x162>
        Tc* TCx = (Tc*) GetTC(pinDesc.ulPWMChannel);
    1ea8:	58d2      	ldr	r2, [r2, r3]
        TCx->COUNT16.CC[tcChannel].reg = (uint32_t) value;
    1eaa:	340c      	adds	r4, #12
    1eac:	b2ad      	uxth	r5, r5
    1eae:	0064      	lsls	r4, r4, #1
    1eb0:	52a5      	strh	r5, [r4, r2]
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1eb2:	7bd3      	ldrb	r3, [r2, #15]
    1eb4:	09db      	lsrs	r3, r3, #7
    1eb6:	d1fc      	bne.n	1eb2 <analogWrite+0x15a>
    1eb8:	e777      	b.n	1daa <analogWrite+0x52>
        Tcc* TCCx = (Tcc*) GetTC(pinDesc.ulPWMChannel);
    1eba:	58d3      	ldr	r3, [r2, r3]
        TCCx->CTRLBSET.bit.LUPD = 1;
    1ebc:	2202      	movs	r2, #2
    1ebe:	7959      	ldrb	r1, [r3, #5]
    1ec0:	430a      	orrs	r2, r1
    1ec2:	715a      	strb	r2, [r3, #5]
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1ec4:	4a18      	ldr	r2, [pc, #96]	; (1f28 <analogWrite+0x1d0>)
    1ec6:	0011      	movs	r1, r2
    1ec8:	6898      	ldr	r0, [r3, #8]
    1eca:	4210      	tst	r0, r2
    1ecc:	d1fc      	bne.n	1ec8 <analogWrite+0x170>
        TCCx->CCB[tcChannel].reg = (uint32_t) value;
    1ece:	341c      	adds	r4, #28
    1ed0:	00a4      	lsls	r4, r4, #2
    1ed2:	50e5      	str	r5, [r4, r3]
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1ed4:	689a      	ldr	r2, [r3, #8]
    1ed6:	420a      	tst	r2, r1
    1ed8:	d1fc      	bne.n	1ed4 <analogWrite+0x17c>
        TCCx->CTRLBCLR.bit.LUPD = 1;
    1eda:	2202      	movs	r2, #2
    1edc:	7918      	ldrb	r0, [r3, #4]
    1ede:	4302      	orrs	r2, r0
    1ee0:	711a      	strb	r2, [r3, #4]
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1ee2:	689a      	ldr	r2, [r3, #8]
    1ee4:	420a      	tst	r2, r1
    1ee6:	d1fc      	bne.n	1ee2 <analogWrite+0x18a>
    1ee8:	e75f      	b.n	1daa <analogWrite+0x52>
  pinMode(pin, OUTPUT);
    1eea:	2101      	movs	r1, #1
    1eec:	f000 f820 	bl	1f30 <pinMode>
  value = mapResolution(value, _writeResolution, 8);
    1ef0:	6829      	ldr	r1, [r5, #0]
    1ef2:	003a      	movs	r2, r7
    1ef4:	0020      	movs	r0, r4
    1ef6:	f7ff fe8d 	bl	1c14 <mapResolution>
    digitalWrite(pin, LOW);
    1efa:	9901      	ldr	r1, [sp, #4]
  if (value < 128) {
    1efc:	287f      	cmp	r0, #127	; 0x7f
    1efe:	d900      	bls.n	1f02 <analogWrite+0x1aa>
    digitalWrite(pin, HIGH);
    1f00:	2101      	movs	r1, #1
    1f02:	0030      	movs	r0, r6
    1f04:	f000 f860 	bl	1fc8 <digitalWrite>
    1f08:	e74f      	b.n	1daa <analogWrite+0x52>
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00003b70 	.word	0x00003b70
    1f10:	2000003c 	.word	0x2000003c
    1f14:	42004800 	.word	0x42004800
    1f18:	20000d0c 	.word	0x20000d0c
    1f1c:	00003b60 	.word	0x00003b60
    1f20:	40000c00 	.word	0x40000c00
    1f24:	20000040 	.word	0x20000040
    1f28:	007f0fff 	.word	0x007f0fff
    1f2c:	0000ffff 	.word	0x0000ffff

00001f30 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f30:	2318      	movs	r3, #24
{
    1f32:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f34:	001d      	movs	r5, r3
{
    1f36:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f38:	4345      	muls	r5, r0
    1f3a:	2008      	movs	r0, #8
    1f3c:	4a20      	ldr	r2, [pc, #128]	; (1fc0 <pinMode+0x90>)
    1f3e:	1955      	adds	r5, r2, r5
    1f40:	5628      	ldrsb	r0, [r5, r0]
    1f42:	3001      	adds	r0, #1
    1f44:	d014      	beq.n	1f70 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1f46:	2903      	cmp	r1, #3
    1f48:	d812      	bhi.n	1f70 <pinMode+0x40>
    1f4a:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f4c:	4363      	muls	r3, r4
    1f4e:	56d1      	ldrsb	r1, [r2, r3]
    1f50:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1f52:	f000 fd2b 	bl	29ac <__gnu_thumb1_case_uqi>
    1f56:	2802      	.short	0x2802
    1f58:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1f5a:	6858      	ldr	r0, [r3, #4]
    1f5c:	01cb      	lsls	r3, r1, #7
    1f5e:	2102      	movs	r1, #2
    1f60:	4a18      	ldr	r2, [pc, #96]	; (1fc4 <pinMode+0x94>)
    1f62:	189b      	adds	r3, r3, r2
    1f64:	181a      	adds	r2, r3, r0
    1f66:	3240      	adds	r2, #64	; 0x40
    1f68:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f6a:	2201      	movs	r2, #1
    1f6c:	4082      	lsls	r2, r0
    1f6e:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1f70:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f72:	6858      	ldr	r0, [r3, #4]
    1f74:	01cb      	lsls	r3, r1, #7
    1f76:	2106      	movs	r1, #6
    1f78:	4a12      	ldr	r2, [pc, #72]	; (1fc4 <pinMode+0x94>)
    1f7a:	189b      	adds	r3, r3, r2
    1f7c:	181a      	adds	r2, r3, r0
    1f7e:	3240      	adds	r2, #64	; 0x40
    1f80:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f82:	2201      	movs	r2, #1
    1f84:	4082      	lsls	r2, r0
    1f86:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f88:	619a      	str	r2, [r3, #24]
    break ;
    1f8a:	e7f1      	b.n	1f70 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f8c:	6858      	ldr	r0, [r3, #4]
    1f8e:	01cb      	lsls	r3, r1, #7
    1f90:	2106      	movs	r1, #6
    1f92:	4a0c      	ldr	r2, [pc, #48]	; (1fc4 <pinMode+0x94>)
    1f94:	189b      	adds	r3, r3, r2
    1f96:	181a      	adds	r2, r3, r0
    1f98:	3240      	adds	r2, #64	; 0x40
    1f9a:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f9c:	2201      	movs	r2, #1
    1f9e:	4082      	lsls	r2, r0
    1fa0:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1fa2:	615a      	str	r2, [r3, #20]
    break ;
    1fa4:	e7e4      	b.n	1f70 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1fa6:	6858      	ldr	r0, [r3, #4]
    1fa8:	01cb      	lsls	r3, r1, #7
    1faa:	2102      	movs	r1, #2
    1fac:	4a05      	ldr	r2, [pc, #20]	; (1fc4 <pinMode+0x94>)
    1fae:	189b      	adds	r3, r3, r2
    1fb0:	181a      	adds	r2, r3, r0
    1fb2:	3240      	adds	r2, #64	; 0x40
    1fb4:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1fb6:	2201      	movs	r2, #1
    1fb8:	4082      	lsls	r2, r0
    1fba:	609a      	str	r2, [r3, #8]
    break ;
    1fbc:	e7d8      	b.n	1f70 <pinMode+0x40>
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	00003b70 	.word	0x00003b70
    1fc4:	41004400 	.word	0x41004400

00001fc8 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fc8:	2318      	movs	r3, #24
{
    1fca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fcc:	2408      	movs	r4, #8
    1fce:	4358      	muls	r0, r3
    1fd0:	4a11      	ldr	r2, [pc, #68]	; (2018 <digitalWrite+0x50>)
    1fd2:	1813      	adds	r3, r2, r0
    1fd4:	571c      	ldrsb	r4, [r3, r4]
    1fd6:	3401      	adds	r4, #1
    1fd8:	d01b      	beq.n	2012 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1fda:	2601      	movs	r6, #1
    1fdc:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1fde:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1fe0:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1fe2:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1fe4:	4a0d      	ldr	r2, [pc, #52]	; (201c <digitalWrite+0x54>)
    1fe6:	01db      	lsls	r3, r3, #7
    1fe8:	189a      	adds	r2, r3, r2
    1fea:	6890      	ldr	r0, [r2, #8]
    1fec:	4228      	tst	r0, r5
    1fee:	d10b      	bne.n	2008 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1ff0:	000c      	movs	r4, r1
    1ff2:	1e60      	subs	r0, r4, #1
    1ff4:	4184      	sbcs	r4, r0
    1ff6:	19d2      	adds	r2, r2, r7
    1ff8:	3240      	adds	r2, #64	; 0x40
    1ffa:	7810      	ldrb	r0, [r2, #0]
    1ffc:	4034      	ands	r4, r6
    1ffe:	3603      	adds	r6, #3
    2000:	00a4      	lsls	r4, r4, #2
    2002:	43b0      	bics	r0, r6
    2004:	4320      	orrs	r0, r4
    2006:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    2008:	4a04      	ldr	r2, [pc, #16]	; (201c <digitalWrite+0x54>)
    200a:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    200c:	2900      	cmp	r1, #0
    200e:	d101      	bne.n	2014 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    2010:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    2012:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    2014:	619d      	str	r5, [r3, #24]
    break ;
    2016:	e7fc      	b.n	2012 <digitalWrite+0x4a>
    2018:	00003b70 	.word	0x00003b70
    201c:	41004400 	.word	0x41004400

00002020 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2022:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2024:	2018      	movs	r0, #24
    2026:	4358      	muls	r0, r3
    2028:	4a2a      	ldr	r2, [pc, #168]	; (20d4 <pinPeripheral+0xb4>)
    202a:	1810      	adds	r0, r2, r0
    202c:	7a00      	ldrb	r0, [r0, #8]
    202e:	b240      	sxtb	r0, r0
  {
    return -1 ;
    2030:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2032:	3001      	adds	r0, #1
    2034:	d013      	beq.n	205e <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    2036:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    2038:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    203a:	280c      	cmp	r0, #12
    203c:	d80f      	bhi.n	205e <pinPeripheral+0x3e>
    203e:	f000 fcb5 	bl	29ac <__gnu_thumb1_case_uqi>
    2042:	1c45      	.short	0x1c45
    2044:	1c1c1c1c 	.word	0x1c1c1c1c
    2048:	071c1c1c 	.word	0x071c1c1c
    204c:	0707      	.short	0x0707
    204e:	07          	.byte	0x07
    204f:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    2050:	2909      	cmp	r1, #9
    2052:	d106      	bne.n	2062 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    2054:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    2056:	0018      	movs	r0, r3
    2058:	f7ff ff6a 	bl	1f30 <pinMode>
  return 0l ;
    205c:	2400      	movs	r4, #0
}
    205e:	0020      	movs	r0, r4
    2060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    2062:	290a      	cmp	r1, #10
    2064:	d101      	bne.n	206a <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    2066:	3908      	subs	r1, #8
    2068:	e7f5      	b.n	2056 <pinPeripheral+0x36>
  return 0l ;
    206a:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    206c:	290b      	cmp	r1, #11
    206e:	d1f6      	bne.n	205e <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    2070:	390a      	subs	r1, #10
    2072:	0018      	movs	r0, r3
    2074:	f7ff ff5c 	bl	1f30 <pinMode>
    2078:	e7f1      	b.n	205e <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    207a:	2018      	movs	r0, #24
    207c:	4343      	muls	r3, r0
    207e:	18d0      	adds	r0, r2, r3
    2080:	6846      	ldr	r6, [r0, #4]
    2082:	2501      	movs	r5, #1
    2084:	0034      	movs	r4, r6
    2086:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2088:	4813      	ldr	r0, [pc, #76]	; (20d8 <pinPeripheral+0xb8>)
    208a:	01d2      	lsls	r2, r2, #7
    208c:	1812      	adds	r2, r2, r0
    208e:	0873      	lsrs	r3, r6, #1
    2090:	18d3      	adds	r3, r2, r3
    2092:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2094:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2096:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2098:	2c00      	cmp	r4, #0
    209a:	d00b      	beq.n	20b4 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    209c:	240f      	movs	r4, #15
    209e:	0109      	lsls	r1, r1, #4
    20a0:	4020      	ands	r0, r4
    20a2:	4301      	orrs	r1, r0
    20a4:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    20a6:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    20a8:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    20aa:	3240      	adds	r2, #64	; 0x40
    20ac:	7813      	ldrb	r3, [r2, #0]
    20ae:	431d      	orrs	r5, r3
    20b0:	7015      	strb	r5, [r2, #0]
    20b2:	e7d3      	b.n	205c <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    20b4:	270f      	movs	r7, #15
    20b6:	43b8      	bics	r0, r7
    20b8:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    20ba:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    20bc:	b2c9      	uxtb	r1, r1
    20be:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    20c0:	0013      	movs	r3, r2
    20c2:	3340      	adds	r3, #64	; 0x40
    20c4:	781a      	ldrb	r2, [r3, #0]
    20c6:	4315      	orrs	r5, r2
    20c8:	701d      	strb	r5, [r3, #0]
    20ca:	e7c8      	b.n	205e <pinPeripheral+0x3e>
      return -1l ;
    20cc:	2401      	movs	r4, #1
    20ce:	4264      	negs	r4, r4
    20d0:	e7c5      	b.n	205e <pinPeripheral+0x3e>
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	00003b70 	.word	0x00003b70
    20d8:	41004400 	.word	0x41004400

000020dc <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    20dc:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    20de:	4802      	ldr	r0, [pc, #8]	; (20e8 <SERCOM0_Handler+0xc>)
    20e0:	f000 fa7c 	bl	25dc <_ZN4Uart10IrqHandlerEv>
}
    20e4:	bd10      	pop	{r4, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	20000dd0 	.word	0x20000dd0

000020ec <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    20ec:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    20ee:	4802      	ldr	r0, [pc, #8]	; (20f8 <SERCOM5_Handler+0xc>)
    20f0:	f000 fa74 	bl	25dc <_ZN4Uart10IrqHandlerEv>
}
    20f4:	bd10      	pop	{r4, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	20000d14 	.word	0x20000d14

000020fc <_GLOBAL__sub_I_g_APinDescription>:
    20fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    20fe:	2401      	movs	r4, #1
    2100:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    2102:	4f15      	ldr	r7, [pc, #84]	; (2158 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    2104:	4915      	ldr	r1, [pc, #84]	; (215c <_GLOBAL__sub_I_g_APinDescription+0x60>)
    2106:	0038      	movs	r0, r7
    2108:	f000 f846 	bl	2198 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    210c:	4914      	ldr	r1, [pc, #80]	; (2160 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    210e:	4815      	ldr	r0, [pc, #84]	; (2164 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    2110:	f000 f842 	bl	2198 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    2114:	4914      	ldr	r1, [pc, #80]	; (2168 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    2116:	4815      	ldr	r0, [pc, #84]	; (216c <_GLOBAL__sub_I_g_APinDescription+0x70>)
    2118:	f000 f83e 	bl	2198 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    211c:	4914      	ldr	r1, [pc, #80]	; (2170 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    211e:	4815      	ldr	r0, [pc, #84]	; (2174 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    2120:	f000 f83a 	bl	2198 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    2124:	4914      	ldr	r1, [pc, #80]	; (2178 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    2126:	4815      	ldr	r0, [pc, #84]	; (217c <_GLOBAL__sub_I_g_APinDescription+0x80>)
    2128:	f000 f836 	bl	2198 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    212c:	4d14      	ldr	r5, [pc, #80]	; (2180 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    212e:	4915      	ldr	r1, [pc, #84]	; (2184 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    2130:	0028      	movs	r0, r5
    2132:	f000 f831 	bl	2198 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    2136:	0039      	movs	r1, r7
    2138:	9600      	str	r6, [sp, #0]
    213a:	0023      	movs	r3, r4
    213c:	9401      	str	r4, [sp, #4]
    213e:	2200      	movs	r2, #0
    2140:	4811      	ldr	r0, [pc, #68]	; (2188 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    2142:	f000 f9f3 	bl	252c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    2146:	9600      	str	r6, [sp, #0]
    2148:	0029      	movs	r1, r5
    214a:	9401      	str	r4, [sp, #4]
    214c:	231e      	movs	r3, #30
    214e:	221f      	movs	r2, #31
    2150:	480e      	ldr	r0, [pc, #56]	; (218c <_GLOBAL__sub_I_g_APinDescription+0x90>)
    2152:	f000 f9eb 	bl	252c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    2156:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2158:	20000e8c 	.word	0x20000e8c
    215c:	42000800 	.word	0x42000800
    2160:	42000c00 	.word	0x42000c00
    2164:	20000e90 	.word	0x20000e90
    2168:	42001000 	.word	0x42001000
    216c:	20000e94 	.word	0x20000e94
    2170:	42001400 	.word	0x42001400
    2174:	20000e98 	.word	0x20000e98
    2178:	42001800 	.word	0x42001800
    217c:	20000e9c 	.word	0x20000e9c
    2180:	20000ea0 	.word	0x20000ea0
    2184:	42001c00 	.word	0x42001c00
    2188:	20000dd0 	.word	0x20000dd0
    218c:	20000d14 	.word	0x20000d14

00002190 <_Znwj>:
    2190:	b510      	push	{r4, lr}
    2192:	f001 fb93 	bl	38bc <malloc>
    2196:	bd10      	pop	{r4, pc}

00002198 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    2198:	6001      	str	r1, [r0, #0]
}
    219a:	4770      	bx	lr

0000219c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    219c:	b5f0      	push	{r4, r5, r6, r7, lr}
    219e:	ac05      	add	r4, sp, #20
    21a0:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    21a2:	6804      	ldr	r4, [r0, #0]
    21a4:	1e98      	subs	r0, r3, #2
    21a6:	1e47      	subs	r7, r0, #1
    21a8:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    21aa:	6826      	ldr	r6, [r4, #0]
    21ac:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    21ae:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    21b0:	4332      	orrs	r2, r6
    21b2:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    21b4:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    21b6:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    21b8:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    21ba:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    21bc:	6862      	ldr	r2, [r4, #4]
    21be:	4329      	orrs	r1, r5
    21c0:	2000      	movs	r0, #0
    21c2:	2b02      	cmp	r3, #2
    21c4:	d000      	beq.n	21c8 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    21c6:	0358      	lsls	r0, r3, #13
    21c8:	4311      	orrs	r1, r2
    21ca:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    21cc:	6061      	str	r1, [r4, #4]
}
    21ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021d0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    21d0:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    21d2:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    21d4:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    21d6:	03a4      	lsls	r4, r4, #14
    21d8:	6818      	ldr	r0, [r3, #0]
    21da:	0512      	lsls	r2, r2, #20
    21dc:	4022      	ands	r2, r4
    21de:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    21e0:	20c0      	movs	r0, #192	; 0xc0
    21e2:	0409      	lsls	r1, r1, #16
    21e4:	0280      	lsls	r0, r0, #10
    21e6:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    21e8:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    21ea:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    21ec:	685a      	ldr	r2, [r3, #4]
    21ee:	4310      	orrs	r0, r2
    21f0:	6058      	str	r0, [r3, #4]
}
    21f2:	bd10      	pop	{r4, pc}

000021f4 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    21f4:	2201      	movs	r2, #1
    21f6:	6803      	ldr	r3, [r0, #0]
    21f8:	6819      	ldr	r1, [r3, #0]
    21fa:	430a      	orrs	r2, r1
    21fc:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    21fe:	681a      	ldr	r2, [r3, #0]
    2200:	07d2      	lsls	r2, r2, #31
    2202:	d4fc      	bmi.n	21fe <_ZN6SERCOM9resetUARTEv+0xa>
    2204:	69da      	ldr	r2, [r3, #28]
    2206:	07d2      	lsls	r2, r2, #31
    2208:	d4f9      	bmi.n	21fe <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    220a:	4770      	bx	lr

0000220c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    220c:	2202      	movs	r2, #2
    220e:	6803      	ldr	r3, [r0, #0]
    2210:	6819      	ldr	r1, [r3, #0]
    2212:	430a      	orrs	r2, r1
    2214:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    2216:	69da      	ldr	r2, [r3, #28]
    2218:	0792      	lsls	r2, r2, #30
    221a:	d4fc      	bmi.n	2216 <_ZN6SERCOM10enableUARTEv+0xa>
}
    221c:	4770      	bx	lr

0000221e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    221e:	6803      	ldr	r3, [r0, #0]
    2220:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    2222:	07d2      	lsls	r2, r2, #31
    2224:	d402      	bmi.n	222c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    2226:	7e1a      	ldrb	r2, [r3, #24]
    2228:	0792      	lsls	r2, r2, #30
    222a:	d5fc      	bpl.n	2226 <_ZN6SERCOM9flushUARTEv+0x8>
}
    222c:	4770      	bx	lr

0000222e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    222e:	2200      	movs	r2, #0
    2230:	6803      	ldr	r3, [r0, #0]
    2232:	835a      	strh	r2, [r3, #26]
}
    2234:	4770      	bx	lr

00002236 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    2236:	6803      	ldr	r3, [r0, #0]
    2238:	7e18      	ldrb	r0, [r3, #24]
    223a:	0740      	lsls	r0, r0, #29
    223c:	0fc0      	lsrs	r0, r0, #31
}
    223e:	4770      	bx	lr

00002240 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    2240:	6803      	ldr	r3, [r0, #0]
    2242:	7e18      	ldrb	r0, [r3, #24]
    2244:	09c0      	lsrs	r0, r0, #7
}
    2246:	4770      	bx	lr

00002248 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    2248:	2380      	movs	r3, #128	; 0x80
    224a:	6802      	ldr	r2, [r0, #0]
    224c:	425b      	negs	r3, r3
    224e:	7e11      	ldrb	r1, [r2, #24]
    2250:	430b      	orrs	r3, r1
    2252:	7613      	strb	r3, [r2, #24]
}
    2254:	4770      	bx	lr

00002256 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    2256:	6803      	ldr	r3, [r0, #0]
    2258:	7e18      	ldrb	r0, [r3, #24]
    225a:	07c0      	lsls	r0, r0, #31
    225c:	0fc0      	lsrs	r0, r0, #31
}
    225e:	4770      	bx	lr

00002260 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    2260:	6803      	ldr	r3, [r0, #0]
    2262:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    2264:	b2c0      	uxtb	r0, r0
}
    2266:	4770      	bx	lr

00002268 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    2268:	6803      	ldr	r3, [r0, #0]
    226a:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    226c:	07d2      	lsls	r2, r2, #31
    226e:	d5fc      	bpl.n	226a <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    2270:	b289      	uxth	r1, r1
  return 1;
}
    2272:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    2274:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2276:	4770      	bx	lr

00002278 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2278:	2201      	movs	r2, #1
    227a:	6803      	ldr	r3, [r0, #0]
    227c:	759a      	strb	r2, [r3, #22]
}
    227e:	4770      	bx	lr

00002280 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    2280:	2201      	movs	r2, #1
    2282:	6803      	ldr	r3, [r0, #0]
    2284:	751a      	strb	r2, [r3, #20]
}
    2286:	4770      	bx	lr

00002288 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    2288:	6803      	ldr	r3, [r0, #0]
    228a:	4a21      	ldr	r2, [pc, #132]	; (2310 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    228c:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    228e:	4293      	cmp	r3, r2
    2290:	d011      	beq.n	22b6 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    2292:	4a20      	ldr	r2, [pc, #128]	; (2314 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    2294:	4293      	cmp	r3, r2
    2296:	d02f      	beq.n	22f8 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    2298:	4a1f      	ldr	r2, [pc, #124]	; (2318 <_ZN6SERCOM13initClockNVICEv+0x90>)
    229a:	4293      	cmp	r3, r2
    229c:	d02f      	beq.n	22fe <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    229e:	4a1f      	ldr	r2, [pc, #124]	; (231c <_ZN6SERCOM13initClockNVICEv+0x94>)
    22a0:	4293      	cmp	r3, r2
    22a2:	d02f      	beq.n	2304 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    22a4:	4a1e      	ldr	r2, [pc, #120]	; (2320 <_ZN6SERCOM13initClockNVICEv+0x98>)
    22a6:	4293      	cmp	r3, r2
    22a8:	d02f      	beq.n	230a <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    22aa:	4a1e      	ldr	r2, [pc, #120]	; (2324 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    22ac:	4293      	cmp	r3, r2
    22ae:	d122      	bne.n	22f6 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    22b0:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    22b2:	2219      	movs	r2, #25
    22b4:	e001      	b.n	22ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    22b6:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    22b8:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22ba:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    22bc:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22be:	4099      	lsls	r1, r3
    22c0:	4819      	ldr	r0, [pc, #100]	; (2328 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    22c2:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22c4:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    22c6:	0899      	lsrs	r1, r3, #2
    22c8:	402b      	ands	r3, r5
    22ca:	40ab      	lsls	r3, r5
    22cc:	35fc      	adds	r5, #252	; 0xfc
    22ce:	409d      	lsls	r5, r3
    22d0:	0089      	lsls	r1, r1, #2
    22d2:	1809      	adds	r1, r1, r0
    22d4:	00a4      	lsls	r4, r4, #2
    22d6:	5908      	ldr	r0, [r1, r4]
    22d8:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    22da:	25c0      	movs	r5, #192	; 0xc0
    22dc:	409d      	lsls	r5, r3
    22de:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    22e0:	4303      	orrs	r3, r0
    22e2:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    22e4:	2380      	movs	r3, #128	; 0x80
    22e6:	01db      	lsls	r3, r3, #7
    22e8:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    22ea:	4b10      	ldr	r3, [pc, #64]	; (232c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    22ec:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    22ee:	785a      	ldrb	r2, [r3, #1]
    22f0:	b252      	sxtb	r2, r2
    22f2:	2a00      	cmp	r2, #0
    22f4:	dbfb      	blt.n	22ee <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    22f6:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    22f8:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    22fa:	2215      	movs	r2, #21
    22fc:	e7dd      	b.n	22ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    22fe:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    2300:	2216      	movs	r2, #22
    2302:	e7da      	b.n	22ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    2304:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    2306:	2217      	movs	r2, #23
    2308:	e7d7      	b.n	22ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    230a:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    230c:	2218      	movs	r2, #24
    230e:	e7d4      	b.n	22ba <_ZN6SERCOM13initClockNVICEv+0x32>
    2310:	42000800 	.word	0x42000800
    2314:	42000c00 	.word	0x42000c00
    2318:	42001000 	.word	0x42001000
    231c:	42001400 	.word	0x42001400
    2320:	42001800 	.word	0x42001800
    2324:	42001c00 	.word	0x42001c00
    2328:	e000e100 	.word	0xe000e100
    232c:	40000c00 	.word	0x40000c00

00002330 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    2330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2332:	0004      	movs	r4, r0
    2334:	0016      	movs	r6, r2
    2336:	000f      	movs	r7, r1
    2338:	001d      	movs	r5, r3
  initClockNVIC();
    233a:	f7ff ffa5 	bl	2288 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    233e:	0020      	movs	r0, r4
    2340:	f7ff ff58 	bl	21f4 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2344:	221c      	movs	r2, #28
    2346:	00bb      	lsls	r3, r7, #2
    2348:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    234a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    234c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    234e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2350:	4313      	orrs	r3, r2
    2352:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    2354:	2384      	movs	r3, #132	; 0x84
    2356:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    2358:	2f01      	cmp	r7, #1
    235a:	d118      	bne.n	238e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    235c:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    235e:	2e01      	cmp	r6, #1
    2360:	d000      	beq.n	2364 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    2362:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    2364:	4b0a      	ldr	r3, [pc, #40]	; (2390 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    2366:	4369      	muls	r1, r5
    2368:	6818      	ldr	r0, [r3, #0]
    236a:	00c0      	lsls	r0, r0, #3
    236c:	f000 fb28 	bl	29c0 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    2370:	2207      	movs	r2, #7
    2372:	89a3      	ldrh	r3, [r4, #12]
    2374:	4002      	ands	r2, r0
    2376:	04db      	lsls	r3, r3, #19
    2378:	0352      	lsls	r2, r2, #13
    237a:	0cdb      	lsrs	r3, r3, #19
    237c:	4313      	orrs	r3, r2
    237e:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    2380:	0403      	lsls	r3, r0, #16
    2382:	89a0      	ldrh	r0, [r4, #12]
    2384:	0cdb      	lsrs	r3, r3, #19
    2386:	0b40      	lsrs	r0, r0, #13
    2388:	0340      	lsls	r0, r0, #13
    238a:	4318      	orrs	r0, r3
    238c:	81a0      	strh	r0, [r4, #12]
}
    238e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2390:	20000030 	.word	0x20000030

00002394 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    2394:	2001      	movs	r0, #1
    2396:	4770      	bx	lr

00002398 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    2398:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    239a:	6803      	ldr	r3, [r0, #0]
    239c:	4a01      	ldr	r2, [pc, #4]	; (23a4 <_ZN4Uart5beginEm+0xc>)
    239e:	6a1b      	ldr	r3, [r3, #32]
    23a0:	4798      	blx	r3
}
    23a2:	bd10      	pop	{r4, pc}
    23a4:	00000413 	.word	0x00000413

000023a8 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    23a8:	6d82      	ldr	r2, [r0, #88]	; 0x58
    23aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
    23ac:	429a      	cmp	r2, r3
    23ae:	d003      	beq.n	23b8 <_ZN4Uart4peekEv+0x10>
    return -1;

  return _aucBuffer[_iTail];
    23b0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    23b2:	18c0      	adds	r0, r0, r3
    23b4:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    23b6:	4770      	bx	lr
    return -1;
    23b8:	2001      	movs	r0, #1
    23ba:	4240      	negs	r0, r0
  return rxBuffer.peek();
    23bc:	e7fb      	b.n	23b6 <_ZN4Uart4peekEv+0xe>

000023be <_ZN4Uart3endEv>:
{
    23be:	b510      	push	{r4, lr}
    23c0:	0004      	movs	r4, r0
  sercom->resetUART();
    23c2:	6900      	ldr	r0, [r0, #16]
    23c4:	f7ff ff16 	bl	21f4 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    23c8:	2300      	movs	r3, #0
    23ca:	0022      	movs	r2, r4
    23cc:	6563      	str	r3, [r4, #84]	; 0x54
    23ce:	329c      	adds	r2, #156	; 0x9c
  _iTail = 0;
    23d0:	65a3      	str	r3, [r4, #88]	; 0x58
    23d2:	34a0      	adds	r4, #160	; 0xa0
  _iHead = 0;
    23d4:	6013      	str	r3, [r2, #0]
  _iTail = 0;
    23d6:	6023      	str	r3, [r4, #0]
}
    23d8:	bd10      	pop	{r4, pc}

000023da <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    23da:	20f0      	movs	r0, #240	; 0xf0
    23dc:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    23de:	3930      	subs	r1, #48	; 0x30
    23e0:	4248      	negs	r0, r1
    23e2:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    23e4:	4770      	bx	lr

000023e6 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    23e6:	23f0      	movs	r3, #240	; 0xf0
    23e8:	011b      	lsls	r3, r3, #4
    23ea:	4019      	ands	r1, r3
    23ec:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    23ee:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    23f0:	009b      	lsls	r3, r3, #2
    23f2:	4299      	cmp	r1, r3
    23f4:	d00a      	beq.n	240c <_ZN4Uart15extractCharSizeEt+0x26>
    23f6:	3301      	adds	r3, #1
    23f8:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    23fa:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    23fc:	4299      	cmp	r1, r3
    23fe:	d005      	beq.n	240c <_ZN4Uart15extractCharSizeEt+0x26>
    2400:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    2402:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    2404:	005b      	lsls	r3, r3, #1
    2406:	4299      	cmp	r1, r3
    2408:	d000      	beq.n	240c <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    240a:	2000      	movs	r0, #0

  }
}
    240c:	4770      	bx	lr

0000240e <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    240e:	200f      	movs	r0, #15
    2410:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    2412:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    2414:	2901      	cmp	r1, #1
    2416:	d003      	beq.n	2420 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    2418:	3902      	subs	r1, #2
    241a:	1e48      	subs	r0, r1, #1
    241c:	4181      	sbcs	r1, r0
    241e:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    2420:	4770      	bx	lr
	...

00002424 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2424:	0003      	movs	r3, r0
{
    2426:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2428:	2618      	movs	r6, #24
{
    242a:	b085      	sub	sp, #20
    242c:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    242e:	33a4      	adds	r3, #164	; 0xa4
{
    2430:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2432:	7818      	ldrb	r0, [r3, #0]
    2434:	0033      	movs	r3, r6
    2436:	2108      	movs	r1, #8
    2438:	4343      	muls	r3, r0
    243a:	4d33      	ldr	r5, [pc, #204]	; (2508 <_ZN4Uart5beginEmt+0xe4>)
{
    243c:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    243e:	18eb      	adds	r3, r5, r3
    2440:	5659      	ldrsb	r1, [r3, r1]
    2442:	f7ff fded 	bl	2020 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    2446:	0023      	movs	r3, r4
    2448:	33a5      	adds	r3, #165	; 0xa5
    244a:	7818      	ldrb	r0, [r3, #0]
    244c:	0033      	movs	r3, r6
    244e:	2108      	movs	r1, #8
    2450:	4343      	muls	r3, r0
    2452:	18eb      	adds	r3, r5, r3
    2454:	5659      	ldrsb	r1, [r3, r1]
    2456:	f7ff fde3 	bl	2020 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    245a:	0023      	movs	r3, r4
    245c:	33a7      	adds	r3, #167	; 0xa7
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	2b02      	cmp	r3, #2
    2462:	d10a      	bne.n	247a <_ZN4Uart5beginEmt+0x56>
    if (uc_pinCTS != NO_CTS_PIN) {
    2464:	0023      	movs	r3, r4
    2466:	33b8      	adds	r3, #184	; 0xb8
    2468:	7818      	ldrb	r0, [r3, #0]
    246a:	28ff      	cmp	r0, #255	; 0xff
    246c:	d005      	beq.n	247a <_ZN4Uart5beginEmt+0x56>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    246e:	2108      	movs	r1, #8
    2470:	4346      	muls	r6, r0
    2472:	19ae      	adds	r6, r5, r6
    2474:	5671      	ldrsb	r1, [r6, r1]
    2476:	f7ff fdd3 	bl	2020 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    247a:	0026      	movs	r6, r4
    247c:	36a8      	adds	r6, #168	; 0xa8
    247e:	7830      	ldrb	r0, [r6, #0]
    2480:	28ff      	cmp	r0, #255	; 0xff
    2482:	d019      	beq.n	24b8 <_ZN4Uart5beginEmt+0x94>
    pinMode(uc_pinRTS, OUTPUT);
    2484:	2101      	movs	r1, #1
    2486:	f7ff fd53 	bl	1f30 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    248a:	2218      	movs	r2, #24
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    248c:	0021      	movs	r1, r4
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    248e:	7833      	ldrb	r3, [r6, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2490:	481e      	ldr	r0, [pc, #120]	; (250c <_ZN4Uart5beginEmt+0xe8>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2492:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2494:	56ab      	ldrsb	r3, [r5, r2]
    2496:	31ac      	adds	r1, #172	; 0xac
    2498:	01db      	lsls	r3, r3, #7
    249a:	1818      	adds	r0, r3, r0
    249c:	6008      	str	r0, [r1, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    249e:	491c      	ldr	r1, [pc, #112]	; (2510 <_ZN4Uart5beginEmt+0xec>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    24a0:	18ad      	adds	r5, r5, r2
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    24a2:	185b      	adds	r3, r3, r1
    24a4:	0021      	movs	r1, r4
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    24a6:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    24a8:	31b0      	adds	r1, #176	; 0xb0
    24aa:	600b      	str	r3, [r1, #0]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    24ac:	6869      	ldr	r1, [r5, #4]
    24ae:	408a      	lsls	r2, r1
    24b0:	0021      	movs	r1, r4
    24b2:	31b4      	adds	r1, #180	; 0xb4
    24b4:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    24b6:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    24b8:	2201      	movs	r2, #1
    24ba:	9b03      	ldr	r3, [sp, #12]
    24bc:	0011      	movs	r1, r2
    24be:	6920      	ldr	r0, [r4, #16]
    24c0:	f7ff ff36 	bl	2330 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    24c4:	0039      	movs	r1, r7
    24c6:	0020      	movs	r0, r4
    24c8:	f7ff ff8d 	bl	23e6 <_ZN4Uart15extractCharSizeEt>
    24cc:	0039      	movs	r1, r7
    24ce:	0005      	movs	r5, r0
    24d0:	0020      	movs	r0, r4
    24d2:	f7ff ff9c 	bl	240e <_ZN4Uart13extractParityEt>
    24d6:	0039      	movs	r1, r7
    24d8:	0006      	movs	r6, r0
    24da:	0020      	movs	r0, r4
    24dc:	f7ff ff7d 	bl	23da <_ZN4Uart16extractNbStopBitEt>
    24e0:	0033      	movs	r3, r6
    24e2:	9000      	str	r0, [sp, #0]
    24e4:	0029      	movs	r1, r5
    24e6:	6920      	ldr	r0, [r4, #16]
    24e8:	2201      	movs	r2, #1
    24ea:	f7ff fe57 	bl	219c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    24ee:	0023      	movs	r3, r4
    24f0:	33a6      	adds	r3, #166	; 0xa6
    24f2:	781a      	ldrb	r2, [r3, #0]
    24f4:	7859      	ldrb	r1, [r3, #1]
    24f6:	6920      	ldr	r0, [r4, #16]
    24f8:	f7ff fe6a 	bl	21d0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    24fc:	6920      	ldr	r0, [r4, #16]
    24fe:	f7ff fe85 	bl	220c <_ZN6SERCOM10enableUARTEv>
}
    2502:	b005      	add	sp, #20
    2504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	00003b70 	.word	0x00003b70
    250c:	41004418 	.word	0x41004418
    2510:	41004414 	.word	0x41004414

00002514 <_ZN11RingBufferNILi64EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
    2514:	b510      	push	{r4, lr}
    memset( _aucBuffer, 0, N ) ;
    2516:	2240      	movs	r2, #64	; 0x40
    2518:	2100      	movs	r1, #0
RingBufferN<N>::RingBufferN( void )
    251a:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    251c:	f001 f9e1 	bl	38e2 <memset>
  _iHead = 0;
    2520:	2300      	movs	r3, #0
}
    2522:	0020      	movs	r0, r4
  _iHead = 0;
    2524:	6423      	str	r3, [r4, #64]	; 0x40
  _iTail = 0;
    2526:	6463      	str	r3, [r4, #68]	; 0x44
}
    2528:	bd10      	pop	{r4, pc}
	...

0000252c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    252c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    252e:	001d      	movs	r5, r3
    2530:	ab08      	add	r3, sp, #32
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	0004      	movs	r4, r0
    2536:	9300      	str	r3, [sp, #0]
    2538:	ab09      	add	r3, sp, #36	; 0x24
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	0016      	movs	r6, r2
    253e:	9301      	str	r3, [sp, #4]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2540:	2300      	movs	r3, #0
    2542:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2544:	23fa      	movs	r3, #250	; 0xfa
    2546:	009b      	lsls	r3, r3, #2
    2548:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    254a:	4b0e      	ldr	r3, [pc, #56]	; (2584 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    254c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    254e:	3308      	adds	r3, #8
    2550:	6003      	str	r3, [r0, #0]
    2552:	3014      	adds	r0, #20
    2554:	f7ff ffde 	bl	2514 <_ZN11RingBufferNILi64EEC1Ev>
    2558:	0020      	movs	r0, r4
    255a:	305c      	adds	r0, #92	; 0x5c
    255c:	f7ff ffda 	bl	2514 <_ZN11RingBufferNILi64EEC1Ev>
  uc_padRX = _padRX ;
    2560:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    2562:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    2564:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    2566:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    2568:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    256a:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    256c:	466a      	mov	r2, sp
    256e:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    2570:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    2572:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    2574:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    2576:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    2578:	23ff      	movs	r3, #255	; 0xff
    257a:	32a8      	adds	r2, #168	; 0xa8
}
    257c:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    257e:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    2580:	7413      	strb	r3, [r2, #16]
}
    2582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2584:	00003f90 	.word	0x00003f90

00002588 <_ZN11RingBufferNILi64EE9availableEv>:
  int delta = _iHead - _iTail;
    2588:	6c03      	ldr	r3, [r0, #64]	; 0x40
    258a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    258c:	1a18      	subs	r0, r3, r0
  if(delta < 0)
    258e:	d500      	bpl.n	2592 <_ZN11RingBufferNILi64EE9availableEv+0xa>
    return N + delta;
    2590:	3040      	adds	r0, #64	; 0x40
}
    2592:	4770      	bx	lr

00002594 <_ZN4Uart5flushEv>:
{
    2594:	b510      	push	{r4, lr}
    2596:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    2598:	0020      	movs	r0, r4
    259a:	305c      	adds	r0, #92	; 0x5c
    259c:	f7ff fff4 	bl	2588 <_ZN11RingBufferNILi64EE9availableEv>
    25a0:	2800      	cmp	r0, #0
    25a2:	d1f9      	bne.n	2598 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    25a4:	6920      	ldr	r0, [r4, #16]
    25a6:	f7ff fe3a 	bl	221e <_ZN6SERCOM9flushUARTEv>
}
    25aa:	bd10      	pop	{r4, pc}

000025ac <_ZN4Uart9availableEv>:
{
    25ac:	b510      	push	{r4, lr}
  return rxBuffer.available();
    25ae:	3014      	adds	r0, #20
    25b0:	f7ff ffea 	bl	2588 <_ZN11RingBufferNILi64EE9availableEv>
}
    25b4:	bd10      	pop	{r4, pc}

000025b6 <_ZN11RingBufferNILi64EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    25b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    25b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    25ba:	429a      	cmp	r2, r3
    25bc:	db04      	blt.n	25c8 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x12>
    return N - 1 - _iHead + _iTail;
    25be:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    25c2:	1ac0      	subs	r0, r0, r3
    25c4:	303f      	adds	r0, #63	; 0x3f
}
    25c6:	4770      	bx	lr
    return _iTail - _iHead - 1;
    25c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    25ca:	6c00      	ldr	r0, [r0, #64]	; 0x40
    25cc:	1a18      	subs	r0, r3, r0
    25ce:	3801      	subs	r0, #1
    25d0:	e7f9      	b.n	25c6 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x10>

000025d2 <_ZN4Uart17availableForWriteEv>:
{
    25d2:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    25d4:	305c      	adds	r0, #92	; 0x5c
    25d6:	f7ff ffee 	bl	25b6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
}
    25da:	bd10      	pop	{r4, pc}

000025dc <_ZN4Uart10IrqHandlerEv>:
{
    25dc:	b570      	push	{r4, r5, r6, lr}
    25de:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    25e0:	6900      	ldr	r0, [r0, #16]
    25e2:	f7ff fe28 	bl	2236 <_ZN6SERCOM17availableDataUARTEv>
    25e6:	2800      	cmp	r0, #0
    25e8:	d01f      	beq.n	262a <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
    25ea:	6920      	ldr	r0, [r4, #16]
    25ec:	f7ff fe38 	bl	2260 <_ZN6SERCOM12readDataUARTEv>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    25f0:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    25f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(index + 1) % N;
    25f4:	3301      	adds	r3, #1
    25f6:	4013      	ands	r3, r2
  if ( i != _iTail )
    25f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
    25fa:	4293      	cmp	r3, r2
    25fc:	d003      	beq.n	2606 <_ZN4Uart10IrqHandlerEv+0x2a>
    _aucBuffer[_iHead] = c ;
    25fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2600:	18a2      	adds	r2, r4, r2
    2602:	7510      	strb	r0, [r2, #20]
    _iHead = i ;
    2604:	6563      	str	r3, [r4, #84]	; 0x54
    if (uc_pinRTS != NO_RTS_PIN) {
    2606:	0023      	movs	r3, r4
    2608:	33a8      	adds	r3, #168	; 0xa8
    260a:	781b      	ldrb	r3, [r3, #0]
    260c:	2bff      	cmp	r3, #255	; 0xff
    260e:	d00c      	beq.n	262a <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
    2610:	0020      	movs	r0, r4
    2612:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    2614:	f7ff ffcf 	bl	25b6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    2618:	2809      	cmp	r0, #9
    261a:	dc06      	bgt.n	262a <_ZN4Uart10IrqHandlerEv+0x4e>
        *pul_outsetRTS = ul_pinMaskRTS;
    261c:	0023      	movs	r3, r4
    261e:	0022      	movs	r2, r4
    2620:	33ac      	adds	r3, #172	; 0xac
    2622:	32b4      	adds	r2, #180	; 0xb4
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	6812      	ldr	r2, [r2, #0]
    2628:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    262a:	6920      	ldr	r0, [r4, #16]
    262c:	f7ff fe13 	bl	2256 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2630:	2800      	cmp	r0, #0
    2632:	d019      	beq.n	2668 <_ZN4Uart10IrqHandlerEv+0x8c>
    if (txBuffer.available()) {
    2634:	0025      	movs	r5, r4
    2636:	355c      	adds	r5, #92	; 0x5c
    2638:	0028      	movs	r0, r5
    263a:	f7ff ffa5 	bl	2588 <_ZN11RingBufferNILi64EE9availableEv>
    263e:	2800      	cmp	r0, #0
    2640:	d021      	beq.n	2686 <_ZN4Uart10IrqHandlerEv+0xaa>
  if(_iTail == _iHead)
    2642:	0022      	movs	r2, r4
    2644:	0023      	movs	r3, r4
    2646:	32a0      	adds	r2, #160	; 0xa0
    2648:	339c      	adds	r3, #156	; 0x9c
    264a:	6811      	ldr	r1, [r2, #0]
    264c:	681b      	ldr	r3, [r3, #0]
    264e:	4299      	cmp	r1, r3
    2650:	d016      	beq.n	2680 <_ZN4Uart10IrqHandlerEv+0xa4>
  return (uint32_t)(index + 1) % N;
    2652:	203f      	movs	r0, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
    2654:	6813      	ldr	r3, [r2, #0]
    2656:	5ce9      	ldrb	r1, [r5, r3]
  _iTail = nextIndex(_iTail);
    2658:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
    265a:	3301      	adds	r3, #1
    265c:	4003      	ands	r3, r0
  _iTail = nextIndex(_iTail);
    265e:	6013      	str	r3, [r2, #0]
      sercom->writeDataUART(data);
    2660:	b2c9      	uxtb	r1, r1
    2662:	6920      	ldr	r0, [r4, #16]
    2664:	f7ff fe00 	bl	2268 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    2668:	6920      	ldr	r0, [r4, #16]
    266a:	f7ff fde9 	bl	2240 <_ZN6SERCOM11isUARTErrorEv>
    266e:	2800      	cmp	r0, #0
    2670:	d005      	beq.n	267e <_ZN4Uart10IrqHandlerEv+0xa2>
    sercom->acknowledgeUARTError();
    2672:	6920      	ldr	r0, [r4, #16]
    2674:	f7ff fde8 	bl	2248 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    2678:	6920      	ldr	r0, [r4, #16]
    267a:	f7ff fdd8 	bl	222e <_ZN6SERCOM15clearStatusUARTEv>
}
    267e:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    2680:	2101      	movs	r1, #1
    2682:	4249      	negs	r1, r1
    2684:	e7ec      	b.n	2660 <_ZN4Uart10IrqHandlerEv+0x84>
      sercom->disableDataRegisterEmptyInterruptUART();
    2686:	6920      	ldr	r0, [r4, #16]
    2688:	f7ff fdfa 	bl	2280 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    268c:	e7ec      	b.n	2668 <_ZN4Uart10IrqHandlerEv+0x8c>
	...

00002690 <_ZN4Uart5writeEh>:
{
    2690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2692:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2694:	6900      	ldr	r0, [r0, #16]
{
    2696:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2698:	f7ff fddd 	bl	2256 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    269c:	2800      	cmp	r0, #0
    269e:	d126      	bne.n	26ee <_ZN4Uart5writeEh+0x5e>
  return (uint32_t)(index + 1) % N;
    26a0:	263f      	movs	r6, #63	; 0x3f
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    26a2:	2701      	movs	r7, #1
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    26a4:	0022      	movs	r2, r4
    26a6:	0021      	movs	r1, r4
    26a8:	329c      	adds	r2, #156	; 0x9c
    26aa:	6813      	ldr	r3, [r2, #0]
    26ac:	31a0      	adds	r1, #160	; 0xa0
    26ae:	6808      	ldr	r0, [r1, #0]
  return (uint32_t)(index + 1) % N;
    26b0:	3301      	adds	r3, #1
    26b2:	4033      	ands	r3, r6
    while(txBuffer.isFull()) {
    26b4:	4283      	cmp	r3, r0
    26b6:	d12e      	bne.n	2716 <_ZN4Uart5writeEh+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26b8:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    26bc:	423b      	tst	r3, r7
    26be:	d10d      	bne.n	26dc <_ZN4Uart5writeEh+0x4c>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    26c0:	4b1d      	ldr	r3, [pc, #116]	; (2738 <_ZN4Uart5writeEh+0xa8>)
    26c2:	685b      	ldr	r3, [r3, #4]
    26c4:	05db      	lsls	r3, r3, #23
    26c6:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    26c8:	d0ec      	beq.n	26a4 <_ZN4Uart5writeEh+0x14>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    26ca:	3b10      	subs	r3, #16
    26cc:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    26ce:	2b00      	cmp	r3, #0
    26d0:	db18      	blt.n	2704 <_ZN4Uart5writeEh+0x74>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    26d2:	089b      	lsrs	r3, r3, #2
    26d4:	33c0      	adds	r3, #192	; 0xc0
    26d6:	4a19      	ldr	r2, [pc, #100]	; (273c <_ZN4Uart5writeEh+0xac>)
    26d8:	009b      	lsls	r3, r3, #2
    26da:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    26dc:	6920      	ldr	r0, [r4, #16]
    26de:	f7ff fdba 	bl	2256 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    26e2:	2800      	cmp	r0, #0
    26e4:	d0de      	beq.n	26a4 <_ZN4Uart5writeEh+0x14>
        IrqHandler();
    26e6:	0020      	movs	r0, r4
    26e8:	f7ff ff78 	bl	25dc <_ZN4Uart10IrqHandlerEv>
    26ec:	e7da      	b.n	26a4 <_ZN4Uart5writeEh+0x14>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    26ee:	0020      	movs	r0, r4
    26f0:	305c      	adds	r0, #92	; 0x5c
    26f2:	f7ff ff49 	bl	2588 <_ZN11RingBufferNILi64EE9availableEv>
    26f6:	2800      	cmp	r0, #0
    26f8:	d1d2      	bne.n	26a0 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    26fa:	0029      	movs	r1, r5
    26fc:	6920      	ldr	r0, [r4, #16]
    26fe:	f7ff fdb3 	bl	2268 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    2702:	e016      	b.n	2732 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    2704:	220f      	movs	r2, #15
    2706:	4013      	ands	r3, r2
    2708:	3b08      	subs	r3, #8
    270a:	089b      	lsrs	r3, r3, #2
    270c:	4a0c      	ldr	r2, [pc, #48]	; (2740 <_ZN4Uart5writeEh+0xb0>)
    270e:	009b      	lsls	r3, r3, #2
    2710:	189b      	adds	r3, r3, r2
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	e7e2      	b.n	26dc <_ZN4Uart5writeEh+0x4c>
  int i = nextIndex(_iHead);
    2716:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
    2718:	3301      	adds	r3, #1
    271a:	401e      	ands	r6, r3
  if ( i != _iTail )
    271c:	680b      	ldr	r3, [r1, #0]
    271e:	429e      	cmp	r6, r3
    2720:	d004      	beq.n	272c <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    2722:	0021      	movs	r1, r4
    2724:	6813      	ldr	r3, [r2, #0]
    2726:	315c      	adds	r1, #92	; 0x5c
    2728:	54cd      	strb	r5, [r1, r3]
    _iHead = i ;
    272a:	6016      	str	r6, [r2, #0]
    sercom->enableDataRegisterEmptyInterruptUART();
    272c:	6920      	ldr	r0, [r4, #16]
    272e:	f7ff fda3 	bl	2278 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    2732:	2001      	movs	r0, #1
    2734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	e000ed00 	.word	0xe000ed00
    273c:	e000e100 	.word	0xe000e100
    2740:	e000ed1c 	.word	0xe000ed1c

00002744 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    2744:	6d82      	ldr	r2, [r0, #88]	; 0x58
    2746:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
    2748:	b570      	push	{r4, r5, r6, lr}
    274a:	0004      	movs	r4, r0
    274c:	429a      	cmp	r2, r3
    274e:	d01a      	beq.n	2786 <_ZN4Uart4readEv+0x42>
  return (uint32_t)(index + 1) % N;
    2750:	223f      	movs	r2, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
    2752:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2754:	18c3      	adds	r3, r0, r3
    2756:	7d1d      	ldrb	r5, [r3, #20]
  _iTail = nextIndex(_iTail);
    2758:	6d83      	ldr	r3, [r0, #88]	; 0x58
  return (uint32_t)(index + 1) % N;
    275a:	3301      	adds	r3, #1
    275c:	4013      	ands	r3, r2
  _iTail = nextIndex(_iTail);
    275e:	6583      	str	r3, [r0, #88]	; 0x58
  if (uc_pinRTS != NO_RTS_PIN) {
    2760:	0023      	movs	r3, r4
    2762:	33a8      	adds	r3, #168	; 0xa8
    2764:	781b      	ldrb	r3, [r3, #0]
    2766:	2bff      	cmp	r3, #255	; 0xff
    2768:	d00b      	beq.n	2782 <_ZN4Uart4readEv+0x3e>
  int c = rxBuffer.read_char();
    276a:	0020      	movs	r0, r4
    276c:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    276e:	f7ff ff22 	bl	25b6 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    2772:	280a      	cmp	r0, #10
    2774:	dd05      	ble.n	2782 <_ZN4Uart4readEv+0x3e>
      *pul_outclrRTS = ul_pinMaskRTS;
    2776:	0023      	movs	r3, r4
    2778:	34b4      	adds	r4, #180	; 0xb4
    277a:	33b0      	adds	r3, #176	; 0xb0
    277c:	681b      	ldr	r3, [r3, #0]
    277e:	6822      	ldr	r2, [r4, #0]
    2780:	601a      	str	r2, [r3, #0]
}
    2782:	0028      	movs	r0, r5
    2784:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    2786:	2501      	movs	r5, #1
    2788:	426d      	negs	r5, r5
    278a:	e7e9      	b.n	2760 <_ZN4Uart4readEv+0x1c>

0000278c <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    278c:	203f      	movs	r0, #63	; 0x3f
    278e:	4770      	bx	lr

00002790 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    2790:	b513      	push	{r0, r1, r4, lr}
    2792:	466b      	mov	r3, sp
	return write(&c, 1);
    2794:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    2796:	71d9      	strb	r1, [r3, #7]
    2798:	3307      	adds	r3, #7
	return write(&c, 1);
    279a:	6854      	ldr	r4, [r2, #4]
    279c:	0019      	movs	r1, r3
    279e:	2201      	movs	r2, #1
    27a0:	47a0      	blx	r4
}
    27a2:	bd16      	pop	{r1, r2, r4, pc}

000027a4 <_ZN7Serial_9availableEv>:
{
    27a4:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    27a6:	2102      	movs	r1, #2
    27a8:	6900      	ldr	r0, [r0, #16]
    27aa:	f7fe fda9 	bl	1300 <_ZN14USBDeviceClass9availableEm>
}
    27ae:	bd10      	pop	{r4, pc}

000027b0 <_ZN7Serial_5flushEv>:
{
    27b0:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    27b2:	2103      	movs	r1, #3
    27b4:	6900      	ldr	r0, [r0, #16]
    27b6:	f7fe fdb9 	bl	132c <_ZN14USBDeviceClass5flushEm>
}
    27ba:	bd10      	pop	{r4, pc}

000027bc <_ZN7Serial_5writeEPKhj>:
{
    27bc:	b510      	push	{r4, lr}
    27be:	0013      	movs	r3, r2
    27c0:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    27c2:	000a      	movs	r2, r1
    27c4:	6900      	ldr	r0, [r0, #16]
    27c6:	2103      	movs	r1, #3
    27c8:	f7fe feaa 	bl	1520 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    27cc:	2800      	cmp	r0, #0
    27ce:	d101      	bne.n	27d4 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    27d0:	2301      	movs	r3, #1
    27d2:	6063      	str	r3, [r4, #4]
}
    27d4:	bd10      	pop	{r4, pc}
	...

000027d8 <_ZN7Serial_4peekEv>:
{
    27d8:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    27da:	4c05      	ldr	r4, [pc, #20]	; (27f0 <_ZN7Serial_4peekEv+0x18>)
    27dc:	6823      	ldr	r3, [r4, #0]
    27de:	1c5a      	adds	r2, r3, #1
    27e0:	d104      	bne.n	27ec <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    27e2:	6803      	ldr	r3, [r0, #0]
    27e4:	695b      	ldr	r3, [r3, #20]
    27e6:	4798      	blx	r3
    27e8:	0003      	movs	r3, r0
    27ea:	6020      	str	r0, [r4, #0]
}
    27ec:	0018      	movs	r0, r3
    27ee:	bd10      	pop	{r4, pc}
    27f0:	200000a8 	.word	0x200000a8

000027f4 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    27f4:	4b07      	ldr	r3, [pc, #28]	; (2814 <_ZN7Serial_4readEv+0x20>)
{
    27f6:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    27f8:	6818      	ldr	r0, [r3, #0]
{
    27fa:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    27fc:	1c41      	adds	r1, r0, #1
    27fe:	d003      	beq.n	2808 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    2800:	2201      	movs	r2, #1
    2802:	4252      	negs	r2, r2
    2804:	601a      	str	r2, [r3, #0]
}
    2806:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    2808:	2102      	movs	r1, #2
    280a:	6910      	ldr	r0, [r2, #16]
    280c:	f7fe fe7a 	bl	1504 <_ZN14USBDeviceClass4recvEm>
    2810:	e7f9      	b.n	2806 <_ZN7Serial_4readEv+0x12>
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	200000a8 	.word	0x200000a8

00002818 <_Z16CDC_GetInterfacePh>:
{
    2818:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    281a:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    281c:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    281e:	3302      	adds	r3, #2
    2820:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    2822:	4902      	ldr	r1, [pc, #8]	; (282c <_Z16CDC_GetInterfacePh+0x14>)
    2824:	4802      	ldr	r0, [pc, #8]	; (2830 <_Z16CDC_GetInterfacePh+0x18>)
    2826:	f7fe ff27 	bl	1678 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    282a:	bd10      	pop	{r4, pc}
    282c:	20000064 	.word	0x20000064
    2830:	20000750 	.word	0x20000750

00002834 <_Z9CDC_SetupR8USBSetup>:
{
    2834:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    2836:	7801      	ldrb	r1, [r0, #0]
{
    2838:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    283a:	7842      	ldrb	r2, [r0, #1]
	return false;
    283c:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    283e:	29a1      	cmp	r1, #161	; 0xa1
    2840:	d108      	bne.n	2854 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    2842:	2a21      	cmp	r2, #33	; 0x21
    2844:	d105      	bne.n	2852 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    2846:	3a1a      	subs	r2, #26
    2848:	4916      	ldr	r1, [pc, #88]	; (28a4 <_Z9CDC_SetupR8USBSetup+0x70>)
    284a:	4817      	ldr	r0, [pc, #92]	; (28a8 <_Z9CDC_SetupR8USBSetup+0x74>)
    284c:	f7fe ff14 	bl	1678 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    2850:	2001      	movs	r0, #1
}
    2852:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    2854:	2921      	cmp	r1, #33	; 0x21
    2856:	d1fc      	bne.n	2852 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    2858:	2a20      	cmp	r2, #32
    285a:	d111      	bne.n	2880 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    285c:	3a19      	subs	r2, #25
    285e:	4911      	ldr	r1, [pc, #68]	; (28a4 <_Z9CDC_SetupR8USBSetup+0x70>)
    2860:	4811      	ldr	r0, [pc, #68]	; (28a8 <_Z9CDC_SetupR8USBSetup+0x74>)
    2862:	f7fe fda7 	bl	13b4 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    2866:	2296      	movs	r2, #150	; 0x96
    2868:	4b0e      	ldr	r3, [pc, #56]	; (28a4 <_Z9CDC_SetupR8USBSetup+0x70>)
    286a:	00d2      	lsls	r2, r2, #3
    286c:	6819      	ldr	r1, [r3, #0]
    286e:	4291      	cmp	r1, r2
    2870:	d103      	bne.n	287a <_Z9CDC_SetupR8USBSetup+0x46>
    2872:	2401      	movs	r4, #1
    2874:	79d8      	ldrb	r0, [r3, #7]
    2876:	4004      	ands	r4, r0
    2878:	d00e      	beq.n	2898 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    287a:	f7fe f8af 	bl	9dc <cancelReset>
    287e:	e00e      	b.n	289e <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    2880:	2a22      	cmp	r2, #34	; 0x22
    2882:	d103      	bne.n	288c <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    2884:	789a      	ldrb	r2, [r3, #2]
    2886:	4b07      	ldr	r3, [pc, #28]	; (28a4 <_Z9CDC_SetupR8USBSetup+0x70>)
    2888:	71da      	strb	r2, [r3, #7]
    288a:	e7ec      	b.n	2866 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    288c:	2a23      	cmp	r2, #35	; 0x23
    288e:	d1e0      	bne.n	2852 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    2890:	885a      	ldrh	r2, [r3, #2]
    2892:	4b06      	ldr	r3, [pc, #24]	; (28ac <_Z9CDC_SetupR8USBSetup+0x78>)
    2894:	601a      	str	r2, [r3, #0]
			return false;
    2896:	e7dc      	b.n	2852 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    2898:	20fa      	movs	r0, #250	; 0xfa
    289a:	f7fe f899 	bl	9d0 <initiateReset>
			return false;
    289e:	2000      	movs	r0, #0
    28a0:	e7d7      	b.n	2852 <_Z9CDC_SetupR8USBSetup+0x1e>
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	2000005c 	.word	0x2000005c
    28a8:	20000750 	.word	0x20000750
    28ac:	20000058 	.word	0x20000058

000028b0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    28b0:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    28b2:	2100      	movs	r1, #0
    28b4:	4b05      	ldr	r3, [pc, #20]	; (28cc <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    28b6:	0092      	lsls	r2, r2, #2
    28b8:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    28ba:	4a05      	ldr	r2, [pc, #20]	; (28d0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    28bc:	6059      	str	r1, [r3, #4]
    28be:	3208      	adds	r2, #8
    28c0:	601a      	str	r2, [r3, #0]
    28c2:	4a04      	ldr	r2, [pc, #16]	; (28d4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    28c4:	7619      	strb	r1, [r3, #24]
    28c6:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    28c8:	4770      	bx	lr
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	20000ea4 	.word	0x20000ea4
    28d0:	00003fc4 	.word	0x00003fc4
    28d4:	20000750 	.word	0x20000750

000028d8 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    28d8:	b570      	push	{r4, r5, r6, lr}
    28da:	000e      	movs	r6, r1
	int sent = 0;
    28dc:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    28de:	6844      	ldr	r4, [r0, #4]
    28e0:	2c00      	cmp	r4, #0
    28e2:	d00b      	beq.n	28fc <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    28e4:	6823      	ldr	r3, [r4, #0]
    28e6:	0031      	movs	r1, r6
    28e8:	685b      	ldr	r3, [r3, #4]
    28ea:	0020      	movs	r0, r4
    28ec:	4798      	blx	r3
		if (res < 0)
    28ee:	2800      	cmp	r0, #0
    28f0:	db02      	blt.n	28f8 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    28f2:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    28f4:	68e4      	ldr	r4, [r4, #12]
    28f6:	e7f3      	b.n	28e0 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    28f8:	2501      	movs	r5, #1
    28fa:	426d      	negs	r5, r5
	}
	return sent;
}
    28fc:	0028      	movs	r0, r5
    28fe:	bd70      	pop	{r4, r5, r6, pc}

00002900 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    2900:	b570      	push	{r4, r5, r6, lr}
    2902:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2904:	6844      	ldr	r4, [r0, #4]
    2906:	2c00      	cmp	r4, #0
    2908:	d008      	beq.n	291c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    290a:	6823      	ldr	r3, [r4, #0]
    290c:	0029      	movs	r1, r5
    290e:	689b      	ldr	r3, [r3, #8]
    2910:	0020      	movs	r0, r4
    2912:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    2914:	2800      	cmp	r0, #0
    2916:	d102      	bne.n	291e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    2918:	68e4      	ldr	r4, [r4, #12]
    291a:	e7f4      	b.n	2906 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    291c:	0020      	movs	r0, r4
}
    291e:	bd70      	pop	{r4, r5, r6, pc}

00002920 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    2920:	b570      	push	{r4, r5, r6, lr}
    2922:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    2924:	6844      	ldr	r4, [r0, #4]
    2926:	2c00      	cmp	r4, #0
    2928:	d007      	beq.n	293a <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    292a:	6823      	ldr	r3, [r4, #0]
    292c:	0029      	movs	r1, r5
    292e:	0020      	movs	r0, r4
    2930:	68db      	ldr	r3, [r3, #12]
    2932:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    2934:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    2936:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    2938:	e7f5      	b.n	2926 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    293a:	702c      	strb	r4, [r5, #0]
}
    293c:	bd70      	pop	{r4, r5, r6, pc}

0000293e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    293e:	b570      	push	{r4, r5, r6, lr}
    2940:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    2942:	6844      	ldr	r4, [r0, #4]
    2944:	2c00      	cmp	r4, #0
    2946:	d008      	beq.n	295a <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    2948:	6823      	ldr	r3, [r4, #0]
    294a:	0029      	movs	r1, r5
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	0020      	movs	r0, r4
    2950:	4798      	blx	r3
    2952:	2800      	cmp	r0, #0
    2954:	d102      	bne.n	295c <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    2956:	68e4      	ldr	r4, [r4, #12]
    2958:	e7f4      	b.n	2944 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    295a:	0020      	movs	r0, r4
}
    295c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002960 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2960:	2101      	movs	r1, #1
    2962:	4a06      	ldr	r2, [pc, #24]	; (297c <_Z12PluggableUSBv+0x1c>)
{
    2964:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    2966:	6813      	ldr	r3, [r2, #0]
    2968:	4805      	ldr	r0, [pc, #20]	; (2980 <_Z12PluggableUSBv+0x20>)
    296a:	400b      	ands	r3, r1
    296c:	d105      	bne.n	297a <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    296e:	2402      	movs	r4, #2
    2970:	7004      	strb	r4, [r0, #0]
    2972:	1924      	adds	r4, r4, r4
    2974:	7044      	strb	r4, [r0, #1]
    2976:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    2978:	6011      	str	r1, [r2, #0]
}
    297a:	bd10      	pop	{r4, pc}
    297c:	20000ec0 	.word	0x20000ec0
    2980:	20000ec4 	.word	0x20000ec4

00002984 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2986:	0006      	movs	r6, r0
    2988:	000d      	movs	r5, r1
    298a:	000c      	movs	r4, r1
    298c:	188b      	adds	r3, r1, r2
    298e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    2990:	9b01      	ldr	r3, [sp, #4]
    2992:	1b67      	subs	r7, r4, r5
    2994:	429c      	cmp	r4, r3
    2996:	d007      	beq.n	29a8 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    2998:	6833      	ldr	r3, [r6, #0]
    299a:	7821      	ldrb	r1, [r4, #0]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	0030      	movs	r0, r6
    29a0:	4798      	blx	r3
    29a2:	3401      	adds	r4, #1
    29a4:	2800      	cmp	r0, #0
    29a6:	d1f3      	bne.n	2990 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    29a8:	0038      	movs	r0, r7
    29aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000029ac <__gnu_thumb1_case_uqi>:
    29ac:	b402      	push	{r1}
    29ae:	4671      	mov	r1, lr
    29b0:	0849      	lsrs	r1, r1, #1
    29b2:	0049      	lsls	r1, r1, #1
    29b4:	5c09      	ldrb	r1, [r1, r0]
    29b6:	0049      	lsls	r1, r1, #1
    29b8:	448e      	add	lr, r1
    29ba:	bc02      	pop	{r1}
    29bc:	4770      	bx	lr
    29be:	46c0      	nop			; (mov r8, r8)

000029c0 <__udivsi3>:
    29c0:	2200      	movs	r2, #0
    29c2:	0843      	lsrs	r3, r0, #1
    29c4:	428b      	cmp	r3, r1
    29c6:	d374      	bcc.n	2ab2 <__udivsi3+0xf2>
    29c8:	0903      	lsrs	r3, r0, #4
    29ca:	428b      	cmp	r3, r1
    29cc:	d35f      	bcc.n	2a8e <__udivsi3+0xce>
    29ce:	0a03      	lsrs	r3, r0, #8
    29d0:	428b      	cmp	r3, r1
    29d2:	d344      	bcc.n	2a5e <__udivsi3+0x9e>
    29d4:	0b03      	lsrs	r3, r0, #12
    29d6:	428b      	cmp	r3, r1
    29d8:	d328      	bcc.n	2a2c <__udivsi3+0x6c>
    29da:	0c03      	lsrs	r3, r0, #16
    29dc:	428b      	cmp	r3, r1
    29de:	d30d      	bcc.n	29fc <__udivsi3+0x3c>
    29e0:	22ff      	movs	r2, #255	; 0xff
    29e2:	0209      	lsls	r1, r1, #8
    29e4:	ba12      	rev	r2, r2
    29e6:	0c03      	lsrs	r3, r0, #16
    29e8:	428b      	cmp	r3, r1
    29ea:	d302      	bcc.n	29f2 <__udivsi3+0x32>
    29ec:	1212      	asrs	r2, r2, #8
    29ee:	0209      	lsls	r1, r1, #8
    29f0:	d065      	beq.n	2abe <__udivsi3+0xfe>
    29f2:	0b03      	lsrs	r3, r0, #12
    29f4:	428b      	cmp	r3, r1
    29f6:	d319      	bcc.n	2a2c <__udivsi3+0x6c>
    29f8:	e000      	b.n	29fc <__udivsi3+0x3c>
    29fa:	0a09      	lsrs	r1, r1, #8
    29fc:	0bc3      	lsrs	r3, r0, #15
    29fe:	428b      	cmp	r3, r1
    2a00:	d301      	bcc.n	2a06 <__udivsi3+0x46>
    2a02:	03cb      	lsls	r3, r1, #15
    2a04:	1ac0      	subs	r0, r0, r3
    2a06:	4152      	adcs	r2, r2
    2a08:	0b83      	lsrs	r3, r0, #14
    2a0a:	428b      	cmp	r3, r1
    2a0c:	d301      	bcc.n	2a12 <__udivsi3+0x52>
    2a0e:	038b      	lsls	r3, r1, #14
    2a10:	1ac0      	subs	r0, r0, r3
    2a12:	4152      	adcs	r2, r2
    2a14:	0b43      	lsrs	r3, r0, #13
    2a16:	428b      	cmp	r3, r1
    2a18:	d301      	bcc.n	2a1e <__udivsi3+0x5e>
    2a1a:	034b      	lsls	r3, r1, #13
    2a1c:	1ac0      	subs	r0, r0, r3
    2a1e:	4152      	adcs	r2, r2
    2a20:	0b03      	lsrs	r3, r0, #12
    2a22:	428b      	cmp	r3, r1
    2a24:	d301      	bcc.n	2a2a <__udivsi3+0x6a>
    2a26:	030b      	lsls	r3, r1, #12
    2a28:	1ac0      	subs	r0, r0, r3
    2a2a:	4152      	adcs	r2, r2
    2a2c:	0ac3      	lsrs	r3, r0, #11
    2a2e:	428b      	cmp	r3, r1
    2a30:	d301      	bcc.n	2a36 <__udivsi3+0x76>
    2a32:	02cb      	lsls	r3, r1, #11
    2a34:	1ac0      	subs	r0, r0, r3
    2a36:	4152      	adcs	r2, r2
    2a38:	0a83      	lsrs	r3, r0, #10
    2a3a:	428b      	cmp	r3, r1
    2a3c:	d301      	bcc.n	2a42 <__udivsi3+0x82>
    2a3e:	028b      	lsls	r3, r1, #10
    2a40:	1ac0      	subs	r0, r0, r3
    2a42:	4152      	adcs	r2, r2
    2a44:	0a43      	lsrs	r3, r0, #9
    2a46:	428b      	cmp	r3, r1
    2a48:	d301      	bcc.n	2a4e <__udivsi3+0x8e>
    2a4a:	024b      	lsls	r3, r1, #9
    2a4c:	1ac0      	subs	r0, r0, r3
    2a4e:	4152      	adcs	r2, r2
    2a50:	0a03      	lsrs	r3, r0, #8
    2a52:	428b      	cmp	r3, r1
    2a54:	d301      	bcc.n	2a5a <__udivsi3+0x9a>
    2a56:	020b      	lsls	r3, r1, #8
    2a58:	1ac0      	subs	r0, r0, r3
    2a5a:	4152      	adcs	r2, r2
    2a5c:	d2cd      	bcs.n	29fa <__udivsi3+0x3a>
    2a5e:	09c3      	lsrs	r3, r0, #7
    2a60:	428b      	cmp	r3, r1
    2a62:	d301      	bcc.n	2a68 <__udivsi3+0xa8>
    2a64:	01cb      	lsls	r3, r1, #7
    2a66:	1ac0      	subs	r0, r0, r3
    2a68:	4152      	adcs	r2, r2
    2a6a:	0983      	lsrs	r3, r0, #6
    2a6c:	428b      	cmp	r3, r1
    2a6e:	d301      	bcc.n	2a74 <__udivsi3+0xb4>
    2a70:	018b      	lsls	r3, r1, #6
    2a72:	1ac0      	subs	r0, r0, r3
    2a74:	4152      	adcs	r2, r2
    2a76:	0943      	lsrs	r3, r0, #5
    2a78:	428b      	cmp	r3, r1
    2a7a:	d301      	bcc.n	2a80 <__udivsi3+0xc0>
    2a7c:	014b      	lsls	r3, r1, #5
    2a7e:	1ac0      	subs	r0, r0, r3
    2a80:	4152      	adcs	r2, r2
    2a82:	0903      	lsrs	r3, r0, #4
    2a84:	428b      	cmp	r3, r1
    2a86:	d301      	bcc.n	2a8c <__udivsi3+0xcc>
    2a88:	010b      	lsls	r3, r1, #4
    2a8a:	1ac0      	subs	r0, r0, r3
    2a8c:	4152      	adcs	r2, r2
    2a8e:	08c3      	lsrs	r3, r0, #3
    2a90:	428b      	cmp	r3, r1
    2a92:	d301      	bcc.n	2a98 <__udivsi3+0xd8>
    2a94:	00cb      	lsls	r3, r1, #3
    2a96:	1ac0      	subs	r0, r0, r3
    2a98:	4152      	adcs	r2, r2
    2a9a:	0883      	lsrs	r3, r0, #2
    2a9c:	428b      	cmp	r3, r1
    2a9e:	d301      	bcc.n	2aa4 <__udivsi3+0xe4>
    2aa0:	008b      	lsls	r3, r1, #2
    2aa2:	1ac0      	subs	r0, r0, r3
    2aa4:	4152      	adcs	r2, r2
    2aa6:	0843      	lsrs	r3, r0, #1
    2aa8:	428b      	cmp	r3, r1
    2aaa:	d301      	bcc.n	2ab0 <__udivsi3+0xf0>
    2aac:	004b      	lsls	r3, r1, #1
    2aae:	1ac0      	subs	r0, r0, r3
    2ab0:	4152      	adcs	r2, r2
    2ab2:	1a41      	subs	r1, r0, r1
    2ab4:	d200      	bcs.n	2ab8 <__udivsi3+0xf8>
    2ab6:	4601      	mov	r1, r0
    2ab8:	4152      	adcs	r2, r2
    2aba:	4610      	mov	r0, r2
    2abc:	4770      	bx	lr
    2abe:	e7ff      	b.n	2ac0 <__udivsi3+0x100>
    2ac0:	b501      	push	{r0, lr}
    2ac2:	2000      	movs	r0, #0
    2ac4:	f000 f8f0 	bl	2ca8 <__aeabi_idiv0>
    2ac8:	bd02      	pop	{r1, pc}
    2aca:	46c0      	nop			; (mov r8, r8)

00002acc <__aeabi_uidivmod>:
    2acc:	2900      	cmp	r1, #0
    2ace:	d0f7      	beq.n	2ac0 <__udivsi3+0x100>
    2ad0:	e776      	b.n	29c0 <__udivsi3>
    2ad2:	4770      	bx	lr

00002ad4 <__divsi3>:
    2ad4:	4603      	mov	r3, r0
    2ad6:	430b      	orrs	r3, r1
    2ad8:	d47f      	bmi.n	2bda <__divsi3+0x106>
    2ada:	2200      	movs	r2, #0
    2adc:	0843      	lsrs	r3, r0, #1
    2ade:	428b      	cmp	r3, r1
    2ae0:	d374      	bcc.n	2bcc <__divsi3+0xf8>
    2ae2:	0903      	lsrs	r3, r0, #4
    2ae4:	428b      	cmp	r3, r1
    2ae6:	d35f      	bcc.n	2ba8 <__divsi3+0xd4>
    2ae8:	0a03      	lsrs	r3, r0, #8
    2aea:	428b      	cmp	r3, r1
    2aec:	d344      	bcc.n	2b78 <__divsi3+0xa4>
    2aee:	0b03      	lsrs	r3, r0, #12
    2af0:	428b      	cmp	r3, r1
    2af2:	d328      	bcc.n	2b46 <__divsi3+0x72>
    2af4:	0c03      	lsrs	r3, r0, #16
    2af6:	428b      	cmp	r3, r1
    2af8:	d30d      	bcc.n	2b16 <__divsi3+0x42>
    2afa:	22ff      	movs	r2, #255	; 0xff
    2afc:	0209      	lsls	r1, r1, #8
    2afe:	ba12      	rev	r2, r2
    2b00:	0c03      	lsrs	r3, r0, #16
    2b02:	428b      	cmp	r3, r1
    2b04:	d302      	bcc.n	2b0c <__divsi3+0x38>
    2b06:	1212      	asrs	r2, r2, #8
    2b08:	0209      	lsls	r1, r1, #8
    2b0a:	d065      	beq.n	2bd8 <__divsi3+0x104>
    2b0c:	0b03      	lsrs	r3, r0, #12
    2b0e:	428b      	cmp	r3, r1
    2b10:	d319      	bcc.n	2b46 <__divsi3+0x72>
    2b12:	e000      	b.n	2b16 <__divsi3+0x42>
    2b14:	0a09      	lsrs	r1, r1, #8
    2b16:	0bc3      	lsrs	r3, r0, #15
    2b18:	428b      	cmp	r3, r1
    2b1a:	d301      	bcc.n	2b20 <__divsi3+0x4c>
    2b1c:	03cb      	lsls	r3, r1, #15
    2b1e:	1ac0      	subs	r0, r0, r3
    2b20:	4152      	adcs	r2, r2
    2b22:	0b83      	lsrs	r3, r0, #14
    2b24:	428b      	cmp	r3, r1
    2b26:	d301      	bcc.n	2b2c <__divsi3+0x58>
    2b28:	038b      	lsls	r3, r1, #14
    2b2a:	1ac0      	subs	r0, r0, r3
    2b2c:	4152      	adcs	r2, r2
    2b2e:	0b43      	lsrs	r3, r0, #13
    2b30:	428b      	cmp	r3, r1
    2b32:	d301      	bcc.n	2b38 <__divsi3+0x64>
    2b34:	034b      	lsls	r3, r1, #13
    2b36:	1ac0      	subs	r0, r0, r3
    2b38:	4152      	adcs	r2, r2
    2b3a:	0b03      	lsrs	r3, r0, #12
    2b3c:	428b      	cmp	r3, r1
    2b3e:	d301      	bcc.n	2b44 <__divsi3+0x70>
    2b40:	030b      	lsls	r3, r1, #12
    2b42:	1ac0      	subs	r0, r0, r3
    2b44:	4152      	adcs	r2, r2
    2b46:	0ac3      	lsrs	r3, r0, #11
    2b48:	428b      	cmp	r3, r1
    2b4a:	d301      	bcc.n	2b50 <__divsi3+0x7c>
    2b4c:	02cb      	lsls	r3, r1, #11
    2b4e:	1ac0      	subs	r0, r0, r3
    2b50:	4152      	adcs	r2, r2
    2b52:	0a83      	lsrs	r3, r0, #10
    2b54:	428b      	cmp	r3, r1
    2b56:	d301      	bcc.n	2b5c <__divsi3+0x88>
    2b58:	028b      	lsls	r3, r1, #10
    2b5a:	1ac0      	subs	r0, r0, r3
    2b5c:	4152      	adcs	r2, r2
    2b5e:	0a43      	lsrs	r3, r0, #9
    2b60:	428b      	cmp	r3, r1
    2b62:	d301      	bcc.n	2b68 <__divsi3+0x94>
    2b64:	024b      	lsls	r3, r1, #9
    2b66:	1ac0      	subs	r0, r0, r3
    2b68:	4152      	adcs	r2, r2
    2b6a:	0a03      	lsrs	r3, r0, #8
    2b6c:	428b      	cmp	r3, r1
    2b6e:	d301      	bcc.n	2b74 <__divsi3+0xa0>
    2b70:	020b      	lsls	r3, r1, #8
    2b72:	1ac0      	subs	r0, r0, r3
    2b74:	4152      	adcs	r2, r2
    2b76:	d2cd      	bcs.n	2b14 <__divsi3+0x40>
    2b78:	09c3      	lsrs	r3, r0, #7
    2b7a:	428b      	cmp	r3, r1
    2b7c:	d301      	bcc.n	2b82 <__divsi3+0xae>
    2b7e:	01cb      	lsls	r3, r1, #7
    2b80:	1ac0      	subs	r0, r0, r3
    2b82:	4152      	adcs	r2, r2
    2b84:	0983      	lsrs	r3, r0, #6
    2b86:	428b      	cmp	r3, r1
    2b88:	d301      	bcc.n	2b8e <__divsi3+0xba>
    2b8a:	018b      	lsls	r3, r1, #6
    2b8c:	1ac0      	subs	r0, r0, r3
    2b8e:	4152      	adcs	r2, r2
    2b90:	0943      	lsrs	r3, r0, #5
    2b92:	428b      	cmp	r3, r1
    2b94:	d301      	bcc.n	2b9a <__divsi3+0xc6>
    2b96:	014b      	lsls	r3, r1, #5
    2b98:	1ac0      	subs	r0, r0, r3
    2b9a:	4152      	adcs	r2, r2
    2b9c:	0903      	lsrs	r3, r0, #4
    2b9e:	428b      	cmp	r3, r1
    2ba0:	d301      	bcc.n	2ba6 <__divsi3+0xd2>
    2ba2:	010b      	lsls	r3, r1, #4
    2ba4:	1ac0      	subs	r0, r0, r3
    2ba6:	4152      	adcs	r2, r2
    2ba8:	08c3      	lsrs	r3, r0, #3
    2baa:	428b      	cmp	r3, r1
    2bac:	d301      	bcc.n	2bb2 <__divsi3+0xde>
    2bae:	00cb      	lsls	r3, r1, #3
    2bb0:	1ac0      	subs	r0, r0, r3
    2bb2:	4152      	adcs	r2, r2
    2bb4:	0883      	lsrs	r3, r0, #2
    2bb6:	428b      	cmp	r3, r1
    2bb8:	d301      	bcc.n	2bbe <__divsi3+0xea>
    2bba:	008b      	lsls	r3, r1, #2
    2bbc:	1ac0      	subs	r0, r0, r3
    2bbe:	4152      	adcs	r2, r2
    2bc0:	0843      	lsrs	r3, r0, #1
    2bc2:	428b      	cmp	r3, r1
    2bc4:	d301      	bcc.n	2bca <__divsi3+0xf6>
    2bc6:	004b      	lsls	r3, r1, #1
    2bc8:	1ac0      	subs	r0, r0, r3
    2bca:	4152      	adcs	r2, r2
    2bcc:	1a41      	subs	r1, r0, r1
    2bce:	d200      	bcs.n	2bd2 <__divsi3+0xfe>
    2bd0:	4601      	mov	r1, r0
    2bd2:	4152      	adcs	r2, r2
    2bd4:	4610      	mov	r0, r2
    2bd6:	4770      	bx	lr
    2bd8:	e05d      	b.n	2c96 <__divsi3+0x1c2>
    2bda:	0fca      	lsrs	r2, r1, #31
    2bdc:	d000      	beq.n	2be0 <__divsi3+0x10c>
    2bde:	4249      	negs	r1, r1
    2be0:	1003      	asrs	r3, r0, #32
    2be2:	d300      	bcc.n	2be6 <__divsi3+0x112>
    2be4:	4240      	negs	r0, r0
    2be6:	4053      	eors	r3, r2
    2be8:	2200      	movs	r2, #0
    2bea:	469c      	mov	ip, r3
    2bec:	0903      	lsrs	r3, r0, #4
    2bee:	428b      	cmp	r3, r1
    2bf0:	d32d      	bcc.n	2c4e <__divsi3+0x17a>
    2bf2:	0a03      	lsrs	r3, r0, #8
    2bf4:	428b      	cmp	r3, r1
    2bf6:	d312      	bcc.n	2c1e <__divsi3+0x14a>
    2bf8:	22fc      	movs	r2, #252	; 0xfc
    2bfa:	0189      	lsls	r1, r1, #6
    2bfc:	ba12      	rev	r2, r2
    2bfe:	0a03      	lsrs	r3, r0, #8
    2c00:	428b      	cmp	r3, r1
    2c02:	d30c      	bcc.n	2c1e <__divsi3+0x14a>
    2c04:	0189      	lsls	r1, r1, #6
    2c06:	1192      	asrs	r2, r2, #6
    2c08:	428b      	cmp	r3, r1
    2c0a:	d308      	bcc.n	2c1e <__divsi3+0x14a>
    2c0c:	0189      	lsls	r1, r1, #6
    2c0e:	1192      	asrs	r2, r2, #6
    2c10:	428b      	cmp	r3, r1
    2c12:	d304      	bcc.n	2c1e <__divsi3+0x14a>
    2c14:	0189      	lsls	r1, r1, #6
    2c16:	d03a      	beq.n	2c8e <__divsi3+0x1ba>
    2c18:	1192      	asrs	r2, r2, #6
    2c1a:	e000      	b.n	2c1e <__divsi3+0x14a>
    2c1c:	0989      	lsrs	r1, r1, #6
    2c1e:	09c3      	lsrs	r3, r0, #7
    2c20:	428b      	cmp	r3, r1
    2c22:	d301      	bcc.n	2c28 <__divsi3+0x154>
    2c24:	01cb      	lsls	r3, r1, #7
    2c26:	1ac0      	subs	r0, r0, r3
    2c28:	4152      	adcs	r2, r2
    2c2a:	0983      	lsrs	r3, r0, #6
    2c2c:	428b      	cmp	r3, r1
    2c2e:	d301      	bcc.n	2c34 <__divsi3+0x160>
    2c30:	018b      	lsls	r3, r1, #6
    2c32:	1ac0      	subs	r0, r0, r3
    2c34:	4152      	adcs	r2, r2
    2c36:	0943      	lsrs	r3, r0, #5
    2c38:	428b      	cmp	r3, r1
    2c3a:	d301      	bcc.n	2c40 <__divsi3+0x16c>
    2c3c:	014b      	lsls	r3, r1, #5
    2c3e:	1ac0      	subs	r0, r0, r3
    2c40:	4152      	adcs	r2, r2
    2c42:	0903      	lsrs	r3, r0, #4
    2c44:	428b      	cmp	r3, r1
    2c46:	d301      	bcc.n	2c4c <__divsi3+0x178>
    2c48:	010b      	lsls	r3, r1, #4
    2c4a:	1ac0      	subs	r0, r0, r3
    2c4c:	4152      	adcs	r2, r2
    2c4e:	08c3      	lsrs	r3, r0, #3
    2c50:	428b      	cmp	r3, r1
    2c52:	d301      	bcc.n	2c58 <__divsi3+0x184>
    2c54:	00cb      	lsls	r3, r1, #3
    2c56:	1ac0      	subs	r0, r0, r3
    2c58:	4152      	adcs	r2, r2
    2c5a:	0883      	lsrs	r3, r0, #2
    2c5c:	428b      	cmp	r3, r1
    2c5e:	d301      	bcc.n	2c64 <__divsi3+0x190>
    2c60:	008b      	lsls	r3, r1, #2
    2c62:	1ac0      	subs	r0, r0, r3
    2c64:	4152      	adcs	r2, r2
    2c66:	d2d9      	bcs.n	2c1c <__divsi3+0x148>
    2c68:	0843      	lsrs	r3, r0, #1
    2c6a:	428b      	cmp	r3, r1
    2c6c:	d301      	bcc.n	2c72 <__divsi3+0x19e>
    2c6e:	004b      	lsls	r3, r1, #1
    2c70:	1ac0      	subs	r0, r0, r3
    2c72:	4152      	adcs	r2, r2
    2c74:	1a41      	subs	r1, r0, r1
    2c76:	d200      	bcs.n	2c7a <__divsi3+0x1a6>
    2c78:	4601      	mov	r1, r0
    2c7a:	4663      	mov	r3, ip
    2c7c:	4152      	adcs	r2, r2
    2c7e:	105b      	asrs	r3, r3, #1
    2c80:	4610      	mov	r0, r2
    2c82:	d301      	bcc.n	2c88 <__divsi3+0x1b4>
    2c84:	4240      	negs	r0, r0
    2c86:	2b00      	cmp	r3, #0
    2c88:	d500      	bpl.n	2c8c <__divsi3+0x1b8>
    2c8a:	4249      	negs	r1, r1
    2c8c:	4770      	bx	lr
    2c8e:	4663      	mov	r3, ip
    2c90:	105b      	asrs	r3, r3, #1
    2c92:	d300      	bcc.n	2c96 <__divsi3+0x1c2>
    2c94:	4240      	negs	r0, r0
    2c96:	b501      	push	{r0, lr}
    2c98:	2000      	movs	r0, #0
    2c9a:	f000 f805 	bl	2ca8 <__aeabi_idiv0>
    2c9e:	bd02      	pop	{r1, pc}

00002ca0 <__aeabi_idivmod>:
    2ca0:	2900      	cmp	r1, #0
    2ca2:	d0f8      	beq.n	2c96 <__divsi3+0x1c2>
    2ca4:	e716      	b.n	2ad4 <__divsi3>
    2ca6:	4770      	bx	lr

00002ca8 <__aeabi_idiv0>:
    2ca8:	4770      	bx	lr
    2caa:	46c0      	nop			; (mov r8, r8)

00002cac <__aeabi_cfrcmple>:
    2cac:	4684      	mov	ip, r0
    2cae:	1c08      	adds	r0, r1, #0
    2cb0:	4661      	mov	r1, ip
    2cb2:	e7ff      	b.n	2cb4 <__aeabi_cfcmpeq>

00002cb4 <__aeabi_cfcmpeq>:
    2cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2cb6:	f000 fa2b 	bl	3110 <__lesf2>
    2cba:	2800      	cmp	r0, #0
    2cbc:	d401      	bmi.n	2cc2 <__aeabi_cfcmpeq+0xe>
    2cbe:	2100      	movs	r1, #0
    2cc0:	42c8      	cmn	r0, r1
    2cc2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002cc4 <__aeabi_fcmpeq>:
    2cc4:	b510      	push	{r4, lr}
    2cc6:	f000 f9bd 	bl	3044 <__eqsf2>
    2cca:	4240      	negs	r0, r0
    2ccc:	3001      	adds	r0, #1
    2cce:	bd10      	pop	{r4, pc}

00002cd0 <__aeabi_fcmplt>:
    2cd0:	b510      	push	{r4, lr}
    2cd2:	f000 fa1d 	bl	3110 <__lesf2>
    2cd6:	2800      	cmp	r0, #0
    2cd8:	db01      	blt.n	2cde <__aeabi_fcmplt+0xe>
    2cda:	2000      	movs	r0, #0
    2cdc:	bd10      	pop	{r4, pc}
    2cde:	2001      	movs	r0, #1
    2ce0:	bd10      	pop	{r4, pc}
    2ce2:	46c0      	nop			; (mov r8, r8)

00002ce4 <__aeabi_fcmple>:
    2ce4:	b510      	push	{r4, lr}
    2ce6:	f000 fa13 	bl	3110 <__lesf2>
    2cea:	2800      	cmp	r0, #0
    2cec:	dd01      	ble.n	2cf2 <__aeabi_fcmple+0xe>
    2cee:	2000      	movs	r0, #0
    2cf0:	bd10      	pop	{r4, pc}
    2cf2:	2001      	movs	r0, #1
    2cf4:	bd10      	pop	{r4, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)

00002cf8 <__aeabi_fcmpgt>:
    2cf8:	b510      	push	{r4, lr}
    2cfa:	f000 f9c9 	bl	3090 <__gesf2>
    2cfe:	2800      	cmp	r0, #0
    2d00:	dc01      	bgt.n	2d06 <__aeabi_fcmpgt+0xe>
    2d02:	2000      	movs	r0, #0
    2d04:	bd10      	pop	{r4, pc}
    2d06:	2001      	movs	r0, #1
    2d08:	bd10      	pop	{r4, pc}
    2d0a:	46c0      	nop			; (mov r8, r8)

00002d0c <__aeabi_fcmpge>:
    2d0c:	b510      	push	{r4, lr}
    2d0e:	f000 f9bf 	bl	3090 <__gesf2>
    2d12:	2800      	cmp	r0, #0
    2d14:	da01      	bge.n	2d1a <__aeabi_fcmpge+0xe>
    2d16:	2000      	movs	r0, #0
    2d18:	bd10      	pop	{r4, pc}
    2d1a:	2001      	movs	r0, #1
    2d1c:	bd10      	pop	{r4, pc}
    2d1e:	46c0      	nop			; (mov r8, r8)

00002d20 <__aeabi_fadd>:
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d22:	46c6      	mov	lr, r8
    2d24:	024e      	lsls	r6, r1, #9
    2d26:	0247      	lsls	r7, r0, #9
    2d28:	0a76      	lsrs	r6, r6, #9
    2d2a:	0a7b      	lsrs	r3, r7, #9
    2d2c:	0044      	lsls	r4, r0, #1
    2d2e:	0fc5      	lsrs	r5, r0, #31
    2d30:	00f7      	lsls	r7, r6, #3
    2d32:	0048      	lsls	r0, r1, #1
    2d34:	4698      	mov	r8, r3
    2d36:	b500      	push	{lr}
    2d38:	0e24      	lsrs	r4, r4, #24
    2d3a:	002a      	movs	r2, r5
    2d3c:	00db      	lsls	r3, r3, #3
    2d3e:	0e00      	lsrs	r0, r0, #24
    2d40:	0fc9      	lsrs	r1, r1, #31
    2d42:	46bc      	mov	ip, r7
    2d44:	428d      	cmp	r5, r1
    2d46:	d067      	beq.n	2e18 <__aeabi_fadd+0xf8>
    2d48:	1a22      	subs	r2, r4, r0
    2d4a:	2a00      	cmp	r2, #0
    2d4c:	dc00      	bgt.n	2d50 <__aeabi_fadd+0x30>
    2d4e:	e0a5      	b.n	2e9c <__aeabi_fadd+0x17c>
    2d50:	2800      	cmp	r0, #0
    2d52:	d13a      	bne.n	2dca <__aeabi_fadd+0xaa>
    2d54:	2f00      	cmp	r7, #0
    2d56:	d100      	bne.n	2d5a <__aeabi_fadd+0x3a>
    2d58:	e093      	b.n	2e82 <__aeabi_fadd+0x162>
    2d5a:	1e51      	subs	r1, r2, #1
    2d5c:	2900      	cmp	r1, #0
    2d5e:	d000      	beq.n	2d62 <__aeabi_fadd+0x42>
    2d60:	e0bc      	b.n	2edc <__aeabi_fadd+0x1bc>
    2d62:	2401      	movs	r4, #1
    2d64:	1bdb      	subs	r3, r3, r7
    2d66:	015a      	lsls	r2, r3, #5
    2d68:	d546      	bpl.n	2df8 <__aeabi_fadd+0xd8>
    2d6a:	019b      	lsls	r3, r3, #6
    2d6c:	099e      	lsrs	r6, r3, #6
    2d6e:	0030      	movs	r0, r6
    2d70:	f000 fd62 	bl	3838 <__clzsi2>
    2d74:	3805      	subs	r0, #5
    2d76:	4086      	lsls	r6, r0
    2d78:	4284      	cmp	r4, r0
    2d7a:	dd00      	ble.n	2d7e <__aeabi_fadd+0x5e>
    2d7c:	e09d      	b.n	2eba <__aeabi_fadd+0x19a>
    2d7e:	1b04      	subs	r4, r0, r4
    2d80:	0032      	movs	r2, r6
    2d82:	2020      	movs	r0, #32
    2d84:	3401      	adds	r4, #1
    2d86:	40e2      	lsrs	r2, r4
    2d88:	1b04      	subs	r4, r0, r4
    2d8a:	40a6      	lsls	r6, r4
    2d8c:	0033      	movs	r3, r6
    2d8e:	1e5e      	subs	r6, r3, #1
    2d90:	41b3      	sbcs	r3, r6
    2d92:	2400      	movs	r4, #0
    2d94:	4313      	orrs	r3, r2
    2d96:	075a      	lsls	r2, r3, #29
    2d98:	d004      	beq.n	2da4 <__aeabi_fadd+0x84>
    2d9a:	220f      	movs	r2, #15
    2d9c:	401a      	ands	r2, r3
    2d9e:	2a04      	cmp	r2, #4
    2da0:	d000      	beq.n	2da4 <__aeabi_fadd+0x84>
    2da2:	3304      	adds	r3, #4
    2da4:	015a      	lsls	r2, r3, #5
    2da6:	d529      	bpl.n	2dfc <__aeabi_fadd+0xdc>
    2da8:	3401      	adds	r4, #1
    2daa:	2cff      	cmp	r4, #255	; 0xff
    2dac:	d100      	bne.n	2db0 <__aeabi_fadd+0x90>
    2dae:	e081      	b.n	2eb4 <__aeabi_fadd+0x194>
    2db0:	002a      	movs	r2, r5
    2db2:	019b      	lsls	r3, r3, #6
    2db4:	0a5b      	lsrs	r3, r3, #9
    2db6:	b2e4      	uxtb	r4, r4
    2db8:	025b      	lsls	r3, r3, #9
    2dba:	05e4      	lsls	r4, r4, #23
    2dbc:	0a58      	lsrs	r0, r3, #9
    2dbe:	07d2      	lsls	r2, r2, #31
    2dc0:	4320      	orrs	r0, r4
    2dc2:	4310      	orrs	r0, r2
    2dc4:	bc04      	pop	{r2}
    2dc6:	4690      	mov	r8, r2
    2dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dca:	2cff      	cmp	r4, #255	; 0xff
    2dcc:	d0e3      	beq.n	2d96 <__aeabi_fadd+0x76>
    2dce:	2180      	movs	r1, #128	; 0x80
    2dd0:	0038      	movs	r0, r7
    2dd2:	04c9      	lsls	r1, r1, #19
    2dd4:	4308      	orrs	r0, r1
    2dd6:	4684      	mov	ip, r0
    2dd8:	2a1b      	cmp	r2, #27
    2dda:	dd00      	ble.n	2dde <__aeabi_fadd+0xbe>
    2ddc:	e082      	b.n	2ee4 <__aeabi_fadd+0x1c4>
    2dde:	2020      	movs	r0, #32
    2de0:	4661      	mov	r1, ip
    2de2:	40d1      	lsrs	r1, r2
    2de4:	1a82      	subs	r2, r0, r2
    2de6:	4660      	mov	r0, ip
    2de8:	4090      	lsls	r0, r2
    2dea:	0002      	movs	r2, r0
    2dec:	1e50      	subs	r0, r2, #1
    2dee:	4182      	sbcs	r2, r0
    2df0:	430a      	orrs	r2, r1
    2df2:	1a9b      	subs	r3, r3, r2
    2df4:	015a      	lsls	r2, r3, #5
    2df6:	d4b8      	bmi.n	2d6a <__aeabi_fadd+0x4a>
    2df8:	075a      	lsls	r2, r3, #29
    2dfa:	d1ce      	bne.n	2d9a <__aeabi_fadd+0x7a>
    2dfc:	08de      	lsrs	r6, r3, #3
    2dfe:	002a      	movs	r2, r5
    2e00:	2cff      	cmp	r4, #255	; 0xff
    2e02:	d13a      	bne.n	2e7a <__aeabi_fadd+0x15a>
    2e04:	2e00      	cmp	r6, #0
    2e06:	d100      	bne.n	2e0a <__aeabi_fadd+0xea>
    2e08:	e0ae      	b.n	2f68 <__aeabi_fadd+0x248>
    2e0a:	2380      	movs	r3, #128	; 0x80
    2e0c:	03db      	lsls	r3, r3, #15
    2e0e:	4333      	orrs	r3, r6
    2e10:	025b      	lsls	r3, r3, #9
    2e12:	0a5b      	lsrs	r3, r3, #9
    2e14:	24ff      	movs	r4, #255	; 0xff
    2e16:	e7cf      	b.n	2db8 <__aeabi_fadd+0x98>
    2e18:	1a21      	subs	r1, r4, r0
    2e1a:	2900      	cmp	r1, #0
    2e1c:	dd52      	ble.n	2ec4 <__aeabi_fadd+0x1a4>
    2e1e:	2800      	cmp	r0, #0
    2e20:	d031      	beq.n	2e86 <__aeabi_fadd+0x166>
    2e22:	2cff      	cmp	r4, #255	; 0xff
    2e24:	d0b7      	beq.n	2d96 <__aeabi_fadd+0x76>
    2e26:	2080      	movs	r0, #128	; 0x80
    2e28:	003e      	movs	r6, r7
    2e2a:	04c0      	lsls	r0, r0, #19
    2e2c:	4306      	orrs	r6, r0
    2e2e:	46b4      	mov	ip, r6
    2e30:	291b      	cmp	r1, #27
    2e32:	dd00      	ble.n	2e36 <__aeabi_fadd+0x116>
    2e34:	e0aa      	b.n	2f8c <__aeabi_fadd+0x26c>
    2e36:	2620      	movs	r6, #32
    2e38:	4660      	mov	r0, ip
    2e3a:	40c8      	lsrs	r0, r1
    2e3c:	1a71      	subs	r1, r6, r1
    2e3e:	4666      	mov	r6, ip
    2e40:	408e      	lsls	r6, r1
    2e42:	0031      	movs	r1, r6
    2e44:	1e4e      	subs	r6, r1, #1
    2e46:	41b1      	sbcs	r1, r6
    2e48:	4301      	orrs	r1, r0
    2e4a:	185b      	adds	r3, r3, r1
    2e4c:	0159      	lsls	r1, r3, #5
    2e4e:	d5d3      	bpl.n	2df8 <__aeabi_fadd+0xd8>
    2e50:	3401      	adds	r4, #1
    2e52:	2cff      	cmp	r4, #255	; 0xff
    2e54:	d100      	bne.n	2e58 <__aeabi_fadd+0x138>
    2e56:	e087      	b.n	2f68 <__aeabi_fadd+0x248>
    2e58:	2201      	movs	r2, #1
    2e5a:	4978      	ldr	r1, [pc, #480]	; (303c <__aeabi_fadd+0x31c>)
    2e5c:	401a      	ands	r2, r3
    2e5e:	085b      	lsrs	r3, r3, #1
    2e60:	400b      	ands	r3, r1
    2e62:	4313      	orrs	r3, r2
    2e64:	e797      	b.n	2d96 <__aeabi_fadd+0x76>
    2e66:	2c00      	cmp	r4, #0
    2e68:	d000      	beq.n	2e6c <__aeabi_fadd+0x14c>
    2e6a:	e0a7      	b.n	2fbc <__aeabi_fadd+0x29c>
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d000      	beq.n	2e72 <__aeabi_fadd+0x152>
    2e70:	e0b6      	b.n	2fe0 <__aeabi_fadd+0x2c0>
    2e72:	1e3b      	subs	r3, r7, #0
    2e74:	d162      	bne.n	2f3c <__aeabi_fadd+0x21c>
    2e76:	2600      	movs	r6, #0
    2e78:	2200      	movs	r2, #0
    2e7a:	0273      	lsls	r3, r6, #9
    2e7c:	0a5b      	lsrs	r3, r3, #9
    2e7e:	b2e4      	uxtb	r4, r4
    2e80:	e79a      	b.n	2db8 <__aeabi_fadd+0x98>
    2e82:	0014      	movs	r4, r2
    2e84:	e787      	b.n	2d96 <__aeabi_fadd+0x76>
    2e86:	2f00      	cmp	r7, #0
    2e88:	d04d      	beq.n	2f26 <__aeabi_fadd+0x206>
    2e8a:	1e48      	subs	r0, r1, #1
    2e8c:	2800      	cmp	r0, #0
    2e8e:	d157      	bne.n	2f40 <__aeabi_fadd+0x220>
    2e90:	4463      	add	r3, ip
    2e92:	2401      	movs	r4, #1
    2e94:	015a      	lsls	r2, r3, #5
    2e96:	d5af      	bpl.n	2df8 <__aeabi_fadd+0xd8>
    2e98:	2402      	movs	r4, #2
    2e9a:	e7dd      	b.n	2e58 <__aeabi_fadd+0x138>
    2e9c:	2a00      	cmp	r2, #0
    2e9e:	d124      	bne.n	2eea <__aeabi_fadd+0x1ca>
    2ea0:	1c62      	adds	r2, r4, #1
    2ea2:	b2d2      	uxtb	r2, r2
    2ea4:	2a01      	cmp	r2, #1
    2ea6:	ddde      	ble.n	2e66 <__aeabi_fadd+0x146>
    2ea8:	1bde      	subs	r6, r3, r7
    2eaa:	0172      	lsls	r2, r6, #5
    2eac:	d535      	bpl.n	2f1a <__aeabi_fadd+0x1fa>
    2eae:	1afe      	subs	r6, r7, r3
    2eb0:	000d      	movs	r5, r1
    2eb2:	e75c      	b.n	2d6e <__aeabi_fadd+0x4e>
    2eb4:	002a      	movs	r2, r5
    2eb6:	2300      	movs	r3, #0
    2eb8:	e77e      	b.n	2db8 <__aeabi_fadd+0x98>
    2eba:	0033      	movs	r3, r6
    2ebc:	4a60      	ldr	r2, [pc, #384]	; (3040 <__aeabi_fadd+0x320>)
    2ebe:	1a24      	subs	r4, r4, r0
    2ec0:	4013      	ands	r3, r2
    2ec2:	e768      	b.n	2d96 <__aeabi_fadd+0x76>
    2ec4:	2900      	cmp	r1, #0
    2ec6:	d163      	bne.n	2f90 <__aeabi_fadd+0x270>
    2ec8:	1c61      	adds	r1, r4, #1
    2eca:	b2c8      	uxtb	r0, r1
    2ecc:	2801      	cmp	r0, #1
    2ece:	dd4e      	ble.n	2f6e <__aeabi_fadd+0x24e>
    2ed0:	29ff      	cmp	r1, #255	; 0xff
    2ed2:	d049      	beq.n	2f68 <__aeabi_fadd+0x248>
    2ed4:	4463      	add	r3, ip
    2ed6:	085b      	lsrs	r3, r3, #1
    2ed8:	000c      	movs	r4, r1
    2eda:	e75c      	b.n	2d96 <__aeabi_fadd+0x76>
    2edc:	2aff      	cmp	r2, #255	; 0xff
    2ede:	d041      	beq.n	2f64 <__aeabi_fadd+0x244>
    2ee0:	000a      	movs	r2, r1
    2ee2:	e779      	b.n	2dd8 <__aeabi_fadd+0xb8>
    2ee4:	2201      	movs	r2, #1
    2ee6:	1a9b      	subs	r3, r3, r2
    2ee8:	e784      	b.n	2df4 <__aeabi_fadd+0xd4>
    2eea:	2c00      	cmp	r4, #0
    2eec:	d01d      	beq.n	2f2a <__aeabi_fadd+0x20a>
    2eee:	28ff      	cmp	r0, #255	; 0xff
    2ef0:	d022      	beq.n	2f38 <__aeabi_fadd+0x218>
    2ef2:	2480      	movs	r4, #128	; 0x80
    2ef4:	04e4      	lsls	r4, r4, #19
    2ef6:	4252      	negs	r2, r2
    2ef8:	4323      	orrs	r3, r4
    2efa:	2a1b      	cmp	r2, #27
    2efc:	dd00      	ble.n	2f00 <__aeabi_fadd+0x1e0>
    2efe:	e08a      	b.n	3016 <__aeabi_fadd+0x2f6>
    2f00:	001c      	movs	r4, r3
    2f02:	2520      	movs	r5, #32
    2f04:	40d4      	lsrs	r4, r2
    2f06:	1aaa      	subs	r2, r5, r2
    2f08:	4093      	lsls	r3, r2
    2f0a:	1e5a      	subs	r2, r3, #1
    2f0c:	4193      	sbcs	r3, r2
    2f0e:	4323      	orrs	r3, r4
    2f10:	4662      	mov	r2, ip
    2f12:	0004      	movs	r4, r0
    2f14:	1ad3      	subs	r3, r2, r3
    2f16:	000d      	movs	r5, r1
    2f18:	e725      	b.n	2d66 <__aeabi_fadd+0x46>
    2f1a:	2e00      	cmp	r6, #0
    2f1c:	d000      	beq.n	2f20 <__aeabi_fadd+0x200>
    2f1e:	e726      	b.n	2d6e <__aeabi_fadd+0x4e>
    2f20:	2200      	movs	r2, #0
    2f22:	2400      	movs	r4, #0
    2f24:	e7a9      	b.n	2e7a <__aeabi_fadd+0x15a>
    2f26:	000c      	movs	r4, r1
    2f28:	e735      	b.n	2d96 <__aeabi_fadd+0x76>
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d04d      	beq.n	2fca <__aeabi_fadd+0x2aa>
    2f2e:	43d2      	mvns	r2, r2
    2f30:	2a00      	cmp	r2, #0
    2f32:	d0ed      	beq.n	2f10 <__aeabi_fadd+0x1f0>
    2f34:	28ff      	cmp	r0, #255	; 0xff
    2f36:	d1e0      	bne.n	2efa <__aeabi_fadd+0x1da>
    2f38:	4663      	mov	r3, ip
    2f3a:	24ff      	movs	r4, #255	; 0xff
    2f3c:	000d      	movs	r5, r1
    2f3e:	e72a      	b.n	2d96 <__aeabi_fadd+0x76>
    2f40:	29ff      	cmp	r1, #255	; 0xff
    2f42:	d00f      	beq.n	2f64 <__aeabi_fadd+0x244>
    2f44:	0001      	movs	r1, r0
    2f46:	e773      	b.n	2e30 <__aeabi_fadd+0x110>
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d061      	beq.n	3010 <__aeabi_fadd+0x2f0>
    2f4c:	24ff      	movs	r4, #255	; 0xff
    2f4e:	2f00      	cmp	r7, #0
    2f50:	d100      	bne.n	2f54 <__aeabi_fadd+0x234>
    2f52:	e720      	b.n	2d96 <__aeabi_fadd+0x76>
    2f54:	2280      	movs	r2, #128	; 0x80
    2f56:	4641      	mov	r1, r8
    2f58:	03d2      	lsls	r2, r2, #15
    2f5a:	4211      	tst	r1, r2
    2f5c:	d002      	beq.n	2f64 <__aeabi_fadd+0x244>
    2f5e:	4216      	tst	r6, r2
    2f60:	d100      	bne.n	2f64 <__aeabi_fadd+0x244>
    2f62:	003b      	movs	r3, r7
    2f64:	24ff      	movs	r4, #255	; 0xff
    2f66:	e716      	b.n	2d96 <__aeabi_fadd+0x76>
    2f68:	24ff      	movs	r4, #255	; 0xff
    2f6a:	2300      	movs	r3, #0
    2f6c:	e724      	b.n	2db8 <__aeabi_fadd+0x98>
    2f6e:	2c00      	cmp	r4, #0
    2f70:	d1ea      	bne.n	2f48 <__aeabi_fadd+0x228>
    2f72:	2b00      	cmp	r3, #0
    2f74:	d058      	beq.n	3028 <__aeabi_fadd+0x308>
    2f76:	2f00      	cmp	r7, #0
    2f78:	d100      	bne.n	2f7c <__aeabi_fadd+0x25c>
    2f7a:	e70c      	b.n	2d96 <__aeabi_fadd+0x76>
    2f7c:	4463      	add	r3, ip
    2f7e:	015a      	lsls	r2, r3, #5
    2f80:	d400      	bmi.n	2f84 <__aeabi_fadd+0x264>
    2f82:	e739      	b.n	2df8 <__aeabi_fadd+0xd8>
    2f84:	4a2e      	ldr	r2, [pc, #184]	; (3040 <__aeabi_fadd+0x320>)
    2f86:	000c      	movs	r4, r1
    2f88:	4013      	ands	r3, r2
    2f8a:	e704      	b.n	2d96 <__aeabi_fadd+0x76>
    2f8c:	2101      	movs	r1, #1
    2f8e:	e75c      	b.n	2e4a <__aeabi_fadd+0x12a>
    2f90:	2c00      	cmp	r4, #0
    2f92:	d11e      	bne.n	2fd2 <__aeabi_fadd+0x2b2>
    2f94:	2b00      	cmp	r3, #0
    2f96:	d040      	beq.n	301a <__aeabi_fadd+0x2fa>
    2f98:	43c9      	mvns	r1, r1
    2f9a:	2900      	cmp	r1, #0
    2f9c:	d00b      	beq.n	2fb6 <__aeabi_fadd+0x296>
    2f9e:	28ff      	cmp	r0, #255	; 0xff
    2fa0:	d036      	beq.n	3010 <__aeabi_fadd+0x2f0>
    2fa2:	291b      	cmp	r1, #27
    2fa4:	dc47      	bgt.n	3036 <__aeabi_fadd+0x316>
    2fa6:	001c      	movs	r4, r3
    2fa8:	2620      	movs	r6, #32
    2faa:	40cc      	lsrs	r4, r1
    2fac:	1a71      	subs	r1, r6, r1
    2fae:	408b      	lsls	r3, r1
    2fb0:	1e59      	subs	r1, r3, #1
    2fb2:	418b      	sbcs	r3, r1
    2fb4:	4323      	orrs	r3, r4
    2fb6:	4463      	add	r3, ip
    2fb8:	0004      	movs	r4, r0
    2fba:	e747      	b.n	2e4c <__aeabi_fadd+0x12c>
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d118      	bne.n	2ff2 <__aeabi_fadd+0x2d2>
    2fc0:	1e3b      	subs	r3, r7, #0
    2fc2:	d02d      	beq.n	3020 <__aeabi_fadd+0x300>
    2fc4:	000d      	movs	r5, r1
    2fc6:	24ff      	movs	r4, #255	; 0xff
    2fc8:	e6e5      	b.n	2d96 <__aeabi_fadd+0x76>
    2fca:	003b      	movs	r3, r7
    2fcc:	0004      	movs	r4, r0
    2fce:	000d      	movs	r5, r1
    2fd0:	e6e1      	b.n	2d96 <__aeabi_fadd+0x76>
    2fd2:	28ff      	cmp	r0, #255	; 0xff
    2fd4:	d01c      	beq.n	3010 <__aeabi_fadd+0x2f0>
    2fd6:	2480      	movs	r4, #128	; 0x80
    2fd8:	04e4      	lsls	r4, r4, #19
    2fda:	4249      	negs	r1, r1
    2fdc:	4323      	orrs	r3, r4
    2fde:	e7e0      	b.n	2fa2 <__aeabi_fadd+0x282>
    2fe0:	2f00      	cmp	r7, #0
    2fe2:	d100      	bne.n	2fe6 <__aeabi_fadd+0x2c6>
    2fe4:	e6d7      	b.n	2d96 <__aeabi_fadd+0x76>
    2fe6:	1bde      	subs	r6, r3, r7
    2fe8:	0172      	lsls	r2, r6, #5
    2fea:	d51f      	bpl.n	302c <__aeabi_fadd+0x30c>
    2fec:	1afb      	subs	r3, r7, r3
    2fee:	000d      	movs	r5, r1
    2ff0:	e6d1      	b.n	2d96 <__aeabi_fadd+0x76>
    2ff2:	24ff      	movs	r4, #255	; 0xff
    2ff4:	2f00      	cmp	r7, #0
    2ff6:	d100      	bne.n	2ffa <__aeabi_fadd+0x2da>
    2ff8:	e6cd      	b.n	2d96 <__aeabi_fadd+0x76>
    2ffa:	2280      	movs	r2, #128	; 0x80
    2ffc:	4640      	mov	r0, r8
    2ffe:	03d2      	lsls	r2, r2, #15
    3000:	4210      	tst	r0, r2
    3002:	d0af      	beq.n	2f64 <__aeabi_fadd+0x244>
    3004:	4216      	tst	r6, r2
    3006:	d1ad      	bne.n	2f64 <__aeabi_fadd+0x244>
    3008:	003b      	movs	r3, r7
    300a:	000d      	movs	r5, r1
    300c:	24ff      	movs	r4, #255	; 0xff
    300e:	e6c2      	b.n	2d96 <__aeabi_fadd+0x76>
    3010:	4663      	mov	r3, ip
    3012:	24ff      	movs	r4, #255	; 0xff
    3014:	e6bf      	b.n	2d96 <__aeabi_fadd+0x76>
    3016:	2301      	movs	r3, #1
    3018:	e77a      	b.n	2f10 <__aeabi_fadd+0x1f0>
    301a:	003b      	movs	r3, r7
    301c:	0004      	movs	r4, r0
    301e:	e6ba      	b.n	2d96 <__aeabi_fadd+0x76>
    3020:	2680      	movs	r6, #128	; 0x80
    3022:	2200      	movs	r2, #0
    3024:	03f6      	lsls	r6, r6, #15
    3026:	e6f0      	b.n	2e0a <__aeabi_fadd+0xea>
    3028:	003b      	movs	r3, r7
    302a:	e6b4      	b.n	2d96 <__aeabi_fadd+0x76>
    302c:	1e33      	subs	r3, r6, #0
    302e:	d000      	beq.n	3032 <__aeabi_fadd+0x312>
    3030:	e6e2      	b.n	2df8 <__aeabi_fadd+0xd8>
    3032:	2200      	movs	r2, #0
    3034:	e721      	b.n	2e7a <__aeabi_fadd+0x15a>
    3036:	2301      	movs	r3, #1
    3038:	e7bd      	b.n	2fb6 <__aeabi_fadd+0x296>
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	7dffffff 	.word	0x7dffffff
    3040:	fbffffff 	.word	0xfbffffff

00003044 <__eqsf2>:
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	0042      	lsls	r2, r0, #1
    3048:	0245      	lsls	r5, r0, #9
    304a:	024e      	lsls	r6, r1, #9
    304c:	004c      	lsls	r4, r1, #1
    304e:	0fc3      	lsrs	r3, r0, #31
    3050:	0a6d      	lsrs	r5, r5, #9
    3052:	0e12      	lsrs	r2, r2, #24
    3054:	0a76      	lsrs	r6, r6, #9
    3056:	0e24      	lsrs	r4, r4, #24
    3058:	0fc9      	lsrs	r1, r1, #31
    305a:	2001      	movs	r0, #1
    305c:	2aff      	cmp	r2, #255	; 0xff
    305e:	d006      	beq.n	306e <__eqsf2+0x2a>
    3060:	2cff      	cmp	r4, #255	; 0xff
    3062:	d003      	beq.n	306c <__eqsf2+0x28>
    3064:	42a2      	cmp	r2, r4
    3066:	d101      	bne.n	306c <__eqsf2+0x28>
    3068:	42b5      	cmp	r5, r6
    306a:	d006      	beq.n	307a <__eqsf2+0x36>
    306c:	bd70      	pop	{r4, r5, r6, pc}
    306e:	2d00      	cmp	r5, #0
    3070:	d1fc      	bne.n	306c <__eqsf2+0x28>
    3072:	2cff      	cmp	r4, #255	; 0xff
    3074:	d1fa      	bne.n	306c <__eqsf2+0x28>
    3076:	2e00      	cmp	r6, #0
    3078:	d1f8      	bne.n	306c <__eqsf2+0x28>
    307a:	428b      	cmp	r3, r1
    307c:	d006      	beq.n	308c <__eqsf2+0x48>
    307e:	2001      	movs	r0, #1
    3080:	2a00      	cmp	r2, #0
    3082:	d1f3      	bne.n	306c <__eqsf2+0x28>
    3084:	0028      	movs	r0, r5
    3086:	1e45      	subs	r5, r0, #1
    3088:	41a8      	sbcs	r0, r5
    308a:	e7ef      	b.n	306c <__eqsf2+0x28>
    308c:	2000      	movs	r0, #0
    308e:	e7ed      	b.n	306c <__eqsf2+0x28>

00003090 <__gesf2>:
    3090:	b5f0      	push	{r4, r5, r6, r7, lr}
    3092:	0042      	lsls	r2, r0, #1
    3094:	0245      	lsls	r5, r0, #9
    3096:	024c      	lsls	r4, r1, #9
    3098:	0fc3      	lsrs	r3, r0, #31
    309a:	0048      	lsls	r0, r1, #1
    309c:	0a6d      	lsrs	r5, r5, #9
    309e:	0e12      	lsrs	r2, r2, #24
    30a0:	0a64      	lsrs	r4, r4, #9
    30a2:	0e00      	lsrs	r0, r0, #24
    30a4:	0fc9      	lsrs	r1, r1, #31
    30a6:	2aff      	cmp	r2, #255	; 0xff
    30a8:	d01e      	beq.n	30e8 <__gesf2+0x58>
    30aa:	28ff      	cmp	r0, #255	; 0xff
    30ac:	d021      	beq.n	30f2 <__gesf2+0x62>
    30ae:	2a00      	cmp	r2, #0
    30b0:	d10a      	bne.n	30c8 <__gesf2+0x38>
    30b2:	426e      	negs	r6, r5
    30b4:	416e      	adcs	r6, r5
    30b6:	b2f6      	uxtb	r6, r6
    30b8:	2800      	cmp	r0, #0
    30ba:	d10f      	bne.n	30dc <__gesf2+0x4c>
    30bc:	2c00      	cmp	r4, #0
    30be:	d10d      	bne.n	30dc <__gesf2+0x4c>
    30c0:	2000      	movs	r0, #0
    30c2:	2d00      	cmp	r5, #0
    30c4:	d009      	beq.n	30da <__gesf2+0x4a>
    30c6:	e005      	b.n	30d4 <__gesf2+0x44>
    30c8:	2800      	cmp	r0, #0
    30ca:	d101      	bne.n	30d0 <__gesf2+0x40>
    30cc:	2c00      	cmp	r4, #0
    30ce:	d001      	beq.n	30d4 <__gesf2+0x44>
    30d0:	428b      	cmp	r3, r1
    30d2:	d011      	beq.n	30f8 <__gesf2+0x68>
    30d4:	2101      	movs	r1, #1
    30d6:	4258      	negs	r0, r3
    30d8:	4308      	orrs	r0, r1
    30da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30dc:	2e00      	cmp	r6, #0
    30de:	d0f7      	beq.n	30d0 <__gesf2+0x40>
    30e0:	2001      	movs	r0, #1
    30e2:	3901      	subs	r1, #1
    30e4:	4308      	orrs	r0, r1
    30e6:	e7f8      	b.n	30da <__gesf2+0x4a>
    30e8:	2d00      	cmp	r5, #0
    30ea:	d0de      	beq.n	30aa <__gesf2+0x1a>
    30ec:	2002      	movs	r0, #2
    30ee:	4240      	negs	r0, r0
    30f0:	e7f3      	b.n	30da <__gesf2+0x4a>
    30f2:	2c00      	cmp	r4, #0
    30f4:	d0db      	beq.n	30ae <__gesf2+0x1e>
    30f6:	e7f9      	b.n	30ec <__gesf2+0x5c>
    30f8:	4282      	cmp	r2, r0
    30fa:	dceb      	bgt.n	30d4 <__gesf2+0x44>
    30fc:	db04      	blt.n	3108 <__gesf2+0x78>
    30fe:	42a5      	cmp	r5, r4
    3100:	d8e8      	bhi.n	30d4 <__gesf2+0x44>
    3102:	2000      	movs	r0, #0
    3104:	42a5      	cmp	r5, r4
    3106:	d2e8      	bcs.n	30da <__gesf2+0x4a>
    3108:	2101      	movs	r1, #1
    310a:	1e58      	subs	r0, r3, #1
    310c:	4308      	orrs	r0, r1
    310e:	e7e4      	b.n	30da <__gesf2+0x4a>

00003110 <__lesf2>:
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	0042      	lsls	r2, r0, #1
    3114:	024d      	lsls	r5, r1, #9
    3116:	004c      	lsls	r4, r1, #1
    3118:	0246      	lsls	r6, r0, #9
    311a:	0a76      	lsrs	r6, r6, #9
    311c:	0e12      	lsrs	r2, r2, #24
    311e:	0fc3      	lsrs	r3, r0, #31
    3120:	0a6d      	lsrs	r5, r5, #9
    3122:	0e24      	lsrs	r4, r4, #24
    3124:	0fc9      	lsrs	r1, r1, #31
    3126:	2aff      	cmp	r2, #255	; 0xff
    3128:	d016      	beq.n	3158 <__lesf2+0x48>
    312a:	2cff      	cmp	r4, #255	; 0xff
    312c:	d018      	beq.n	3160 <__lesf2+0x50>
    312e:	2a00      	cmp	r2, #0
    3130:	d10a      	bne.n	3148 <__lesf2+0x38>
    3132:	4270      	negs	r0, r6
    3134:	4170      	adcs	r0, r6
    3136:	b2c0      	uxtb	r0, r0
    3138:	2c00      	cmp	r4, #0
    313a:	d015      	beq.n	3168 <__lesf2+0x58>
    313c:	2800      	cmp	r0, #0
    313e:	d005      	beq.n	314c <__lesf2+0x3c>
    3140:	2001      	movs	r0, #1
    3142:	3901      	subs	r1, #1
    3144:	4308      	orrs	r0, r1
    3146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3148:	2c00      	cmp	r4, #0
    314a:	d013      	beq.n	3174 <__lesf2+0x64>
    314c:	4299      	cmp	r1, r3
    314e:	d014      	beq.n	317a <__lesf2+0x6a>
    3150:	2001      	movs	r0, #1
    3152:	425b      	negs	r3, r3
    3154:	4318      	orrs	r0, r3
    3156:	e7f6      	b.n	3146 <__lesf2+0x36>
    3158:	2002      	movs	r0, #2
    315a:	2e00      	cmp	r6, #0
    315c:	d1f3      	bne.n	3146 <__lesf2+0x36>
    315e:	e7e4      	b.n	312a <__lesf2+0x1a>
    3160:	2002      	movs	r0, #2
    3162:	2d00      	cmp	r5, #0
    3164:	d1ef      	bne.n	3146 <__lesf2+0x36>
    3166:	e7e2      	b.n	312e <__lesf2+0x1e>
    3168:	2d00      	cmp	r5, #0
    316a:	d1e7      	bne.n	313c <__lesf2+0x2c>
    316c:	2000      	movs	r0, #0
    316e:	2e00      	cmp	r6, #0
    3170:	d0e9      	beq.n	3146 <__lesf2+0x36>
    3172:	e7ed      	b.n	3150 <__lesf2+0x40>
    3174:	2d00      	cmp	r5, #0
    3176:	d1e9      	bne.n	314c <__lesf2+0x3c>
    3178:	e7ea      	b.n	3150 <__lesf2+0x40>
    317a:	42a2      	cmp	r2, r4
    317c:	dc06      	bgt.n	318c <__lesf2+0x7c>
    317e:	dbdf      	blt.n	3140 <__lesf2+0x30>
    3180:	42ae      	cmp	r6, r5
    3182:	d803      	bhi.n	318c <__lesf2+0x7c>
    3184:	2000      	movs	r0, #0
    3186:	42ae      	cmp	r6, r5
    3188:	d3da      	bcc.n	3140 <__lesf2+0x30>
    318a:	e7dc      	b.n	3146 <__lesf2+0x36>
    318c:	2001      	movs	r0, #1
    318e:	4249      	negs	r1, r1
    3190:	4308      	orrs	r0, r1
    3192:	e7d8      	b.n	3146 <__lesf2+0x36>

00003194 <__aeabi_fmul>:
    3194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3196:	4657      	mov	r7, sl
    3198:	464e      	mov	r6, r9
    319a:	4645      	mov	r5, r8
    319c:	46de      	mov	lr, fp
    319e:	b5e0      	push	{r5, r6, r7, lr}
    31a0:	0247      	lsls	r7, r0, #9
    31a2:	0046      	lsls	r6, r0, #1
    31a4:	4688      	mov	r8, r1
    31a6:	0a7f      	lsrs	r7, r7, #9
    31a8:	0e36      	lsrs	r6, r6, #24
    31aa:	0fc4      	lsrs	r4, r0, #31
    31ac:	2e00      	cmp	r6, #0
    31ae:	d047      	beq.n	3240 <__aeabi_fmul+0xac>
    31b0:	2eff      	cmp	r6, #255	; 0xff
    31b2:	d024      	beq.n	31fe <__aeabi_fmul+0x6a>
    31b4:	00fb      	lsls	r3, r7, #3
    31b6:	2780      	movs	r7, #128	; 0x80
    31b8:	04ff      	lsls	r7, r7, #19
    31ba:	431f      	orrs	r7, r3
    31bc:	2300      	movs	r3, #0
    31be:	4699      	mov	r9, r3
    31c0:	469a      	mov	sl, r3
    31c2:	3e7f      	subs	r6, #127	; 0x7f
    31c4:	4643      	mov	r3, r8
    31c6:	025d      	lsls	r5, r3, #9
    31c8:	0058      	lsls	r0, r3, #1
    31ca:	0fdb      	lsrs	r3, r3, #31
    31cc:	0a6d      	lsrs	r5, r5, #9
    31ce:	0e00      	lsrs	r0, r0, #24
    31d0:	4698      	mov	r8, r3
    31d2:	d043      	beq.n	325c <__aeabi_fmul+0xc8>
    31d4:	28ff      	cmp	r0, #255	; 0xff
    31d6:	d03b      	beq.n	3250 <__aeabi_fmul+0xbc>
    31d8:	00eb      	lsls	r3, r5, #3
    31da:	2580      	movs	r5, #128	; 0x80
    31dc:	2200      	movs	r2, #0
    31de:	04ed      	lsls	r5, r5, #19
    31e0:	431d      	orrs	r5, r3
    31e2:	387f      	subs	r0, #127	; 0x7f
    31e4:	1836      	adds	r6, r6, r0
    31e6:	1c73      	adds	r3, r6, #1
    31e8:	4641      	mov	r1, r8
    31ea:	469b      	mov	fp, r3
    31ec:	464b      	mov	r3, r9
    31ee:	4061      	eors	r1, r4
    31f0:	4313      	orrs	r3, r2
    31f2:	2b0f      	cmp	r3, #15
    31f4:	d864      	bhi.n	32c0 <__aeabi_fmul+0x12c>
    31f6:	4875      	ldr	r0, [pc, #468]	; (33cc <__aeabi_fmul+0x238>)
    31f8:	009b      	lsls	r3, r3, #2
    31fa:	58c3      	ldr	r3, [r0, r3]
    31fc:	469f      	mov	pc, r3
    31fe:	2f00      	cmp	r7, #0
    3200:	d142      	bne.n	3288 <__aeabi_fmul+0xf4>
    3202:	2308      	movs	r3, #8
    3204:	4699      	mov	r9, r3
    3206:	3b06      	subs	r3, #6
    3208:	26ff      	movs	r6, #255	; 0xff
    320a:	469a      	mov	sl, r3
    320c:	e7da      	b.n	31c4 <__aeabi_fmul+0x30>
    320e:	4641      	mov	r1, r8
    3210:	2a02      	cmp	r2, #2
    3212:	d028      	beq.n	3266 <__aeabi_fmul+0xd2>
    3214:	2a03      	cmp	r2, #3
    3216:	d100      	bne.n	321a <__aeabi_fmul+0x86>
    3218:	e0ce      	b.n	33b8 <__aeabi_fmul+0x224>
    321a:	2a01      	cmp	r2, #1
    321c:	d000      	beq.n	3220 <__aeabi_fmul+0x8c>
    321e:	e0ac      	b.n	337a <__aeabi_fmul+0x1e6>
    3220:	4011      	ands	r1, r2
    3222:	2000      	movs	r0, #0
    3224:	2200      	movs	r2, #0
    3226:	b2cc      	uxtb	r4, r1
    3228:	0240      	lsls	r0, r0, #9
    322a:	05d2      	lsls	r2, r2, #23
    322c:	0a40      	lsrs	r0, r0, #9
    322e:	07e4      	lsls	r4, r4, #31
    3230:	4310      	orrs	r0, r2
    3232:	4320      	orrs	r0, r4
    3234:	bc3c      	pop	{r2, r3, r4, r5}
    3236:	4690      	mov	r8, r2
    3238:	4699      	mov	r9, r3
    323a:	46a2      	mov	sl, r4
    323c:	46ab      	mov	fp, r5
    323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3240:	2f00      	cmp	r7, #0
    3242:	d115      	bne.n	3270 <__aeabi_fmul+0xdc>
    3244:	2304      	movs	r3, #4
    3246:	4699      	mov	r9, r3
    3248:	3b03      	subs	r3, #3
    324a:	2600      	movs	r6, #0
    324c:	469a      	mov	sl, r3
    324e:	e7b9      	b.n	31c4 <__aeabi_fmul+0x30>
    3250:	20ff      	movs	r0, #255	; 0xff
    3252:	2202      	movs	r2, #2
    3254:	2d00      	cmp	r5, #0
    3256:	d0c5      	beq.n	31e4 <__aeabi_fmul+0x50>
    3258:	2203      	movs	r2, #3
    325a:	e7c3      	b.n	31e4 <__aeabi_fmul+0x50>
    325c:	2d00      	cmp	r5, #0
    325e:	d119      	bne.n	3294 <__aeabi_fmul+0x100>
    3260:	2000      	movs	r0, #0
    3262:	2201      	movs	r2, #1
    3264:	e7be      	b.n	31e4 <__aeabi_fmul+0x50>
    3266:	2401      	movs	r4, #1
    3268:	22ff      	movs	r2, #255	; 0xff
    326a:	400c      	ands	r4, r1
    326c:	2000      	movs	r0, #0
    326e:	e7db      	b.n	3228 <__aeabi_fmul+0x94>
    3270:	0038      	movs	r0, r7
    3272:	f000 fae1 	bl	3838 <__clzsi2>
    3276:	2676      	movs	r6, #118	; 0x76
    3278:	1f43      	subs	r3, r0, #5
    327a:	409f      	lsls	r7, r3
    327c:	2300      	movs	r3, #0
    327e:	4276      	negs	r6, r6
    3280:	1a36      	subs	r6, r6, r0
    3282:	4699      	mov	r9, r3
    3284:	469a      	mov	sl, r3
    3286:	e79d      	b.n	31c4 <__aeabi_fmul+0x30>
    3288:	230c      	movs	r3, #12
    328a:	4699      	mov	r9, r3
    328c:	3b09      	subs	r3, #9
    328e:	26ff      	movs	r6, #255	; 0xff
    3290:	469a      	mov	sl, r3
    3292:	e797      	b.n	31c4 <__aeabi_fmul+0x30>
    3294:	0028      	movs	r0, r5
    3296:	f000 facf 	bl	3838 <__clzsi2>
    329a:	1f43      	subs	r3, r0, #5
    329c:	409d      	lsls	r5, r3
    329e:	2376      	movs	r3, #118	; 0x76
    32a0:	425b      	negs	r3, r3
    32a2:	1a18      	subs	r0, r3, r0
    32a4:	2200      	movs	r2, #0
    32a6:	e79d      	b.n	31e4 <__aeabi_fmul+0x50>
    32a8:	2080      	movs	r0, #128	; 0x80
    32aa:	2400      	movs	r4, #0
    32ac:	03c0      	lsls	r0, r0, #15
    32ae:	22ff      	movs	r2, #255	; 0xff
    32b0:	e7ba      	b.n	3228 <__aeabi_fmul+0x94>
    32b2:	003d      	movs	r5, r7
    32b4:	4652      	mov	r2, sl
    32b6:	e7ab      	b.n	3210 <__aeabi_fmul+0x7c>
    32b8:	003d      	movs	r5, r7
    32ba:	0021      	movs	r1, r4
    32bc:	4652      	mov	r2, sl
    32be:	e7a7      	b.n	3210 <__aeabi_fmul+0x7c>
    32c0:	0c3b      	lsrs	r3, r7, #16
    32c2:	469c      	mov	ip, r3
    32c4:	042a      	lsls	r2, r5, #16
    32c6:	0c12      	lsrs	r2, r2, #16
    32c8:	0c2b      	lsrs	r3, r5, #16
    32ca:	0014      	movs	r4, r2
    32cc:	4660      	mov	r0, ip
    32ce:	4665      	mov	r5, ip
    32d0:	043f      	lsls	r7, r7, #16
    32d2:	0c3f      	lsrs	r7, r7, #16
    32d4:	437c      	muls	r4, r7
    32d6:	4342      	muls	r2, r0
    32d8:	435d      	muls	r5, r3
    32da:	437b      	muls	r3, r7
    32dc:	0c27      	lsrs	r7, r4, #16
    32de:	189b      	adds	r3, r3, r2
    32e0:	18ff      	adds	r7, r7, r3
    32e2:	42ba      	cmp	r2, r7
    32e4:	d903      	bls.n	32ee <__aeabi_fmul+0x15a>
    32e6:	2380      	movs	r3, #128	; 0x80
    32e8:	025b      	lsls	r3, r3, #9
    32ea:	469c      	mov	ip, r3
    32ec:	4465      	add	r5, ip
    32ee:	0424      	lsls	r4, r4, #16
    32f0:	043a      	lsls	r2, r7, #16
    32f2:	0c24      	lsrs	r4, r4, #16
    32f4:	1912      	adds	r2, r2, r4
    32f6:	0193      	lsls	r3, r2, #6
    32f8:	1e5c      	subs	r4, r3, #1
    32fa:	41a3      	sbcs	r3, r4
    32fc:	0c3f      	lsrs	r7, r7, #16
    32fe:	0e92      	lsrs	r2, r2, #26
    3300:	197d      	adds	r5, r7, r5
    3302:	431a      	orrs	r2, r3
    3304:	01ad      	lsls	r5, r5, #6
    3306:	4315      	orrs	r5, r2
    3308:	012b      	lsls	r3, r5, #4
    330a:	d504      	bpl.n	3316 <__aeabi_fmul+0x182>
    330c:	2301      	movs	r3, #1
    330e:	465e      	mov	r6, fp
    3310:	086a      	lsrs	r2, r5, #1
    3312:	401d      	ands	r5, r3
    3314:	4315      	orrs	r5, r2
    3316:	0032      	movs	r2, r6
    3318:	327f      	adds	r2, #127	; 0x7f
    331a:	2a00      	cmp	r2, #0
    331c:	dd25      	ble.n	336a <__aeabi_fmul+0x1d6>
    331e:	076b      	lsls	r3, r5, #29
    3320:	d004      	beq.n	332c <__aeabi_fmul+0x198>
    3322:	230f      	movs	r3, #15
    3324:	402b      	ands	r3, r5
    3326:	2b04      	cmp	r3, #4
    3328:	d000      	beq.n	332c <__aeabi_fmul+0x198>
    332a:	3504      	adds	r5, #4
    332c:	012b      	lsls	r3, r5, #4
    332e:	d503      	bpl.n	3338 <__aeabi_fmul+0x1a4>
    3330:	0032      	movs	r2, r6
    3332:	4b27      	ldr	r3, [pc, #156]	; (33d0 <__aeabi_fmul+0x23c>)
    3334:	3280      	adds	r2, #128	; 0x80
    3336:	401d      	ands	r5, r3
    3338:	2afe      	cmp	r2, #254	; 0xfe
    333a:	dc94      	bgt.n	3266 <__aeabi_fmul+0xd2>
    333c:	2401      	movs	r4, #1
    333e:	01a8      	lsls	r0, r5, #6
    3340:	0a40      	lsrs	r0, r0, #9
    3342:	b2d2      	uxtb	r2, r2
    3344:	400c      	ands	r4, r1
    3346:	e76f      	b.n	3228 <__aeabi_fmul+0x94>
    3348:	2080      	movs	r0, #128	; 0x80
    334a:	03c0      	lsls	r0, r0, #15
    334c:	4207      	tst	r7, r0
    334e:	d007      	beq.n	3360 <__aeabi_fmul+0x1cc>
    3350:	4205      	tst	r5, r0
    3352:	d105      	bne.n	3360 <__aeabi_fmul+0x1cc>
    3354:	4328      	orrs	r0, r5
    3356:	0240      	lsls	r0, r0, #9
    3358:	0a40      	lsrs	r0, r0, #9
    335a:	4644      	mov	r4, r8
    335c:	22ff      	movs	r2, #255	; 0xff
    335e:	e763      	b.n	3228 <__aeabi_fmul+0x94>
    3360:	4338      	orrs	r0, r7
    3362:	0240      	lsls	r0, r0, #9
    3364:	0a40      	lsrs	r0, r0, #9
    3366:	22ff      	movs	r2, #255	; 0xff
    3368:	e75e      	b.n	3228 <__aeabi_fmul+0x94>
    336a:	2401      	movs	r4, #1
    336c:	1aa3      	subs	r3, r4, r2
    336e:	2b1b      	cmp	r3, #27
    3370:	dd05      	ble.n	337e <__aeabi_fmul+0x1ea>
    3372:	400c      	ands	r4, r1
    3374:	2200      	movs	r2, #0
    3376:	2000      	movs	r0, #0
    3378:	e756      	b.n	3228 <__aeabi_fmul+0x94>
    337a:	465e      	mov	r6, fp
    337c:	e7cb      	b.n	3316 <__aeabi_fmul+0x182>
    337e:	002a      	movs	r2, r5
    3380:	2020      	movs	r0, #32
    3382:	40da      	lsrs	r2, r3
    3384:	1ac3      	subs	r3, r0, r3
    3386:	409d      	lsls	r5, r3
    3388:	002b      	movs	r3, r5
    338a:	1e5d      	subs	r5, r3, #1
    338c:	41ab      	sbcs	r3, r5
    338e:	4313      	orrs	r3, r2
    3390:	075a      	lsls	r2, r3, #29
    3392:	d004      	beq.n	339e <__aeabi_fmul+0x20a>
    3394:	220f      	movs	r2, #15
    3396:	401a      	ands	r2, r3
    3398:	2a04      	cmp	r2, #4
    339a:	d000      	beq.n	339e <__aeabi_fmul+0x20a>
    339c:	3304      	adds	r3, #4
    339e:	015a      	lsls	r2, r3, #5
    33a0:	d504      	bpl.n	33ac <__aeabi_fmul+0x218>
    33a2:	2401      	movs	r4, #1
    33a4:	2201      	movs	r2, #1
    33a6:	400c      	ands	r4, r1
    33a8:	2000      	movs	r0, #0
    33aa:	e73d      	b.n	3228 <__aeabi_fmul+0x94>
    33ac:	2401      	movs	r4, #1
    33ae:	019b      	lsls	r3, r3, #6
    33b0:	0a58      	lsrs	r0, r3, #9
    33b2:	400c      	ands	r4, r1
    33b4:	2200      	movs	r2, #0
    33b6:	e737      	b.n	3228 <__aeabi_fmul+0x94>
    33b8:	2080      	movs	r0, #128	; 0x80
    33ba:	2401      	movs	r4, #1
    33bc:	03c0      	lsls	r0, r0, #15
    33be:	4328      	orrs	r0, r5
    33c0:	0240      	lsls	r0, r0, #9
    33c2:	0a40      	lsrs	r0, r0, #9
    33c4:	400c      	ands	r4, r1
    33c6:	22ff      	movs	r2, #255	; 0xff
    33c8:	e72e      	b.n	3228 <__aeabi_fmul+0x94>
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	00003fe8 	.word	0x00003fe8
    33d0:	f7ffffff 	.word	0xf7ffffff

000033d4 <__aeabi_fsub>:
    33d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33d6:	464f      	mov	r7, r9
    33d8:	46d6      	mov	lr, sl
    33da:	4646      	mov	r6, r8
    33dc:	0044      	lsls	r4, r0, #1
    33de:	b5c0      	push	{r6, r7, lr}
    33e0:	0fc2      	lsrs	r2, r0, #31
    33e2:	0247      	lsls	r7, r0, #9
    33e4:	0248      	lsls	r0, r1, #9
    33e6:	0a40      	lsrs	r0, r0, #9
    33e8:	4684      	mov	ip, r0
    33ea:	4666      	mov	r6, ip
    33ec:	0a7b      	lsrs	r3, r7, #9
    33ee:	0048      	lsls	r0, r1, #1
    33f0:	0fc9      	lsrs	r1, r1, #31
    33f2:	469a      	mov	sl, r3
    33f4:	0e24      	lsrs	r4, r4, #24
    33f6:	0015      	movs	r5, r2
    33f8:	00db      	lsls	r3, r3, #3
    33fa:	0e00      	lsrs	r0, r0, #24
    33fc:	4689      	mov	r9, r1
    33fe:	00f6      	lsls	r6, r6, #3
    3400:	28ff      	cmp	r0, #255	; 0xff
    3402:	d100      	bne.n	3406 <__aeabi_fsub+0x32>
    3404:	e08f      	b.n	3526 <__aeabi_fsub+0x152>
    3406:	2101      	movs	r1, #1
    3408:	464f      	mov	r7, r9
    340a:	404f      	eors	r7, r1
    340c:	0039      	movs	r1, r7
    340e:	4291      	cmp	r1, r2
    3410:	d066      	beq.n	34e0 <__aeabi_fsub+0x10c>
    3412:	1a22      	subs	r2, r4, r0
    3414:	2a00      	cmp	r2, #0
    3416:	dc00      	bgt.n	341a <__aeabi_fsub+0x46>
    3418:	e09d      	b.n	3556 <__aeabi_fsub+0x182>
    341a:	2800      	cmp	r0, #0
    341c:	d13d      	bne.n	349a <__aeabi_fsub+0xc6>
    341e:	2e00      	cmp	r6, #0
    3420:	d100      	bne.n	3424 <__aeabi_fsub+0x50>
    3422:	e08b      	b.n	353c <__aeabi_fsub+0x168>
    3424:	1e51      	subs	r1, r2, #1
    3426:	2900      	cmp	r1, #0
    3428:	d000      	beq.n	342c <__aeabi_fsub+0x58>
    342a:	e0b5      	b.n	3598 <__aeabi_fsub+0x1c4>
    342c:	2401      	movs	r4, #1
    342e:	1b9b      	subs	r3, r3, r6
    3430:	015a      	lsls	r2, r3, #5
    3432:	d544      	bpl.n	34be <__aeabi_fsub+0xea>
    3434:	019b      	lsls	r3, r3, #6
    3436:	099f      	lsrs	r7, r3, #6
    3438:	0038      	movs	r0, r7
    343a:	f000 f9fd 	bl	3838 <__clzsi2>
    343e:	3805      	subs	r0, #5
    3440:	4087      	lsls	r7, r0
    3442:	4284      	cmp	r4, r0
    3444:	dd00      	ble.n	3448 <__aeabi_fsub+0x74>
    3446:	e096      	b.n	3576 <__aeabi_fsub+0x1a2>
    3448:	1b04      	subs	r4, r0, r4
    344a:	003a      	movs	r2, r7
    344c:	2020      	movs	r0, #32
    344e:	3401      	adds	r4, #1
    3450:	40e2      	lsrs	r2, r4
    3452:	1b04      	subs	r4, r0, r4
    3454:	40a7      	lsls	r7, r4
    3456:	003b      	movs	r3, r7
    3458:	1e5f      	subs	r7, r3, #1
    345a:	41bb      	sbcs	r3, r7
    345c:	2400      	movs	r4, #0
    345e:	4313      	orrs	r3, r2
    3460:	075a      	lsls	r2, r3, #29
    3462:	d004      	beq.n	346e <__aeabi_fsub+0x9a>
    3464:	220f      	movs	r2, #15
    3466:	401a      	ands	r2, r3
    3468:	2a04      	cmp	r2, #4
    346a:	d000      	beq.n	346e <__aeabi_fsub+0x9a>
    346c:	3304      	adds	r3, #4
    346e:	015a      	lsls	r2, r3, #5
    3470:	d527      	bpl.n	34c2 <__aeabi_fsub+0xee>
    3472:	3401      	adds	r4, #1
    3474:	2cff      	cmp	r4, #255	; 0xff
    3476:	d100      	bne.n	347a <__aeabi_fsub+0xa6>
    3478:	e079      	b.n	356e <__aeabi_fsub+0x19a>
    347a:	2201      	movs	r2, #1
    347c:	019b      	lsls	r3, r3, #6
    347e:	0a5b      	lsrs	r3, r3, #9
    3480:	b2e4      	uxtb	r4, r4
    3482:	402a      	ands	r2, r5
    3484:	025b      	lsls	r3, r3, #9
    3486:	05e4      	lsls	r4, r4, #23
    3488:	0a58      	lsrs	r0, r3, #9
    348a:	07d2      	lsls	r2, r2, #31
    348c:	4320      	orrs	r0, r4
    348e:	4310      	orrs	r0, r2
    3490:	bc1c      	pop	{r2, r3, r4}
    3492:	4690      	mov	r8, r2
    3494:	4699      	mov	r9, r3
    3496:	46a2      	mov	sl, r4
    3498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    349a:	2cff      	cmp	r4, #255	; 0xff
    349c:	d0e0      	beq.n	3460 <__aeabi_fsub+0x8c>
    349e:	2180      	movs	r1, #128	; 0x80
    34a0:	04c9      	lsls	r1, r1, #19
    34a2:	430e      	orrs	r6, r1
    34a4:	2a1b      	cmp	r2, #27
    34a6:	dc7b      	bgt.n	35a0 <__aeabi_fsub+0x1cc>
    34a8:	0031      	movs	r1, r6
    34aa:	2020      	movs	r0, #32
    34ac:	40d1      	lsrs	r1, r2
    34ae:	1a82      	subs	r2, r0, r2
    34b0:	4096      	lsls	r6, r2
    34b2:	1e72      	subs	r2, r6, #1
    34b4:	4196      	sbcs	r6, r2
    34b6:	430e      	orrs	r6, r1
    34b8:	1b9b      	subs	r3, r3, r6
    34ba:	015a      	lsls	r2, r3, #5
    34bc:	d4ba      	bmi.n	3434 <__aeabi_fsub+0x60>
    34be:	075a      	lsls	r2, r3, #29
    34c0:	d1d0      	bne.n	3464 <__aeabi_fsub+0x90>
    34c2:	2201      	movs	r2, #1
    34c4:	08df      	lsrs	r7, r3, #3
    34c6:	402a      	ands	r2, r5
    34c8:	2cff      	cmp	r4, #255	; 0xff
    34ca:	d133      	bne.n	3534 <__aeabi_fsub+0x160>
    34cc:	2f00      	cmp	r7, #0
    34ce:	d100      	bne.n	34d2 <__aeabi_fsub+0xfe>
    34d0:	e0a8      	b.n	3624 <__aeabi_fsub+0x250>
    34d2:	2380      	movs	r3, #128	; 0x80
    34d4:	03db      	lsls	r3, r3, #15
    34d6:	433b      	orrs	r3, r7
    34d8:	025b      	lsls	r3, r3, #9
    34da:	0a5b      	lsrs	r3, r3, #9
    34dc:	24ff      	movs	r4, #255	; 0xff
    34de:	e7d1      	b.n	3484 <__aeabi_fsub+0xb0>
    34e0:	1a21      	subs	r1, r4, r0
    34e2:	2900      	cmp	r1, #0
    34e4:	dd4c      	ble.n	3580 <__aeabi_fsub+0x1ac>
    34e6:	2800      	cmp	r0, #0
    34e8:	d02a      	beq.n	3540 <__aeabi_fsub+0x16c>
    34ea:	2cff      	cmp	r4, #255	; 0xff
    34ec:	d0b8      	beq.n	3460 <__aeabi_fsub+0x8c>
    34ee:	2080      	movs	r0, #128	; 0x80
    34f0:	04c0      	lsls	r0, r0, #19
    34f2:	4306      	orrs	r6, r0
    34f4:	291b      	cmp	r1, #27
    34f6:	dd00      	ble.n	34fa <__aeabi_fsub+0x126>
    34f8:	e0af      	b.n	365a <__aeabi_fsub+0x286>
    34fa:	0030      	movs	r0, r6
    34fc:	2720      	movs	r7, #32
    34fe:	40c8      	lsrs	r0, r1
    3500:	1a79      	subs	r1, r7, r1
    3502:	408e      	lsls	r6, r1
    3504:	1e71      	subs	r1, r6, #1
    3506:	418e      	sbcs	r6, r1
    3508:	4306      	orrs	r6, r0
    350a:	199b      	adds	r3, r3, r6
    350c:	0159      	lsls	r1, r3, #5
    350e:	d5d6      	bpl.n	34be <__aeabi_fsub+0xea>
    3510:	3401      	adds	r4, #1
    3512:	2cff      	cmp	r4, #255	; 0xff
    3514:	d100      	bne.n	3518 <__aeabi_fsub+0x144>
    3516:	e085      	b.n	3624 <__aeabi_fsub+0x250>
    3518:	2201      	movs	r2, #1
    351a:	497a      	ldr	r1, [pc, #488]	; (3704 <__aeabi_fsub+0x330>)
    351c:	401a      	ands	r2, r3
    351e:	085b      	lsrs	r3, r3, #1
    3520:	400b      	ands	r3, r1
    3522:	4313      	orrs	r3, r2
    3524:	e79c      	b.n	3460 <__aeabi_fsub+0x8c>
    3526:	2e00      	cmp	r6, #0
    3528:	d000      	beq.n	352c <__aeabi_fsub+0x158>
    352a:	e770      	b.n	340e <__aeabi_fsub+0x3a>
    352c:	e76b      	b.n	3406 <__aeabi_fsub+0x32>
    352e:	1e3b      	subs	r3, r7, #0
    3530:	d1c5      	bne.n	34be <__aeabi_fsub+0xea>
    3532:	2200      	movs	r2, #0
    3534:	027b      	lsls	r3, r7, #9
    3536:	0a5b      	lsrs	r3, r3, #9
    3538:	b2e4      	uxtb	r4, r4
    353a:	e7a3      	b.n	3484 <__aeabi_fsub+0xb0>
    353c:	0014      	movs	r4, r2
    353e:	e78f      	b.n	3460 <__aeabi_fsub+0x8c>
    3540:	2e00      	cmp	r6, #0
    3542:	d04d      	beq.n	35e0 <__aeabi_fsub+0x20c>
    3544:	1e48      	subs	r0, r1, #1
    3546:	2800      	cmp	r0, #0
    3548:	d157      	bne.n	35fa <__aeabi_fsub+0x226>
    354a:	199b      	adds	r3, r3, r6
    354c:	2401      	movs	r4, #1
    354e:	015a      	lsls	r2, r3, #5
    3550:	d5b5      	bpl.n	34be <__aeabi_fsub+0xea>
    3552:	2402      	movs	r4, #2
    3554:	e7e0      	b.n	3518 <__aeabi_fsub+0x144>
    3556:	2a00      	cmp	r2, #0
    3558:	d125      	bne.n	35a6 <__aeabi_fsub+0x1d2>
    355a:	1c62      	adds	r2, r4, #1
    355c:	b2d2      	uxtb	r2, r2
    355e:	2a01      	cmp	r2, #1
    3560:	dd72      	ble.n	3648 <__aeabi_fsub+0x274>
    3562:	1b9f      	subs	r7, r3, r6
    3564:	017a      	lsls	r2, r7, #5
    3566:	d535      	bpl.n	35d4 <__aeabi_fsub+0x200>
    3568:	1af7      	subs	r7, r6, r3
    356a:	000d      	movs	r5, r1
    356c:	e764      	b.n	3438 <__aeabi_fsub+0x64>
    356e:	2201      	movs	r2, #1
    3570:	2300      	movs	r3, #0
    3572:	402a      	ands	r2, r5
    3574:	e786      	b.n	3484 <__aeabi_fsub+0xb0>
    3576:	003b      	movs	r3, r7
    3578:	4a63      	ldr	r2, [pc, #396]	; (3708 <__aeabi_fsub+0x334>)
    357a:	1a24      	subs	r4, r4, r0
    357c:	4013      	ands	r3, r2
    357e:	e76f      	b.n	3460 <__aeabi_fsub+0x8c>
    3580:	2900      	cmp	r1, #0
    3582:	d16c      	bne.n	365e <__aeabi_fsub+0x28a>
    3584:	1c61      	adds	r1, r4, #1
    3586:	b2c8      	uxtb	r0, r1
    3588:	2801      	cmp	r0, #1
    358a:	dd4e      	ble.n	362a <__aeabi_fsub+0x256>
    358c:	29ff      	cmp	r1, #255	; 0xff
    358e:	d049      	beq.n	3624 <__aeabi_fsub+0x250>
    3590:	199b      	adds	r3, r3, r6
    3592:	085b      	lsrs	r3, r3, #1
    3594:	000c      	movs	r4, r1
    3596:	e763      	b.n	3460 <__aeabi_fsub+0x8c>
    3598:	2aff      	cmp	r2, #255	; 0xff
    359a:	d041      	beq.n	3620 <__aeabi_fsub+0x24c>
    359c:	000a      	movs	r2, r1
    359e:	e781      	b.n	34a4 <__aeabi_fsub+0xd0>
    35a0:	2601      	movs	r6, #1
    35a2:	1b9b      	subs	r3, r3, r6
    35a4:	e789      	b.n	34ba <__aeabi_fsub+0xe6>
    35a6:	2c00      	cmp	r4, #0
    35a8:	d01c      	beq.n	35e4 <__aeabi_fsub+0x210>
    35aa:	28ff      	cmp	r0, #255	; 0xff
    35ac:	d021      	beq.n	35f2 <__aeabi_fsub+0x21e>
    35ae:	2480      	movs	r4, #128	; 0x80
    35b0:	04e4      	lsls	r4, r4, #19
    35b2:	4252      	negs	r2, r2
    35b4:	4323      	orrs	r3, r4
    35b6:	2a1b      	cmp	r2, #27
    35b8:	dd00      	ble.n	35bc <__aeabi_fsub+0x1e8>
    35ba:	e096      	b.n	36ea <__aeabi_fsub+0x316>
    35bc:	001c      	movs	r4, r3
    35be:	2520      	movs	r5, #32
    35c0:	40d4      	lsrs	r4, r2
    35c2:	1aaa      	subs	r2, r5, r2
    35c4:	4093      	lsls	r3, r2
    35c6:	1e5a      	subs	r2, r3, #1
    35c8:	4193      	sbcs	r3, r2
    35ca:	4323      	orrs	r3, r4
    35cc:	1af3      	subs	r3, r6, r3
    35ce:	0004      	movs	r4, r0
    35d0:	000d      	movs	r5, r1
    35d2:	e72d      	b.n	3430 <__aeabi_fsub+0x5c>
    35d4:	2f00      	cmp	r7, #0
    35d6:	d000      	beq.n	35da <__aeabi_fsub+0x206>
    35d8:	e72e      	b.n	3438 <__aeabi_fsub+0x64>
    35da:	2200      	movs	r2, #0
    35dc:	2400      	movs	r4, #0
    35de:	e7a9      	b.n	3534 <__aeabi_fsub+0x160>
    35e0:	000c      	movs	r4, r1
    35e2:	e73d      	b.n	3460 <__aeabi_fsub+0x8c>
    35e4:	2b00      	cmp	r3, #0
    35e6:	d058      	beq.n	369a <__aeabi_fsub+0x2c6>
    35e8:	43d2      	mvns	r2, r2
    35ea:	2a00      	cmp	r2, #0
    35ec:	d0ee      	beq.n	35cc <__aeabi_fsub+0x1f8>
    35ee:	28ff      	cmp	r0, #255	; 0xff
    35f0:	d1e1      	bne.n	35b6 <__aeabi_fsub+0x1e2>
    35f2:	0033      	movs	r3, r6
    35f4:	24ff      	movs	r4, #255	; 0xff
    35f6:	000d      	movs	r5, r1
    35f8:	e732      	b.n	3460 <__aeabi_fsub+0x8c>
    35fa:	29ff      	cmp	r1, #255	; 0xff
    35fc:	d010      	beq.n	3620 <__aeabi_fsub+0x24c>
    35fe:	0001      	movs	r1, r0
    3600:	e778      	b.n	34f4 <__aeabi_fsub+0x120>
    3602:	2b00      	cmp	r3, #0
    3604:	d06e      	beq.n	36e4 <__aeabi_fsub+0x310>
    3606:	24ff      	movs	r4, #255	; 0xff
    3608:	2e00      	cmp	r6, #0
    360a:	d100      	bne.n	360e <__aeabi_fsub+0x23a>
    360c:	e728      	b.n	3460 <__aeabi_fsub+0x8c>
    360e:	2280      	movs	r2, #128	; 0x80
    3610:	4651      	mov	r1, sl
    3612:	03d2      	lsls	r2, r2, #15
    3614:	4211      	tst	r1, r2
    3616:	d003      	beq.n	3620 <__aeabi_fsub+0x24c>
    3618:	4661      	mov	r1, ip
    361a:	4211      	tst	r1, r2
    361c:	d100      	bne.n	3620 <__aeabi_fsub+0x24c>
    361e:	0033      	movs	r3, r6
    3620:	24ff      	movs	r4, #255	; 0xff
    3622:	e71d      	b.n	3460 <__aeabi_fsub+0x8c>
    3624:	24ff      	movs	r4, #255	; 0xff
    3626:	2300      	movs	r3, #0
    3628:	e72c      	b.n	3484 <__aeabi_fsub+0xb0>
    362a:	2c00      	cmp	r4, #0
    362c:	d1e9      	bne.n	3602 <__aeabi_fsub+0x22e>
    362e:	2b00      	cmp	r3, #0
    3630:	d063      	beq.n	36fa <__aeabi_fsub+0x326>
    3632:	2e00      	cmp	r6, #0
    3634:	d100      	bne.n	3638 <__aeabi_fsub+0x264>
    3636:	e713      	b.n	3460 <__aeabi_fsub+0x8c>
    3638:	199b      	adds	r3, r3, r6
    363a:	015a      	lsls	r2, r3, #5
    363c:	d400      	bmi.n	3640 <__aeabi_fsub+0x26c>
    363e:	e73e      	b.n	34be <__aeabi_fsub+0xea>
    3640:	4a31      	ldr	r2, [pc, #196]	; (3708 <__aeabi_fsub+0x334>)
    3642:	000c      	movs	r4, r1
    3644:	4013      	ands	r3, r2
    3646:	e70b      	b.n	3460 <__aeabi_fsub+0x8c>
    3648:	2c00      	cmp	r4, #0
    364a:	d11e      	bne.n	368a <__aeabi_fsub+0x2b6>
    364c:	2b00      	cmp	r3, #0
    364e:	d12f      	bne.n	36b0 <__aeabi_fsub+0x2dc>
    3650:	2e00      	cmp	r6, #0
    3652:	d04f      	beq.n	36f4 <__aeabi_fsub+0x320>
    3654:	0033      	movs	r3, r6
    3656:	000d      	movs	r5, r1
    3658:	e702      	b.n	3460 <__aeabi_fsub+0x8c>
    365a:	2601      	movs	r6, #1
    365c:	e755      	b.n	350a <__aeabi_fsub+0x136>
    365e:	2c00      	cmp	r4, #0
    3660:	d11f      	bne.n	36a2 <__aeabi_fsub+0x2ce>
    3662:	2b00      	cmp	r3, #0
    3664:	d043      	beq.n	36ee <__aeabi_fsub+0x31a>
    3666:	43c9      	mvns	r1, r1
    3668:	2900      	cmp	r1, #0
    366a:	d00b      	beq.n	3684 <__aeabi_fsub+0x2b0>
    366c:	28ff      	cmp	r0, #255	; 0xff
    366e:	d039      	beq.n	36e4 <__aeabi_fsub+0x310>
    3670:	291b      	cmp	r1, #27
    3672:	dc44      	bgt.n	36fe <__aeabi_fsub+0x32a>
    3674:	001c      	movs	r4, r3
    3676:	2720      	movs	r7, #32
    3678:	40cc      	lsrs	r4, r1
    367a:	1a79      	subs	r1, r7, r1
    367c:	408b      	lsls	r3, r1
    367e:	1e59      	subs	r1, r3, #1
    3680:	418b      	sbcs	r3, r1
    3682:	4323      	orrs	r3, r4
    3684:	199b      	adds	r3, r3, r6
    3686:	0004      	movs	r4, r0
    3688:	e740      	b.n	350c <__aeabi_fsub+0x138>
    368a:	2b00      	cmp	r3, #0
    368c:	d11a      	bne.n	36c4 <__aeabi_fsub+0x2f0>
    368e:	2e00      	cmp	r6, #0
    3690:	d124      	bne.n	36dc <__aeabi_fsub+0x308>
    3692:	2780      	movs	r7, #128	; 0x80
    3694:	2200      	movs	r2, #0
    3696:	03ff      	lsls	r7, r7, #15
    3698:	e71b      	b.n	34d2 <__aeabi_fsub+0xfe>
    369a:	0033      	movs	r3, r6
    369c:	0004      	movs	r4, r0
    369e:	000d      	movs	r5, r1
    36a0:	e6de      	b.n	3460 <__aeabi_fsub+0x8c>
    36a2:	28ff      	cmp	r0, #255	; 0xff
    36a4:	d01e      	beq.n	36e4 <__aeabi_fsub+0x310>
    36a6:	2480      	movs	r4, #128	; 0x80
    36a8:	04e4      	lsls	r4, r4, #19
    36aa:	4249      	negs	r1, r1
    36ac:	4323      	orrs	r3, r4
    36ae:	e7df      	b.n	3670 <__aeabi_fsub+0x29c>
    36b0:	2e00      	cmp	r6, #0
    36b2:	d100      	bne.n	36b6 <__aeabi_fsub+0x2e2>
    36b4:	e6d4      	b.n	3460 <__aeabi_fsub+0x8c>
    36b6:	1b9f      	subs	r7, r3, r6
    36b8:	017a      	lsls	r2, r7, #5
    36ba:	d400      	bmi.n	36be <__aeabi_fsub+0x2ea>
    36bc:	e737      	b.n	352e <__aeabi_fsub+0x15a>
    36be:	1af3      	subs	r3, r6, r3
    36c0:	000d      	movs	r5, r1
    36c2:	e6cd      	b.n	3460 <__aeabi_fsub+0x8c>
    36c4:	24ff      	movs	r4, #255	; 0xff
    36c6:	2e00      	cmp	r6, #0
    36c8:	d100      	bne.n	36cc <__aeabi_fsub+0x2f8>
    36ca:	e6c9      	b.n	3460 <__aeabi_fsub+0x8c>
    36cc:	2280      	movs	r2, #128	; 0x80
    36ce:	4650      	mov	r0, sl
    36d0:	03d2      	lsls	r2, r2, #15
    36d2:	4210      	tst	r0, r2
    36d4:	d0a4      	beq.n	3620 <__aeabi_fsub+0x24c>
    36d6:	4660      	mov	r0, ip
    36d8:	4210      	tst	r0, r2
    36da:	d1a1      	bne.n	3620 <__aeabi_fsub+0x24c>
    36dc:	0033      	movs	r3, r6
    36de:	000d      	movs	r5, r1
    36e0:	24ff      	movs	r4, #255	; 0xff
    36e2:	e6bd      	b.n	3460 <__aeabi_fsub+0x8c>
    36e4:	0033      	movs	r3, r6
    36e6:	24ff      	movs	r4, #255	; 0xff
    36e8:	e6ba      	b.n	3460 <__aeabi_fsub+0x8c>
    36ea:	2301      	movs	r3, #1
    36ec:	e76e      	b.n	35cc <__aeabi_fsub+0x1f8>
    36ee:	0033      	movs	r3, r6
    36f0:	0004      	movs	r4, r0
    36f2:	e6b5      	b.n	3460 <__aeabi_fsub+0x8c>
    36f4:	2700      	movs	r7, #0
    36f6:	2200      	movs	r2, #0
    36f8:	e71c      	b.n	3534 <__aeabi_fsub+0x160>
    36fa:	0033      	movs	r3, r6
    36fc:	e6b0      	b.n	3460 <__aeabi_fsub+0x8c>
    36fe:	2301      	movs	r3, #1
    3700:	e7c0      	b.n	3684 <__aeabi_fsub+0x2b0>
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	7dffffff 	.word	0x7dffffff
    3708:	fbffffff 	.word	0xfbffffff

0000370c <__aeabi_i2f>:
    370c:	b570      	push	{r4, r5, r6, lr}
    370e:	2800      	cmp	r0, #0
    3710:	d030      	beq.n	3774 <__aeabi_i2f+0x68>
    3712:	17c3      	asrs	r3, r0, #31
    3714:	18c4      	adds	r4, r0, r3
    3716:	405c      	eors	r4, r3
    3718:	0fc5      	lsrs	r5, r0, #31
    371a:	0020      	movs	r0, r4
    371c:	f000 f88c 	bl	3838 <__clzsi2>
    3720:	239e      	movs	r3, #158	; 0x9e
    3722:	1a1b      	subs	r3, r3, r0
    3724:	2b96      	cmp	r3, #150	; 0x96
    3726:	dc0d      	bgt.n	3744 <__aeabi_i2f+0x38>
    3728:	2296      	movs	r2, #150	; 0x96
    372a:	1ad2      	subs	r2, r2, r3
    372c:	4094      	lsls	r4, r2
    372e:	002a      	movs	r2, r5
    3730:	0264      	lsls	r4, r4, #9
    3732:	0a64      	lsrs	r4, r4, #9
    3734:	b2db      	uxtb	r3, r3
    3736:	0264      	lsls	r4, r4, #9
    3738:	05db      	lsls	r3, r3, #23
    373a:	0a60      	lsrs	r0, r4, #9
    373c:	07d2      	lsls	r2, r2, #31
    373e:	4318      	orrs	r0, r3
    3740:	4310      	orrs	r0, r2
    3742:	bd70      	pop	{r4, r5, r6, pc}
    3744:	2b99      	cmp	r3, #153	; 0x99
    3746:	dc19      	bgt.n	377c <__aeabi_i2f+0x70>
    3748:	2299      	movs	r2, #153	; 0x99
    374a:	1ad2      	subs	r2, r2, r3
    374c:	2a00      	cmp	r2, #0
    374e:	dd29      	ble.n	37a4 <__aeabi_i2f+0x98>
    3750:	4094      	lsls	r4, r2
    3752:	0022      	movs	r2, r4
    3754:	4c14      	ldr	r4, [pc, #80]	; (37a8 <__aeabi_i2f+0x9c>)
    3756:	4014      	ands	r4, r2
    3758:	0751      	lsls	r1, r2, #29
    375a:	d004      	beq.n	3766 <__aeabi_i2f+0x5a>
    375c:	210f      	movs	r1, #15
    375e:	400a      	ands	r2, r1
    3760:	2a04      	cmp	r2, #4
    3762:	d000      	beq.n	3766 <__aeabi_i2f+0x5a>
    3764:	3404      	adds	r4, #4
    3766:	0162      	lsls	r2, r4, #5
    3768:	d413      	bmi.n	3792 <__aeabi_i2f+0x86>
    376a:	01a4      	lsls	r4, r4, #6
    376c:	0a64      	lsrs	r4, r4, #9
    376e:	b2db      	uxtb	r3, r3
    3770:	002a      	movs	r2, r5
    3772:	e7e0      	b.n	3736 <__aeabi_i2f+0x2a>
    3774:	2200      	movs	r2, #0
    3776:	2300      	movs	r3, #0
    3778:	2400      	movs	r4, #0
    377a:	e7dc      	b.n	3736 <__aeabi_i2f+0x2a>
    377c:	2205      	movs	r2, #5
    377e:	0021      	movs	r1, r4
    3780:	1a12      	subs	r2, r2, r0
    3782:	40d1      	lsrs	r1, r2
    3784:	22b9      	movs	r2, #185	; 0xb9
    3786:	1ad2      	subs	r2, r2, r3
    3788:	4094      	lsls	r4, r2
    378a:	1e62      	subs	r2, r4, #1
    378c:	4194      	sbcs	r4, r2
    378e:	430c      	orrs	r4, r1
    3790:	e7da      	b.n	3748 <__aeabi_i2f+0x3c>
    3792:	4b05      	ldr	r3, [pc, #20]	; (37a8 <__aeabi_i2f+0x9c>)
    3794:	002a      	movs	r2, r5
    3796:	401c      	ands	r4, r3
    3798:	239f      	movs	r3, #159	; 0x9f
    379a:	01a4      	lsls	r4, r4, #6
    379c:	1a1b      	subs	r3, r3, r0
    379e:	0a64      	lsrs	r4, r4, #9
    37a0:	b2db      	uxtb	r3, r3
    37a2:	e7c8      	b.n	3736 <__aeabi_i2f+0x2a>
    37a4:	0022      	movs	r2, r4
    37a6:	e7d5      	b.n	3754 <__aeabi_i2f+0x48>
    37a8:	fbffffff 	.word	0xfbffffff

000037ac <__aeabi_ui2f>:
    37ac:	b510      	push	{r4, lr}
    37ae:	1e04      	subs	r4, r0, #0
    37b0:	d027      	beq.n	3802 <__aeabi_ui2f+0x56>
    37b2:	f000 f841 	bl	3838 <__clzsi2>
    37b6:	239e      	movs	r3, #158	; 0x9e
    37b8:	1a1b      	subs	r3, r3, r0
    37ba:	2b96      	cmp	r3, #150	; 0x96
    37bc:	dc0a      	bgt.n	37d4 <__aeabi_ui2f+0x28>
    37be:	2296      	movs	r2, #150	; 0x96
    37c0:	1ad2      	subs	r2, r2, r3
    37c2:	4094      	lsls	r4, r2
    37c4:	0264      	lsls	r4, r4, #9
    37c6:	0a64      	lsrs	r4, r4, #9
    37c8:	b2db      	uxtb	r3, r3
    37ca:	0264      	lsls	r4, r4, #9
    37cc:	05db      	lsls	r3, r3, #23
    37ce:	0a60      	lsrs	r0, r4, #9
    37d0:	4318      	orrs	r0, r3
    37d2:	bd10      	pop	{r4, pc}
    37d4:	2b99      	cmp	r3, #153	; 0x99
    37d6:	dc17      	bgt.n	3808 <__aeabi_ui2f+0x5c>
    37d8:	2299      	movs	r2, #153	; 0x99
    37da:	1ad2      	subs	r2, r2, r3
    37dc:	2a00      	cmp	r2, #0
    37de:	dd27      	ble.n	3830 <__aeabi_ui2f+0x84>
    37e0:	4094      	lsls	r4, r2
    37e2:	0022      	movs	r2, r4
    37e4:	4c13      	ldr	r4, [pc, #76]	; (3834 <__aeabi_ui2f+0x88>)
    37e6:	4014      	ands	r4, r2
    37e8:	0751      	lsls	r1, r2, #29
    37ea:	d004      	beq.n	37f6 <__aeabi_ui2f+0x4a>
    37ec:	210f      	movs	r1, #15
    37ee:	400a      	ands	r2, r1
    37f0:	2a04      	cmp	r2, #4
    37f2:	d000      	beq.n	37f6 <__aeabi_ui2f+0x4a>
    37f4:	3404      	adds	r4, #4
    37f6:	0162      	lsls	r2, r4, #5
    37f8:	d412      	bmi.n	3820 <__aeabi_ui2f+0x74>
    37fa:	01a4      	lsls	r4, r4, #6
    37fc:	0a64      	lsrs	r4, r4, #9
    37fe:	b2db      	uxtb	r3, r3
    3800:	e7e3      	b.n	37ca <__aeabi_ui2f+0x1e>
    3802:	2300      	movs	r3, #0
    3804:	2400      	movs	r4, #0
    3806:	e7e0      	b.n	37ca <__aeabi_ui2f+0x1e>
    3808:	22b9      	movs	r2, #185	; 0xb9
    380a:	0021      	movs	r1, r4
    380c:	1ad2      	subs	r2, r2, r3
    380e:	4091      	lsls	r1, r2
    3810:	000a      	movs	r2, r1
    3812:	1e51      	subs	r1, r2, #1
    3814:	418a      	sbcs	r2, r1
    3816:	2105      	movs	r1, #5
    3818:	1a09      	subs	r1, r1, r0
    381a:	40cc      	lsrs	r4, r1
    381c:	4314      	orrs	r4, r2
    381e:	e7db      	b.n	37d8 <__aeabi_ui2f+0x2c>
    3820:	4b04      	ldr	r3, [pc, #16]	; (3834 <__aeabi_ui2f+0x88>)
    3822:	401c      	ands	r4, r3
    3824:	239f      	movs	r3, #159	; 0x9f
    3826:	01a4      	lsls	r4, r4, #6
    3828:	1a1b      	subs	r3, r3, r0
    382a:	0a64      	lsrs	r4, r4, #9
    382c:	b2db      	uxtb	r3, r3
    382e:	e7cc      	b.n	37ca <__aeabi_ui2f+0x1e>
    3830:	0022      	movs	r2, r4
    3832:	e7d7      	b.n	37e4 <__aeabi_ui2f+0x38>
    3834:	fbffffff 	.word	0xfbffffff

00003838 <__clzsi2>:
    3838:	211c      	movs	r1, #28
    383a:	2301      	movs	r3, #1
    383c:	041b      	lsls	r3, r3, #16
    383e:	4298      	cmp	r0, r3
    3840:	d301      	bcc.n	3846 <__clzsi2+0xe>
    3842:	0c00      	lsrs	r0, r0, #16
    3844:	3910      	subs	r1, #16
    3846:	0a1b      	lsrs	r3, r3, #8
    3848:	4298      	cmp	r0, r3
    384a:	d301      	bcc.n	3850 <__clzsi2+0x18>
    384c:	0a00      	lsrs	r0, r0, #8
    384e:	3908      	subs	r1, #8
    3850:	091b      	lsrs	r3, r3, #4
    3852:	4298      	cmp	r0, r3
    3854:	d301      	bcc.n	385a <__clzsi2+0x22>
    3856:	0900      	lsrs	r0, r0, #4
    3858:	3904      	subs	r1, #4
    385a:	a202      	add	r2, pc, #8	; (adr r2, 3864 <__clzsi2+0x2c>)
    385c:	5c10      	ldrb	r0, [r2, r0]
    385e:	1840      	adds	r0, r0, r1
    3860:	4770      	bx	lr
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	02020304 	.word	0x02020304
    3868:	01010101 	.word	0x01010101
	...

00003874 <__libc_init_array>:
    3874:	b570      	push	{r4, r5, r6, lr}
    3876:	2600      	movs	r6, #0
    3878:	4d0c      	ldr	r5, [pc, #48]	; (38ac <__libc_init_array+0x38>)
    387a:	4c0d      	ldr	r4, [pc, #52]	; (38b0 <__libc_init_array+0x3c>)
    387c:	1b64      	subs	r4, r4, r5
    387e:	10a4      	asrs	r4, r4, #2
    3880:	42a6      	cmp	r6, r4
    3882:	d109      	bne.n	3898 <__libc_init_array+0x24>
    3884:	2600      	movs	r6, #0
    3886:	f000 f8bd 	bl	3a04 <_init>
    388a:	4d0a      	ldr	r5, [pc, #40]	; (38b4 <__libc_init_array+0x40>)
    388c:	4c0a      	ldr	r4, [pc, #40]	; (38b8 <__libc_init_array+0x44>)
    388e:	1b64      	subs	r4, r4, r5
    3890:	10a4      	asrs	r4, r4, #2
    3892:	42a6      	cmp	r6, r4
    3894:	d105      	bne.n	38a2 <__libc_init_array+0x2e>
    3896:	bd70      	pop	{r4, r5, r6, pc}
    3898:	00b3      	lsls	r3, r6, #2
    389a:	58eb      	ldr	r3, [r5, r3]
    389c:	4798      	blx	r3
    389e:	3601      	adds	r6, #1
    38a0:	e7ee      	b.n	3880 <__libc_init_array+0xc>
    38a2:	00b3      	lsls	r3, r6, #2
    38a4:	58eb      	ldr	r3, [r5, r3]
    38a6:	4798      	blx	r3
    38a8:	3601      	adds	r6, #1
    38aa:	e7f2      	b.n	3892 <__libc_init_array+0x1e>
    38ac:	20000110 	.word	0x20000110
    38b0:	20000110 	.word	0x20000110
    38b4:	20000110 	.word	0x20000110
    38b8:	20000124 	.word	0x20000124

000038bc <malloc>:
    38bc:	b510      	push	{r4, lr}
    38be:	4b03      	ldr	r3, [pc, #12]	; (38cc <malloc+0x10>)
    38c0:	0001      	movs	r1, r0
    38c2:	6818      	ldr	r0, [r3, #0]
    38c4:	f000 f816 	bl	38f4 <_malloc_r>
    38c8:	bd10      	pop	{r4, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	200000ac 	.word	0x200000ac

000038d0 <memcpy>:
    38d0:	2300      	movs	r3, #0
    38d2:	b510      	push	{r4, lr}
    38d4:	429a      	cmp	r2, r3
    38d6:	d100      	bne.n	38da <memcpy+0xa>
    38d8:	bd10      	pop	{r4, pc}
    38da:	5ccc      	ldrb	r4, [r1, r3]
    38dc:	54c4      	strb	r4, [r0, r3]
    38de:	3301      	adds	r3, #1
    38e0:	e7f8      	b.n	38d4 <memcpy+0x4>

000038e2 <memset>:
    38e2:	0003      	movs	r3, r0
    38e4:	1882      	adds	r2, r0, r2
    38e6:	4293      	cmp	r3, r2
    38e8:	d100      	bne.n	38ec <memset+0xa>
    38ea:	4770      	bx	lr
    38ec:	7019      	strb	r1, [r3, #0]
    38ee:	3301      	adds	r3, #1
    38f0:	e7f9      	b.n	38e6 <memset+0x4>
	...

000038f4 <_malloc_r>:
    38f4:	2303      	movs	r3, #3
    38f6:	b570      	push	{r4, r5, r6, lr}
    38f8:	1ccd      	adds	r5, r1, #3
    38fa:	439d      	bics	r5, r3
    38fc:	3508      	adds	r5, #8
    38fe:	0006      	movs	r6, r0
    3900:	2d0c      	cmp	r5, #12
    3902:	d21e      	bcs.n	3942 <_malloc_r+0x4e>
    3904:	250c      	movs	r5, #12
    3906:	42a9      	cmp	r1, r5
    3908:	d81d      	bhi.n	3946 <_malloc_r+0x52>
    390a:	0030      	movs	r0, r6
    390c:	f000 f869 	bl	39e2 <__malloc_lock>
    3910:	4a25      	ldr	r2, [pc, #148]	; (39a8 <_malloc_r+0xb4>)
    3912:	6814      	ldr	r4, [r2, #0]
    3914:	0021      	movs	r1, r4
    3916:	2900      	cmp	r1, #0
    3918:	d119      	bne.n	394e <_malloc_r+0x5a>
    391a:	4c24      	ldr	r4, [pc, #144]	; (39ac <_malloc_r+0xb8>)
    391c:	6823      	ldr	r3, [r4, #0]
    391e:	2b00      	cmp	r3, #0
    3920:	d103      	bne.n	392a <_malloc_r+0x36>
    3922:	0030      	movs	r0, r6
    3924:	f000 f844 	bl	39b0 <_sbrk_r>
    3928:	6020      	str	r0, [r4, #0]
    392a:	0029      	movs	r1, r5
    392c:	0030      	movs	r0, r6
    392e:	f000 f83f 	bl	39b0 <_sbrk_r>
    3932:	1c43      	adds	r3, r0, #1
    3934:	d12c      	bne.n	3990 <_malloc_r+0x9c>
    3936:	230c      	movs	r3, #12
    3938:	0030      	movs	r0, r6
    393a:	6033      	str	r3, [r6, #0]
    393c:	f000 f852 	bl	39e4 <__malloc_unlock>
    3940:	e003      	b.n	394a <_malloc_r+0x56>
    3942:	2d00      	cmp	r5, #0
    3944:	dadf      	bge.n	3906 <_malloc_r+0x12>
    3946:	230c      	movs	r3, #12
    3948:	6033      	str	r3, [r6, #0]
    394a:	2000      	movs	r0, #0
    394c:	bd70      	pop	{r4, r5, r6, pc}
    394e:	680b      	ldr	r3, [r1, #0]
    3950:	1b5b      	subs	r3, r3, r5
    3952:	d41a      	bmi.n	398a <_malloc_r+0x96>
    3954:	2b0b      	cmp	r3, #11
    3956:	d903      	bls.n	3960 <_malloc_r+0x6c>
    3958:	600b      	str	r3, [r1, #0]
    395a:	18cc      	adds	r4, r1, r3
    395c:	6025      	str	r5, [r4, #0]
    395e:	e003      	b.n	3968 <_malloc_r+0x74>
    3960:	428c      	cmp	r4, r1
    3962:	d10e      	bne.n	3982 <_malloc_r+0x8e>
    3964:	6863      	ldr	r3, [r4, #4]
    3966:	6013      	str	r3, [r2, #0]
    3968:	0030      	movs	r0, r6
    396a:	f000 f83b 	bl	39e4 <__malloc_unlock>
    396e:	0020      	movs	r0, r4
    3970:	2207      	movs	r2, #7
    3972:	300b      	adds	r0, #11
    3974:	1d23      	adds	r3, r4, #4
    3976:	4390      	bics	r0, r2
    3978:	1ac3      	subs	r3, r0, r3
    397a:	d0e7      	beq.n	394c <_malloc_r+0x58>
    397c:	425a      	negs	r2, r3
    397e:	50e2      	str	r2, [r4, r3]
    3980:	e7e4      	b.n	394c <_malloc_r+0x58>
    3982:	684b      	ldr	r3, [r1, #4]
    3984:	6063      	str	r3, [r4, #4]
    3986:	000c      	movs	r4, r1
    3988:	e7ee      	b.n	3968 <_malloc_r+0x74>
    398a:	000c      	movs	r4, r1
    398c:	6849      	ldr	r1, [r1, #4]
    398e:	e7c2      	b.n	3916 <_malloc_r+0x22>
    3990:	2303      	movs	r3, #3
    3992:	1cc4      	adds	r4, r0, #3
    3994:	439c      	bics	r4, r3
    3996:	42a0      	cmp	r0, r4
    3998:	d0e0      	beq.n	395c <_malloc_r+0x68>
    399a:	1a21      	subs	r1, r4, r0
    399c:	0030      	movs	r0, r6
    399e:	f000 f807 	bl	39b0 <_sbrk_r>
    39a2:	1c43      	adds	r3, r0, #1
    39a4:	d1da      	bne.n	395c <_malloc_r+0x68>
    39a6:	e7c6      	b.n	3936 <_malloc_r+0x42>
    39a8:	20000ecc 	.word	0x20000ecc
    39ac:	20000ed0 	.word	0x20000ed0

000039b0 <_sbrk_r>:
    39b0:	2300      	movs	r3, #0
    39b2:	b570      	push	{r4, r5, r6, lr}
    39b4:	4c06      	ldr	r4, [pc, #24]	; (39d0 <_sbrk_r+0x20>)
    39b6:	0005      	movs	r5, r0
    39b8:	0008      	movs	r0, r1
    39ba:	6023      	str	r3, [r4, #0]
    39bc:	f000 f814 	bl	39e8 <_sbrk>
    39c0:	1c43      	adds	r3, r0, #1
    39c2:	d103      	bne.n	39cc <_sbrk_r+0x1c>
    39c4:	6823      	ldr	r3, [r4, #0]
    39c6:	2b00      	cmp	r3, #0
    39c8:	d000      	beq.n	39cc <_sbrk_r+0x1c>
    39ca:	602b      	str	r3, [r5, #0]
    39cc:	bd70      	pop	{r4, r5, r6, pc}
    39ce:	46c0      	nop			; (mov r8, r8)
    39d0:	20000ed8 	.word	0x20000ed8

000039d4 <strlen>:
    39d4:	2300      	movs	r3, #0
    39d6:	5cc2      	ldrb	r2, [r0, r3]
    39d8:	3301      	adds	r3, #1
    39da:	2a00      	cmp	r2, #0
    39dc:	d1fb      	bne.n	39d6 <strlen+0x2>
    39de:	1e58      	subs	r0, r3, #1
    39e0:	4770      	bx	lr

000039e2 <__malloc_lock>:
    39e2:	4770      	bx	lr

000039e4 <__malloc_unlock>:
    39e4:	4770      	bx	lr
	...

000039e8 <_sbrk>:
    39e8:	4a04      	ldr	r2, [pc, #16]	; (39fc <_sbrk+0x14>)
    39ea:	6813      	ldr	r3, [r2, #0]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d003      	beq.n	39f8 <_sbrk+0x10>
    39f0:	1818      	adds	r0, r3, r0
    39f2:	6010      	str	r0, [r2, #0]
    39f4:	0018      	movs	r0, r3
    39f6:	4770      	bx	lr
    39f8:	4b01      	ldr	r3, [pc, #4]	; (3a00 <_sbrk+0x18>)
    39fa:	e7f9      	b.n	39f0 <_sbrk+0x8>
    39fc:	20000ed4 	.word	0x20000ed4
    3a00:	20000edc 	.word	0x20000edc

00003a04 <_init>:
    3a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a0a:	bc08      	pop	{r3}
    3a0c:	469e      	mov	lr, r3
    3a0e:	4770      	bx	lr

00003a10 <_fini>:
    3a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a16:	bc08      	pop	{r3}
    3a18:	469e      	mov	lr, r3
    3a1a:	4770      	bx	lr
	...
    3a38:	01010101 	.word	0x01010101
    3a3c:	01010101 	.word	0x01010101
    3a40:	01010101 	.word	0x01010101
    3a44:	02020201 	.word	0x02020201
    3a48:	02020202 	.word	0x02020202
    3a4c:	03030302 	.word	0x03030302
    3a50:	03030303 	.word	0x03030303
    3a54:	04040404 	.word	0x04040404
    3a58:	05050504 	.word	0x05050504
    3a5c:	06060605 	.word	0x06060605
    3a60:	07070706 	.word	0x07070706
    3a64:	08080807 	.word	0x08080807
    3a68:	0a090909 	.word	0x0a090909
    3a6c:	0b0b0a0a 	.word	0x0b0b0a0a
    3a70:	0d0c0c0b 	.word	0x0d0c0c0b
    3a74:	0e0e0d0d 	.word	0x0e0e0d0d
    3a78:	10100f0f 	.word	0x10100f0f
    3a7c:	12121111 	.word	0x12121111
    3a80:	14141313 	.word	0x14141313
    3a84:	16161515 	.word	0x16161515
    3a88:	19181817 	.word	0x19181817
    3a8c:	1b1b1a19 	.word	0x1b1b1a19
    3a90:	1e1d1d1c 	.word	0x1e1d1d1c
    3a94:	2120201f 	.word	0x2120201f
    3a98:	24232322 	.word	0x24232322
    3a9c:	27272625 	.word	0x27272625
    3aa0:	2b2a2928 	.word	0x2b2a2928
    3aa4:	2f2e2d2c 	.word	0x2f2e2d2c
    3aa8:	32323130 	.word	0x32323130
    3aac:	37363433 	.word	0x37363433
    3ab0:	3b3a3938 	.word	0x3b3a3938
    3ab4:	3f3e3d3c 	.word	0x3f3e3d3c
    3ab8:	44434240 	.word	0x44434240
    3abc:	49484645 	.word	0x49484645
    3ac0:	4e4d4b4a 	.word	0x4e4d4b4a
    3ac4:	5352514f 	.word	0x5352514f
    3ac8:	59575655 	.word	0x59575655
    3acc:	5f5d5c5a 	.word	0x5f5d5c5a
    3ad0:	65636260 	.word	0x65636260
    3ad4:	6b696866 	.word	0x6b696866
    3ad8:	72706e6d 	.word	0x72706e6d
    3adc:	78777573 	.word	0x78777573
    3ae0:	7f7e7c7a 	.word	0x7f7e7c7a
    3ae4:	87858381 	.word	0x87858381
    3ae8:	8e8c8a89 	.word	0x8e8c8a89
    3aec:	96949290 	.word	0x96949290
    3af0:	9e9c9a98 	.word	0x9e9c9a98
    3af4:	a7a4a2a0 	.word	0xa7a4a2a0
    3af8:	afadaba9 	.word	0xafadaba9
    3afc:	b8b6b4b1 	.word	0xb8b6b4b1
    3b00:	c1bfbdba 	.word	0xc1bfbdba
    3b04:	cbc8c6c4 	.word	0xcbc8c6c4
    3b08:	d5d2d0cd 	.word	0xd5d2d0cd
    3b0c:	dfdcdad7 	.word	0xdfdcdad7
    3b10:	e9e7e4e1 	.word	0xe9e7e4e1
    3b14:	f4f1efec 	.word	0xf4f1efec
    3b18:	fffcf9f7 	.word	0xfffcf9f7

00003b1c <_ZTV26DoubleBufferedEPOutHandler>:
	...
    3b24:	00000f1b 00000dfd 00000d59              ........Y...

00003b30 <_ZL14STRING_PRODUCT>:
    3b30:	75647241 206f6e69 6f72655a 03040000              Arduino Zero..

00003b3e <_ZL15STRING_LANGUAGE>:
    3b3e:	04090304                                ....

00003b42 <_ZL19STRING_MANUFACTURER>:
    3b42:	75647241 206f6e69 00434c4c              Arduino LLC.

00003b4e <_ZL21USB_DeviceDescriptorB>:
    3b4e:	02000112 400102ef 804d2341 02010100     .......@A#M.....
    3b5e:	001a0103 001b001a 001c001b 001d001c     ................
    3b6e:	0000001d                                         ..

00003b70 <g_APinDescription>:
    3b70:	00000000 0000000b 00000002 00000004     ................
    3b80:	ffff00ff 000bffff 00000000 0000000a     ................
    3b90:	00000002 00000004 ffff00ff 000affff     ................
    3ba0:	00000000 0000000e 00000008 00000004     ................
    3bb0:	ffff00ff 000effff 00000000 00000009     ................
    3bc0:	00000004 0000001c 000100ff 00090001     ................
    3bd0:	00000000 00000008 00000004 0000001c     ................
    3be0:	000000ff 00100000 00000000 0000000f     ................
    3bf0:	00000004 0000001c 030100ff 000f0301     ................
    3c00:	00000000 00000014 00000005 0000002c     ............,...
    3c10:	000200ff 00040002 00000000 00000015     ................
    3c20:	00000005 0000002c 000300ff 00050003     ....,...........
    3c30:	00000000 00000006 00000004 0000001c     ................
    3c40:	010000ff 00060100 00000000 00000007     ................
    3c50:	00000004 0000001c 010100ff 00070101     ................
    3c60:	00000000 00000012 00000004 0000001c     ................
    3c70:	030000ff 00020300 00000000 00000010     ................
    3c80:	00000004 0000001c 020000ff 00000200     ................
    3c90:	00000000 00000013 00000005 0000002c     ............,...
    3ca0:	000300ff 00030003 00000000 00000011     ................
    3cb0:	00000004 0000001c 020100ff 00010201     ................
    3cc0:	00000000 00000002 00000001 00000002     ................
    3cd0:	ffff0000 0002ffff 00000001 00000008     ................
    3ce0:	00000001 00000018 04000002 00080400     ................
    3cf0:	00000001 00000009 00000001 00000018     ................
    3d00:	04010003 00090401 00000000 00000004     ................
    3d10:	00000001 00000000 ffff0004 0004ffff     ................
    3d20:	00000000 00000005 00000001 00000000     ................
    3d30:	ffff0005 0005ffff 00000001 00000002     ................
    3d40:	00000001 00000000 ffff000a 0002ffff     ................
    3d50:	00000000 00000016 00000002 00000004     ................
    3d60:	ffff00ff 0006ffff 00000000 00000017     ................
    3d70:	00000002 00000004 ffff00ff 0007ffff     ................
    3d80:	00000000 0000000c 00000003 00000004     ................
    3d90:	ffff00ff 000cffff 00000001 0000000a     ................
    3da0:	00000003 00000004 ffff00ff 000affff     ................
    3db0:	00000001 0000000b 00000003 00000004     ................
    3dc0:	ffff00ff 000bffff 00000001 00000003     ................
    3dd0:	0000000b 00000004 ffff00ff 00ffffff     ................
    3de0:	00000000 0000001b 0000000b 00000004     ................
    3df0:	ffff00ff 00ffffff 00000000 0000001c     ................
    3e00:	00000006 00000000 ffff00ff 00ffffff     ................
    3e10:	00000000 00000018 00000006 00000000     ................
    3e20:	ffff00ff 00ffffff 00000000 00000019     ................
    3e30:	00000006 00000000 ffff00ff 00ffffff     ................
    3e40:	00000001 00000016 00000003 00000000     ................
    3e50:	ffff00ff 00ffffff 00000001 00000017     ................
    3e60:	00000003 00000000 ffff00ff 00ffffff     ................
    3e70:	00000000 00000016 00000002 00000000     ................
    3e80:	ffff00ff 00ffffff 00000000 00000017     ................
    3e90:	00000002 00000000 ffff00ff 00ffffff     ................
    3ea0:	00000000 00000013 00000002 00000000     ................
    3eb0:	ffff00ff 00ffffff 00000000 00000010     ................
    3ec0:	00000002 00000000 ffff00ff 00ffffff     ................
    3ed0:	00000000 00000012 00000002 00000000     ................
    3ee0:	ffff00ff 00ffffff 00000000 00000011     ................
    3ef0:	00000002 00000000 ffff00ff 00ffffff     ................
    3f00:	00000000 0000000d 00000004 0000000c     ................
    3f10:	000100ff 000dffff 00000000 00000015     ................
    3f20:	00000005 0000000c 000300ff 00ffffff     ................
    3f30:	00000000 00000006 00000004 0000000c     ................
    3f40:	010000ff 00ffffff 00000000 00000007     ................
    3f50:	00000004 0000000c 010100ff 00ffffff     ................
    3f60:	00000000 00000003 00000001 00000002     ................
    3f70:	ffff00ff 00ffffff 00000000 00000002     ................
    3f80:	00000001 00000002 ffff0014 0002ffff     ................

00003f90 <_ZTV4Uart>:
	...
    3f98:	00002691 00002985 000025d3 00002595     .&...)...%...%..
    3fa8:	000025ad 00002745 000023a9 00002399     .%..E'...#...#..
    3fb8:	00002425 000023bf 00002395              %$...#...#..

00003fc4 <_ZTV7Serial_>:
	...
    3fcc:	00002791 000027bd 0000278d 000027b1     .'...'...'...'..
    3fdc:	000027a5 000027f5 000027d9 000032c0     .'...'...'...2..
    3fec:	00003210 00003210 0000320e 000032b2     .2...2...2...2..
    3ffc:	000032b2 000032a8 0000320e 000032b2     .2...2...2...2..
    400c:	000032a8 000032b2 0000320e 000032b8     .2...2...2...2..
    401c:	000032b8 000032b8 00003348              .2...2..H3..

00004028 <__EH_FRAME_BEGIN__>:
    4028:	00000000                                ....
